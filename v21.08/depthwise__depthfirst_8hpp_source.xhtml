<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/depthwise/depthwise_depthfirst.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('depthwise__depthfirst_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthwise_depthfirst.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwise__depthfirst_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">src/core/NEON/kernels/arm_gemm/utils.hpp</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;profiler.hpp&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a> {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise</a> {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> strategy&gt;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">   39</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> : <span class="keyword">public</span> DepthwiseCommon&lt;typename strategy::input_type,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                   typename strategy::weight_type,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                   typename strategy::return_type&gt;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">using</span> TInput = <span class="keyword">typename</span> strategy::input_type;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">using</span> TWeight = <span class="keyword">typename</span> strategy::weight_type;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">using</span> TOutput = <span class="keyword">typename</span> strategy::return_type;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">using</span> TAccum = <span class="keyword">typename</span> strategy::bias_type;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordtype">size_t</span> sizeof_input_buffer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_input_channels)<span class="keyword"> const</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(TInput) * n_input_channels;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">size_t</span> sizeof_output_buffer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_output_channels)<span class="keyword"> const</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(TOutput) * n_output_channels;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a38a0301e3ea935b48f85c55d4c6ed910">   60</a></span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a38a0301e3ea935b48f85c55d4c6ed910">DepthwiseDepthfirst</a>(<span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) : DepthwiseCommon&lt;TInput, TWeight, TOutput&gt;(args)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a38a0301e3ea935b48f85c55d4c6ed910">DepthwiseDepthfirst</a>(<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aab88a148ebdfeae4dbd2861c7052e21f">operator=</a>(<a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a6de6182e7c12d5492f092057f5b32d30">   67</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a6de6182e7c12d5492f092057f5b32d30">get_storage_size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const override</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// TODO What if we insert extra padding? Biases are a different size to the inputs, ...</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl = arm_gemm::utils::get_vector_length&lt;TInput&gt;(strategy::vl_type);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> rounded_channels = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a>(this-&gt;m_args.input_channels, vl);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> (1 + this-&gt;m_args.kernel_rows * this-&gt;m_args.kernel_cols) * rounded_channels * <span class="keyword">sizeof</span>(TWeight);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aa3cd2726a0e06059d710d218519155c6">   75</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aa3cd2726a0e06059d710d218519155c6">pack_parameters</a>(<span class="keywordtype">void</span> *_buffer, <span class="keyword">const</span> <span class="keywordtype">void</span> *_biases, <span class="keyword">const</span> <span class="keywordtype">void</span> *_weights, <span class="keywordtype">size_t</span> ld_weight_col, <span class="keywordtype">size_t</span> ld_weight_row)<span class="keyword"> override</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// TODO What if the kernel needs a different packing function?</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Cast the pointers</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    uint8_t *buffer = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_buffer);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> TAccum *biases = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TAccum *<span class="keyword">&gt;</span>(_biases);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> TWeight *<span class="keyword">const</span> weights = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TWeight *<span class="keyword">&gt;</span>(_weights);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl = arm_gemm::utils::get_vector_length&lt;TAccum&gt;(strategy::vl_type);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    ld_weight_col = (ld_weight_col == 0) ? this-&gt;m_args.input_channels : ld_weight_col;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    ld_weight_row = (ld_weight_row == 0) ? this-&gt;m_args.kernel_cols * ld_weight_col : ld_weight_row;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; this-&gt;m_args.input_channels; n += vl)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> todo = std::min(vl, this-&gt;m_args.input_channels - n);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="comment">// Copy across the correct amount of bias (or 0)</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; todo; i++)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">reinterpret_cast&lt;</span>TAccum *<span class="keyword">&gt;</span>(buffer)[i] = (biases == <span class="keyword">nullptr</span>) ? 0 : biases[n + i];</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      buffer += vl * <span class="keyword">sizeof</span>(TAccum);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="comment">// Copy each of the weights in turn</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="keyword">auto</span> weights_row = weights + n;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; this-&gt;m_args.kernel_rows; i++)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">auto</span> weights_col = weights_row;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; this-&gt;m_args.kernel_cols; j++)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0; m &lt; todo; m++)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;          {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">reinterpret_cast&lt;</span>TWeight *<span class="keyword">&gt;</span>(buffer)[m] = weights_col[m];</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;          buffer += vl * <span class="keyword">sizeof</span>(TWeight);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;          weights_col += ld_weight_col;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        weights_row += ld_weight_row;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">  121</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">get_working_size</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_channels)<span class="keyword"> const override</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_output_channels = n_channels * this-&gt;m_args.channel_multiplier;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> n_threads * (sizeof_output_buffer(n_output_channels) + sizeof_input_buffer(n_channels));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">using</span> DepthwiseCommon&lt;typename strategy::input_type, typename strategy::weight_type, typename strategy::return_type&gt;::execute;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#ad5039576663a8b9a8ed58e927c040b20">  128</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#ad5039576663a8b9a8ed58e927c040b20">execute</a>(</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> input_channels,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> PaddingValues &amp;padding,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> _input,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_col,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_row,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_batch,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> *<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_height,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_width,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> _output,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_col,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_row,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_batch,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">void</span> *<span class="keyword">const</span> _working_space,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_id,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_threads</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  )<span class="keyword"> const override</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">  </span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    strategy strat(this-&gt;m_args.cpu_info);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    arm_gemm::profiler prof;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Compute activation values</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    TAccum activation_min, activation_max;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::tie(activation_min, activation_max) = get_default_activation_values&lt;TAccum&gt;();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">switch</span> (this-&gt;m_args.activation.type)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a>:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        activation_max = <span class="keyword">static_cast&lt;</span>TAccum<span class="keyword">&gt;</span>(this-&gt;m_args.activation.param1);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// Fall through</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        activation_min = <span class="keyword">static_cast&lt;</span>TAccum<span class="keyword">&gt;</span>(0);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Determine what portion of the work to do.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_rows_per_thread = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a>(output_height, n_threads);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_out_height = std::min(thread_id * n_rows_per_thread, output_height);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_height = std::min(start_out_height + n_rows_per_thread, output_height);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Cast input and output pointers into the right types</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> TInput *<span class="keyword">const</span> inptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TInput *<span class="keyword">&gt;</span>(_input);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    TOutput *<span class="keyword">const</span> outptr = <span class="keyword">static_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(_output);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// Create an array for the input pointers</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> TInput * _inptr_array[strategy::input_rows * strategy::input_cols];</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> TInput **<span class="keyword">const</span> inptr_array = _inptr_array;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Create an array for the output pointers</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    TOutput * _outptr_array[strategy::output_rows * strategy::output_cols];</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    TOutput **<span class="keyword">const</span> outptr_array = _outptr_array;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Allocate portions of the working space</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    uint8_t *<span class="keyword">const</span> working_space = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_working_space) + <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">get_working_size</a>(thread_id, input_channels);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    TOutput *<span class="keyword">const</span> output_buffer = <span class="keyword">reinterpret_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    TInput *<span class="keyword">const</span> input_buffer = <span class="keyword">reinterpret_cast&lt;</span>TInput *<span class="keyword">&gt;</span>(working_space + sizeof_output_buffer(input_channels * this-&gt;m_args.channel_multiplier));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Initialise the input buffer</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; input_channels; c++)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      input_buffer[c] = <span class="keyword">static_cast&lt;</span>TInput<span class="keyword">&gt;</span>(0);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// For each output tile, construct the requisite set of pointers and call</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// into the kernel.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = 0; batch &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; batch++)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      <span class="comment">// Get batch pointers</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> inptr_batch = inptr + batch * ld_input_batch;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> outptr_batch = outptr + batch * ld_output_batch;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_i = start_out_height;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;           start_out_i &lt; end_out_height;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;           start_out_i += <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(strategy::output_rows))</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_i = start_out_i + strategy::output_rows;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_i = start_out_i * strategy::stride_rows - padding.top;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_i = start_in_i + strategy::input_rows;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// Compute top/bottom padding</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_top = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(start_in_i, 0));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(input_height) - end_in_i, 0));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_rows = std::min(</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          end_out_i - start_out_i,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;          static_cast&lt;int&gt;(output_height) - start_out_i</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        );</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="comment">// Fill the input pointer array with padding values</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> index = 0u; index &lt; strategy::input_rows * strategy::input_cols; index++)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          inptr_array[index] = input_buffer;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_j = 0; start_out_j &lt; static_cast&lt;int&gt;(output_width);)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_j = start_out_j * strategy::stride_cols - this-&gt;m_args.padding.left;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left = -std::min(0, start_in_j);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          <span class="comment">// Compute how many output tiles we can compute with the direct kernel.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;          <span class="keywordtype">int</span> n_direct_tiles = 0;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          <span class="keywordflow">if</span> (!pad_top &amp;&amp; !pad_bottom &amp;&amp; !pad_left)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;          {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="comment">// Determine the maximum number of tiles we could handle.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            n_direct_tiles = (output_width - start_out_j) / strategy::output_cols;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="comment">// Continue to reduce this number as required to avoid reading</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="comment">// padding on the right edge.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordtype">int</span> end_in_j = start_in_j + n_direct_tiles * strategy::input_cols;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordtype">int</span> pad_right = std::max(0, end_in_j - static_cast&lt;int&gt;(input_width));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">while</span> (pad_right &amp;&amp; n_direct_tiles)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;              n_direct_tiles--;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;              end_in_j -= strategy::input_cols;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;              pad_right = std::max(0, end_in_j - static_cast&lt;int&gt;(input_width));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;          }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;          <span class="comment">// Use the unpadded kernel if we can, otherwise use the padded one.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;          <span class="keywordflow">if</span> (n_direct_tiles)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;          {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keyword">auto</span> inptr = inptr_batch + start_in_i*ld_input_row + start_in_j*ld_input_col;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keyword">auto</span> outptr = outptr_batch + start_out_i*ld_output_row + start_out_j*ld_output_col;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            start_out_j += n_direct_tiles*strategy::output_cols;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, 0);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            strat.direct_kernel(1, n_direct_tiles,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                inptr, ld_input_row, ld_input_col,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                outptr, ld_output_row, ld_output_col,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                parameters, this-&gt;m_args.input_channels,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                activation_min, activation_max);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;          }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_j = start_out_j + strategy::output_cols;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_j = start_in_j + strategy::input_cols;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> pad_right = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(input_width) - end_in_j, 0));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_cols = std::min(</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            end_out_j - start_out_j,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            static_cast&lt;int&gt;(output_width) - start_out_j</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;          );</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;          <span class="comment">// Construct the input pointer array - fill the array with pointers to</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;          <span class="comment">// the input buffer and then fill in the required values.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = pad_top; i &lt; strategy::input_rows - pad_bottom; i++)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;          {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="comment">// Can skip over the left padding because we will have either the</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="comment">// same or less than the previous tile.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = pad_left;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> TInput *colptr = inptr_batch + (start_in_i + i) * ld_input_row + (start_in_j + j) * ld_input_col;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> TInput **ptrs = inptr_array + i * strategy::input_cols + j;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keywordflow">for</span> (; j &lt; strategy::input_cols - pad_right; j++)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;              *(ptrs++) = colptr;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;              colptr += ld_input_col;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">for</span> (; j &lt; strategy::input_cols; j++)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;              *(ptrs++) = input_buffer;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;          }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;          <span class="comment">// Construct the output pointer array.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;          TOutput **outptr_pos = outptr_array;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; valid_output_rows; i++)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;          {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            TOutput *colptr = outptr_batch + (start_out_i + i) * ld_output_row + start_out_j * ld_output_col;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">for</span> (; j &lt; valid_output_cols; j++)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;              *(outptr_pos++) = colptr;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;               colptr += ld_output_col;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">for</span> (; j &lt; strategy::output_cols; j++)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;          }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = valid_output_rows; i &lt; strategy::output_rows; i++)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;          {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = 0u; j &lt; strategy::output_cols; j++)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;          }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;          start_out_j += strategy::output_cols;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;          <span class="comment">// TODO Work number</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;          <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(0));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;          strat.indirect_kernel(inptr_array, outptr_array, parameters,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                this-&gt;m_args.input_channels, activation_min, activation_max);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;};</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}  <span class="comment">// namespace depthwise</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}  <span class="comment">// namespace arm_conv</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="namespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8h_source.xhtml#l00031">CpuDepthwiseConv2dAssemblyWrapperKernel.h:31</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">arm_conv::depthwise::DepthwiseDepthfirst</a></div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00039">depthwise_depthfirst.hpp:39</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_aab88a148ebdfeae4dbd2861c7052e21f"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aab88a148ebdfeae4dbd2861c7052e21f">arm_conv::depthwise::DepthwiseDepthfirst::operator=</a></div><div class="ttdeci">DepthwiseDepthfirst &amp; operator=(DepthwiseDepthfirst &amp;)=delete</div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_a75e1cc96fb24afdaf053389218d889c7"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">arm_conv::depthwise::DepthwiseDepthfirst::get_working_size</a></div><div class="ttdeci">size_t get_working_size(const unsigned int n_threads, const unsigned int n_channels) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00121">depthwise_depthfirst.hpp:121</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_abb222b6342b2b9056ec65056984d5e21"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">arm_compute::test::parameters</a></div><div class="ttdeci">std::unique_ptr&lt; ParametersLibrary &gt; parameters</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00046">Framework.cpp:46</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_aa3cd2726a0e06059d710d218519155c6"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aa3cd2726a0e06059d710d218519155c6">arm_conv::depthwise::DepthwiseDepthfirst::pack_parameters</a></div><div class="ttdeci">void pack_parameters(void *_buffer, const void *_biases, const void *_weights, size_t ld_weight_col, size_t ld_weight_row) override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00075">depthwise_depthfirst.hpp:75</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00072">CpuDepthwiseConv2dNativeKernel.cpp:72</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_a38a0301e3ea935b48f85c55d4c6ed910"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a38a0301e3ea935b48f85c55d4c6ed910">arm_conv::depthwise::DepthwiseDepthfirst::DepthwiseDepthfirst</a></div><div class="ttdeci">DepthwiseDepthfirst(const DepthwiseArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00060">depthwise_depthfirst.hpp:60</a></div></div>
<div class="ttc" id="namespacearm__conv_1_1depthwise_xhtml_a301c401a1e9a5ac74367c4719a185aa4"><div class="ttname"><a href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">arm_conv::depthwise::depthwise</a></div><div class="ttdeci">template UniqueDepthwiseCommon&lt; float &gt; depthwise(const DepthwiseArgs &amp;, const Nothing &amp;)</div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_a6de6182e7c12d5492f092057f5b32d30"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a6de6182e7c12d5492f092057f5b32d30">arm_conv::depthwise::DepthwiseDepthfirst::get_storage_size</a></div><div class="ttdeci">size_t get_storage_size(void) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00067">depthwise_depthfirst.hpp:67</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">CpuGemmAssemblyDispatch.cpp:57</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_ad5039576663a8b9a8ed58e927c040b20"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#ad5039576663a8b9a8ed58e927c040b20">arm_conv::depthwise::DepthwiseDepthfirst::execute</a></div><div class="ttdeci">void execute(const unsigned int batches, const unsigned int input_height, const unsigned int input_width, const unsigned int input_channels, const PaddingValues &amp;padding, const void *const _input, const size_t ld_input_col, const size_t ld_input_row, const size_t ld_input_batch, const void *const parameters, const unsigned int output_height, const unsigned int output_width, void *const _output, const size_t ld_output_col, const size_t ld_output_row, const size_t ld_output_batch, void *const _working_space, const unsigned int thread_id, const unsigned int n_threads) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00128">depthwise_depthfirst.hpp:128</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="dir_abb214ad2a926c78a0f27cabc6cb4a00.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="depthwise__depthfirst_8hpp.xhtml">depthwise_depthfirst.hpp</a></li>
    <li class="footer">Generated on Fri Aug 20 2021 08:56:12 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
