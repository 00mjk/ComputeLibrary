<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::cpu Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1cpu.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::cpu Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu_1_1kernel"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernel.xhtml">kernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu_1_1kernels"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml">kernels</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">AsmGemmInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml">CpuActivation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml">kernels::CpuActivationKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_add.xhtml">CpuAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml">kernels::CpuAddKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_cpu_capabilities.xhtml">CpuCapabilities</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure that encodes the CPU capabilities to be used.  <a href="structarm__compute_1_1cpu_1_1_cpu_capabilities.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_cast.xhtml">CpuCast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml">kernels::CpuCastKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_complex_mul.xhtml">CpuComplexMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml">kernels::CpuComplexMulKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_complex_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_concatenate.xhtml">CpuConcatenate</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute concatenate tensors along a given axis.  <a href="classarm__compute_1_1cpu_1_1_cpu_concatenate.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_context.xhtml">CpuContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU context implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_conv2d.xhtml">CpuConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a convolution layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml">CpuConvertFullyConnectedWeights</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml">kernels::CpuConvertFullyConnectedWeightsKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_copy.xhtml">CpuCopy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml">kernels::CpuCopyKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_copy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d.xhtml">CpuDepthwiseConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to execute a depthwise convolution.  <a href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d_assembly_dispatch.xhtml">CpuDepthwiseConv2dAssemblyDispatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Depthwise convolution assembly kernel glue.  <a href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d_assembly_dispatch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_dequantize.xhtml">CpuDequantize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml">kernels::CpuDequantizeKernel</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1cpu_1_1_cpu_dequantize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_direct_conv2d.xhtml">CpuDirectConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the direct convolution.  <a href="classarm__compute_1_1cpu_1_1_cpu_direct_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for division and power.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml">CpuElementwiseComparison</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml">CpuElementwiseDivision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for division.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml">CpuElementwisePower</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for power.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_unary.xhtml">CpuElementwiseUnary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fill.xhtml">CpuFill</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml">kernels::CpuFillKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_fill.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml">CpuFlatten</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to flatten a given input.  <a href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_floor.xhtml">CpuFloor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml">kernels::CpuFloorKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_floor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a Fully Connected layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml">CpuGemm</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMM.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml">CpuGemmAssemblyDispatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assembly kernel glue.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_convolution.xhtml">CpuGemmConvolution</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_convolution.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_direct_conv2d.xhtml">CpuGemmDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_matrix_multiply_core.xhtml">CpuGemmLowpMatrixMultiplyCore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpMatrixMultiplyCore.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_matrix_multiply_core.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_output_stage.xhtml">CpuGemmLowpOutputStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpQuantizeDown kernels.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_output_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_logits1_d_softmax_kernel.xhtml">CpuLogits1DSoftmaxKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_mul.xhtml">CpuMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml">kernels::CpuMulKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">CpuPermute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml">kernels::CpuPermuteKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_pool2d.xhtml">CpuPool2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a pooling layer with the specified pooling operation.  <a href="classarm__compute_1_1cpu_1_1_cpu_pool2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_quantize.xhtml">CpuQuantize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml">kernels::CpuQuantizeKernel</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1cpu_1_1_cpu_quantize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_queue.xhtml">CpuQueue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU queue implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_queue.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_reshape.xhtml">CpuReshape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml">kernels::CpuReshapeKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_reshape.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_scale.xhtml">CpuScale</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute Scale.  <a href="classarm__compute_1_1cpu_1_1_cpu_scale.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a SoftmaxLayer and a Log SoftmaxLayer.  <a href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_sub.xhtml">CpuSub</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml">kernels::CpuSubKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_sub.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_tensor.xhtml">CpuTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU tensor implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_transpose.xhtml">CpuTranspose</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml">kernels::CpuTransposeKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_transpose.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml">CpuWinogradConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform Winograd.  <a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml">CpuWinogradConv2dTransformInputKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform Winograd input transform.  <a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml">CpuWinogradConv2dTransformOutputKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform Winograd output transform.  <a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml">CpuWinogradConv2dTransformWeightsKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform Winograd weights transform.  <a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_input_kernel.xhtml">ICpuWinogradConv2dTransformInputKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform Winograd input transform.  <a href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_input_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_output_kernel.xhtml">ICpuWinogradConv2dTransformOutputKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform Winograd output transform.  <a href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_output_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_weights_kernel.xhtml">ICpuWinogradConv2dTransformWeightsKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform Winograd weights transform.  <a href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_weights_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a5e357b8c8241b9204a9d5e502565c20d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e357b8c8241b9204a9d5e502565c20d">ICpuKernel</a> = <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></td></tr>
<tr class="separator:a5e357b8c8241b9204a9d5e502565c20d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a186f98d6356749c10297655b3b05f70c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a186f98d6356749c10297655b3b05f70c">ICpuOperator</a> = <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">experimental::INEOperator</a></td></tr>
<tr class="separator:a186f98d6356749c10297655b3b05f70c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6ece39851b42c09fe28c2ab0b27adf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">CpuElementwiseMax</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt;</td></tr>
<tr class="memdesc:adb6ece39851b42c09fe28c2ab0b27adf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for maximum operation.  <a href="#adb6ece39851b42c09fe28c2ab0b27adf">More...</a><br /></td></tr>
<tr class="separator:adb6ece39851b42c09fe28c2ab0b27adf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbd129adc090ebe5de9f015531e4c7cf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">CpuElementwiseMin</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt;</td></tr>
<tr class="memdesc:adbd129adc090ebe5de9f015531e4c7cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for minimum operation.  <a href="#adbd129adc090ebe5de9f015531e4c7cf">More...</a><br /></td></tr>
<tr class="separator:adbd129adc090ebe5de9f015531e4c7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">CpuElementwiseSquaredDiff</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt;</td></tr>
<tr class="memdesc:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for squared difference operation.  <a href="#a8e9db85fa6787c18e9bccc8a45c206f9">More...</a><br /></td></tr>
<tr class="separator:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">NEEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt;</td></tr>
<tr class="memdesc:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run equal comparison.  <a href="#aa0a37b068450a7e7c63b0bf5d65dbf0e">More...</a><br /></td></tr>
<tr class="separator:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa32460d63a4499680df2b5933ea01f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">NENotEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt;</td></tr>
<tr class="memdesc:a3fa32460d63a4499680df2b5933ea01f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run not equal comparison.  <a href="#a3fa32460d63a4499680df2b5933ea01f">More...</a><br /></td></tr>
<tr class="separator:a3fa32460d63a4499680df2b5933ea01f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9428c08ab9b91d102ca6269364eda9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">NEGreater</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt;</td></tr>
<tr class="memdesc:acb9428c08ab9b91d102ca6269364eda9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater comparison.  <a href="#acb9428c08ab9b91d102ca6269364eda9">More...</a><br /></td></tr>
<tr class="separator:acb9428c08ab9b91d102ca6269364eda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a308bbf4b2dd91df7ce97f856f62865a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">NEGreaterEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt;</td></tr>
<tr class="memdesc:a308bbf4b2dd91df7ce97f856f62865a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater-equal comparison.  <a href="#a308bbf4b2dd91df7ce97f856f62865a0">More...</a><br /></td></tr>
<tr class="separator:a308bbf4b2dd91df7ce97f856f62865a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">NELess</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt;</td></tr>
<tr class="memdesc:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less comparison.  <a href="#a242490d7db27c65f3dd63bd2fe55d7f6">More...</a><br /></td></tr>
<tr class="separator:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a21c9cce9003a875ff3163bf7752abe"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">NELessEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt;</td></tr>
<tr class="memdesc:a6a21c9cce9003a875ff3163bf7752abe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less-equal comparison.  <a href="#a6a21c9cce9003a875ff3163bf7752abe">More...</a><br /></td></tr>
<tr class="separator:a6a21c9cce9003a875ff3163bf7752abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac628ee7e5c3f38368a66f11582fe377e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac628ee7e5c3f38368a66f11582fe377e">KernelType</a> = <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">kernels::CpuElementwiseUnaryKernel</a></td></tr>
<tr class="separator:ac628ee7e5c3f38368a66f11582fe377e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2f4c203980958815b7fdf27f08cb3a5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">CpuPRelu</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt;</td></tr>
<tr class="memdesc:af2f4c203980958815b7fdf27f08cb3a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for PRelu operation.  <a href="#af2f4c203980958815b7fdf27f08cb3a5">More...</a><br /></td></tr>
<tr class="separator:af2f4c203980958815b7fdf27f08cb3a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0911d3121ab9a60ac055db72fcd8b82"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af0911d3121ab9a60ac055db72fcd8b82">CpuSoftmax</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a>&lt; false &gt;</td></tr>
<tr class="separator:af0911d3121ab9a60ac055db72fcd8b82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99fc93dc9433985dfd932e0d2300ecdf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a99fc93dc9433985dfd932e0d2300ecdf">CpuLogSoftmax</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a>&lt; true &gt;</td></tr>
<tr class="separator:a99fc93dc9433985dfd932e0d2300ecdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a3c378cf8ee66b2333bdf4868eeba2710"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710">AsmConvMethod</a> { <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">Im2Col</a>, 
<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">Indirect</a>, 
<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">Conv</a>
 }</td></tr>
<tr class="separator:a3c378cf8ee66b2333bdf4868eeba2710"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a95c45cdde5291576398164457a199f56"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a95c45cdde5291576398164457a199f56">qasymm8_neon_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a95c45cdde5291576398164457a199f56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b7df133c8039ed288a49af809ae31a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77b7df133c8039ed288a49af809ae31a">qasymm8_sve_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a77b7df133c8039ed288a49af809ae31a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfae6e353dc0a583bbf0a8d5016b16ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acfae6e353dc0a583bbf0a8d5016b16ab">qasymm8_signed_neon_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acfae6e353dc0a583bbf0a8d5016b16ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5cb7e1932ee8b3b7b5ead9bc94cc5d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af5cb7e1932ee8b3b7b5ead9bc94cc5d0">qasymm8_signed_sve_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af5cb7e1932ee8b3b7b5ead9bc94cc5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a941992df37d7e4d488a8561e03a3c3e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a941992df37d7e4d488a8561e03a3c3e4">qsymm16_neon_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a941992df37d7e4d488a8561e03a3c3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46e55899baa7d08e92da7c155fd4acb0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a46e55899baa7d08e92da7c155fd4acb0">qsymm16_sve_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a46e55899baa7d08e92da7c155fd4acb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac1e9e4b134549fcc216e86bff4e9163"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac1e9e4b134549fcc216e86bff4e9163">fp16_neon_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aac1e9e4b134549fcc216e86bff4e9163"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf625f706113c171a0d7c5ec4ac0f91f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adf625f706113c171a0d7c5ec4ac0f91f">fp16_sve_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adf625f706113c171a0d7c5ec4ac0f91f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf7d9cc42449cade42c87ff9caf215b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adf7d9cc42449cade42c87ff9caf215b1">fp32_neon_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adf7d9cc42449cade42c87ff9caf215b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7d8c1a2fff7218cc668b8dbfc15fffa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7d8c1a2fff7218cc668b8dbfc15fffa">fp32_sve_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af7d8c1a2fff7218cc668b8dbfc15fffa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61432523ea69cfc30a1aece3b93e6207"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a61432523ea69cfc30a1aece3b93e6207">add_qasymm8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a61432523ea69cfc30a1aece3b93e6207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cdb8e82259a848a08aecc1ff53999d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9cdb8e82259a848a08aecc1ff53999d6">add_qasymm8_signed_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9cdb8e82259a848a08aecc1ff53999d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37c71a18fef7a166093eadde4d314a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad37c71a18fef7a166093eadde4d314a3">add_qsymm16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad37c71a18fef7a166093eadde4d314a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21e96f6030e02320e0f48039837f94b"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:aa21e96f6030e02320e0f48039837f94b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa21e96f6030e02320e0f48039837f94b">add_same_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa21e96f6030e02320e0f48039837f94b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">elementwise_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, OutputScalarType(*scalar_func)(const InputScalarType &amp;, const InputScalarType &amp;), int(*broadcast_func)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool), int(*neon_func)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *))</td></tr>
<tr class="separator:a82713bd9209865da67e8624a162ef9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType &gt; </td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplItemLeft" align="right" valign="top">ScalarType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">elementwise_arithm_op_scalar</a> (const ScalarType &amp;a, const ScalarType &amp;b)</td></tr>
<tr class="separator:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;b)</td></tr>
<tr class="separator:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memTemplItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2dd8a3579e2536f06cbda2c602ff6261">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; int32_t, 4 &gt; &gt;</a> (const int32x4_t &amp;a, const int32x4_t &amp;b)</td></tr>
<tr class="separator:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad3c3a3a2edcc9ae7274708f1babf305a">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7232f84a3d1ac94e631f1abf4f1fdca">elementwise_arithm_op&lt; ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">elementwise_arithm_op_broadcast</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const ScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:a6e4a309149d475d17fdfd2d11c26b916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">elementwise_arithm_op_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *input1_ptr, const ScalarType *input2_ptr, ScalarType *output_ptr)</td></tr>
<tr class="separator:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">elementwise_arithm_op_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *non_broadcast_input_ptr, const ScalarType &amp;broadcast_value, ScalarType *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a1d55687f004c1a3302485b2cb8da093b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a29b215a8ed4583d1d4ac5d1e226bf9ef">elementwise_arithm_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType &gt; </td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">elementwise_comp_op_scalar</a> (const InputScalarType &amp;a, const InputScalarType &amp;b)</td></tr>
<tr class="separator:abb34d4000c420ca4fed96903be0fdc64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">elementwise_comp_op</a> (const InputVectorType &amp;a, const InputVectorType &amp;b)</td></tr>
<tr class="separator:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">elementwise_comp_op_broadcast</a> (const InputVectorType &amp;a, const InputScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">elementwise_comp_op_broadcast_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">elementwise_comp_op_broadcast_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a324f99e84c7277809b5a774363197382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">elementwise_comp_op_broadcast_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a15e0926812301b45c7e24e7eea269ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">elementwise_comp_op_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a0df077147bf38575572e36582af9f573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">elementwise_comp_op_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a550901088b6a737a17d7eeb052ba9ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">elementwise_comp_op_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:ae64977c9bd4690e8e3607e6fea754199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">elementwise_comp_op_8</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8cc8f4068cf9120bf433df94926221f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">elementwise_comp_op_16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">elementwise_comp_op_32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3b186f6a61b072a9952403a3ef8548b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a> (const uint8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a> (const int8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a981cf35141a952f493df0398da0b3d99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a> (uint8_t *output_ptr, const uint32x4x4_t &amp;out)</td></tr>
<tr class="separator:a981cf35141a952f493df0398da0b3d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0460ff15e5977217b8fae5cf6abed0b1">store_quantized</a> (uint8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a> (uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac9f2850a80f033f33e04660ac3bbd08"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a> (int8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:aac9f2850a80f033f33e04660ac3bbd08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77016f5946f5a276e68576bb1b68877"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a> (int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:af77016f5946f5a276e68576bb1b68877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">elementwise_arithm_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:a06083700f047b600de212931e66daab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">elementwise_arithm_op_quantized_signed_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a53285ac0836360e8a03088185fd669bc">elementwise_arithm_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:a53285ac0836360e8a03088185fd669bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">elementwise_comp_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:ac216018d489f5f9ea7d1907f593a039e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplItemLeft" align="right" valign="top">uint32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afaa460d8a451197db97d0af703bf8316">elementwise_comp_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:afaa460d8a451197db97d0af703bf8316"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">elementwise_arithm_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a918ccd824090fc763e31459310bdea53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">elementwise_arithm_op_quantized_singed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, int8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">elementwise_arithm_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">elementwise_arithm_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, int8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">elementwise_comp_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c8d923ab1f2263472ff1815a0655701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">elementwise_comp_op_quantized_signed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">elementwise_comp_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">elementwise_comp_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3f4470575b8ef973d136101ea80b68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:aae3f4470575b8ef973d136101ea80b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d498841f133c2ce4c31076a6f700a4f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a8d498841f133c2ce4c31076a6f700a4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1806b9850ee209fa95836d94e33e176f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a1806b9850ee209fa95836d94e33e176f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc">elementwise_arithm_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730">elementwise_arithm_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9953a8057dee990456f905a5099c9730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7">elementwise_comp_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e">elementwise_comp_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aada344073480d0eb85f751181cef6d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memTemplItemLeft" align="right" valign="top">ScalarType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">elementwise_op_scalar_imp</a> (<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const ScalarType &amp;a)</td></tr>
<tr class="separator:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memTemplItemLeft" align="right" valign="top">VectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9f495c76ff4bbde6bc84c4dda788e1f6">elementwise_op_imp</a> (<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const VectorType &amp;a)</td></tr>
<tr class="separator:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a09d2d3f428d66266a790a9fa05be7cc1">elementwise_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a675a82f6a2cbbcecd80e3561257611fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a675a82f6a2cbbcecd80e3561257611fd">fp16_neon_floor</a> (const void *src, void *dst, int len)</td></tr>
<tr class="separator:a675a82f6a2cbbcecd80e3561257611fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740ffe76254ad6ca7f8f68e1e268ae7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a740ffe76254ad6ca7f8f68e1e268ae7e">fp32_neon_floor</a> (const void *src, void *dst, int len)</td></tr>
<tr class="separator:a740ffe76254ad6ca7f8f68e1e268ae7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf656cc44c210ddef37bf59c2851a713"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acf656cc44c210ddef37bf59c2851a713">poolingMxN_fp32_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acf656cc44c210ddef37bf59c2851a713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8377fe826bf521b54420609f64305833"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8377fe826bf521b54420609f64305833">poolingMxN_qasymm8_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8377fe826bf521b54420609f64305833"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84b7dbf3cd11ed10bd6d276833450744"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a84b7dbf3cd11ed10bd6d276833450744">poolingMxN_qasymm8_signed_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a84b7dbf3cd11ed10bd6d276833450744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8966e308573541aa625e4a7f955d424"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8966e308573541aa625e4a7f955d424">poolingMxN_fp16_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8966e308573541aa625e4a7f955d424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80763dd41a2676071d6c4bb52801bc41"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a80763dd41a2676071d6c4bb52801bc41"><td class="memTemplItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80763dd41a2676071d6c4bb52801bc41">offset_no_padding</a> (uint32_t padded_offset, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;id, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, int <a class="el" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a>, int pool_stride_y, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout)</td></tr>
<tr class="separator:a80763dd41a2676071d6c4bb52801bc41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00984b854f02b4e2430ef1945b87587c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a00984b854f02b4e2430ef1945b87587c"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; std::is_same&lt; T, int8_t &gt;::value, int8_t &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a00984b854f02b4e2430ef1945b87587c">quantize</a> (float val, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;info)</td></tr>
<tr class="separator:a00984b854f02b4e2430ef1945b87587c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7e15a349e3cf9291c7c41ce9cf442db"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af7e15a349e3cf9291c7c41ce9cf442db"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; std::is_same&lt; T, uint8_t &gt;::value, uint8_t &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7e15a349e3cf9291c7c41ce9cf442db">quantize</a> (float val, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;info)</td></tr>
<tr class="separator:af7e15a349e3cf9291c7c41ce9cf442db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74b03fff4207990f991dabb49bf922bf"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a74b03fff4207990f991dabb49bf922bf"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a74b03fff4207990f991dabb49bf922bf">vcvtq_q32_f32</a> (float32x4_t values)</td></tr>
<tr class="separator:a74b03fff4207990f991dabb49bf922bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af149abce9fb73b4e642934e2a9342a66"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af149abce9fb73b4e642934e2a9342a66"><td class="memTemplItemLeft" align="right" valign="top">uint32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af149abce9fb73b4e642934e2a9342a66">vcvtq_q32_f32</a> (float32x4_t values)</td></tr>
<tr class="separator:af149abce9fb73b4e642934e2a9342a66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e17bacc5eaed2caf54f3903e614852c"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a7e17bacc5eaed2caf54f3903e614852c"><td class="memTemplItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7e17bacc5eaed2caf54f3903e614852c">vcvtq_q32_f32</a> (float32x4_t values)</td></tr>
<tr class="separator:a7e17bacc5eaed2caf54f3903e614852c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae73b6f90bda75f35f8ea1f6ca8520551"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae73b6f90bda75f35f8ea1f6ca8520551"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae73b6f90bda75f35f8ea1f6ca8520551">vcvtq_f32_q32</a> (T values)</td></tr>
<tr class="separator:ae73b6f90bda75f35f8ea1f6ca8520551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0742c64894b8b3b17525fb7d6cd33bb1"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a0742c64894b8b3b17525fb7d6cd33bb1"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0742c64894b8b3b17525fb7d6cd33bb1">vcvtq_f32_q32</a> (uint32x4_t values)</td></tr>
<tr class="separator:a0742c64894b8b3b17525fb7d6cd33bb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6902110788dc823846d923f666950736"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a6902110788dc823846d923f666950736"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a> (int32x4_t values)</td></tr>
<tr class="separator:a6902110788dc823846d923f666950736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7531bec491de11f9d361e9504e485853"><td class="memTemplParams" colspan="2">template&lt;typename Tout &gt; </td></tr>
<tr class="memitem:a7531bec491de11f9d361e9504e485853"><td class="memTemplItemLeft" align="right" valign="top">Tout&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7531bec491de11f9d361e9504e485853">vrequantize_pooling_with_scale</a> (const float32x4x4_t &amp;acc, const float quant_rescale, const float scale_pooling, const int32_t new_offset)</td></tr>
<tr class="separator:a7531bec491de11f9d361e9504e485853"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3394b07fc0ede0148b28866c1b80ade8"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a3394b07fc0ede0148b28866c1b80ade8"><td class="memTemplItemLeft" align="right" valign="top">uint8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3394b07fc0ede0148b28866c1b80ade8">vrequantize_pooling_with_scale</a> (const float32x4x4_t &amp;acc, const float quant_rescale, const float scale_pooling, const int32_t new_offset)</td></tr>
<tr class="separator:a3394b07fc0ede0148b28866c1b80ade8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade4357d389daf9a5b940ed834cae78ad"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ade4357d389daf9a5b940ed834cae78ad"><td class="memTemplItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade4357d389daf9a5b940ed834cae78ad">vrequantize_pooling_with_scale</a> (const float32x4x4_t &amp;acc, const float quant_rescale, const float scale_pooling, const int32_t new_offset)</td></tr>
<tr class="separator:ade4357d389daf9a5b940ed834cae78ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acab4c6ee4cc99b007557d8fa26fdab2b"><td class="memTemplParams" colspan="2">template&lt;typename Tin , typename Tout &gt; </td></tr>
<tr class="memitem:acab4c6ee4cc99b007557d8fa26fdab2b"><td class="memTemplItemLeft" align="right" valign="top">Tout&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acab4c6ee4cc99b007557d8fa26fdab2b">vrequantize_pooling</a> (Tin vec1, Tin vec2, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:acab4c6ee4cc99b007557d8fa26fdab2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd79be17a73378e502a73b4e3849bbce"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:acd79be17a73378e502a73b4e3849bbce"><td class="memTemplItemLeft" align="right" valign="top">uint8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acd79be17a73378e502a73b4e3849bbce">vrequantize_pooling</a> (uint8x8_t vec1, uint8x8_t vec2, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:acd79be17a73378e502a73b4e3849bbce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2677ee316925288812d62d13e941457"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae2677ee316925288812d62d13e941457"><td class="memTemplItemLeft" align="right" valign="top">int8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae2677ee316925288812d62d13e941457">vrequantize_pooling</a> (int8x8_t vec1, int8x8_t vec2, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:ae2677ee316925288812d62d13e941457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ee331fa53dc98687628d3695792df0d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2ee331fa53dc98687628d3695792df0d"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2ee331fa53dc98687628d3695792df0d">vrequantize_pooling</a> (T &amp;vec, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:a2ee331fa53dc98687628d3695792df0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f259068e99852ed65826e411d9e5b0f"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a8f259068e99852ed65826e411d9e5b0f"><td class="memTemplItemLeft" align="right" valign="top">uint8x8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8f259068e99852ed65826e411d9e5b0f">vrequantize_pooling</a> (uint8x8_t &amp;vec, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:a8f259068e99852ed65826e411d9e5b0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2867ec14eb4b02e606c92af1d94e11e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ad2867ec14eb4b02e606c92af1d94e11e"><td class="memTemplItemLeft" align="right" valign="top">int8x8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad2867ec14eb4b02e606c92af1d94e11e">vrequantize_pooling</a> (int8x8_t &amp;vec, const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;requant_qinfo)</td></tr>
<tr class="separator:ad2867ec14eb4b02e606c92af1d94e11e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66e088b7ebbf193cb134b76fa22717bb"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a66e088b7ebbf193cb134b76fa22717bb">calculate_avg_scale</a> (bool exclude_padding, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;id, const int pool_size_x, const int pool_size_y, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)</td></tr>
<tr class="separator:a66e088b7ebbf193cb134b76fa22717bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fb9537b47012988a3865769e0e0d009"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7fb9537b47012988a3865769e0e0d009"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7fb9537b47012988a3865769e0e0d009">poolingMxN_q8_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7fb9537b47012988a3865769e0e0d009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55d3bb9ab04b4aec0b3f32abf5a4e672"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a55d3bb9ab04b4aec0b3f32abf5a4e672">u8_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a55d3bb9ab04b4aec0b3f32abf5a4e672"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c3701a2b4b4aab6e84bdf870666451b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c3701a2b4b4aab6e84bdf870666451b">s16_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3c3701a2b4b4aab6e84bdf870666451b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a594fa7dfda56b0775950658f6937af9c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a594fa7dfda56b0775950658f6937af9c">qasymm8_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a594fa7dfda56b0775950658f6937af9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afa676c133f2bd00b896680e5176cd4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">qasymm8_signed_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5afa676c133f2bd00b896680e5176cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9b26a65178cfe477d292f394c0638b3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af9b26a65178cfe477d292f394c0638b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af9b26a65178cfe477d292f394c0638b3">nearest_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af9b26a65178cfe477d292f394c0638b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c90203a243568f6429307584a1475a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a19c90203a243568f6429307584a1475a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a19c90203a243568f6429307584a1475a">bilinear_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a19c90203a243568f6429307584a1475a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc4661d8856bc18b82ecece8694634c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2bc4661d8856bc18b82ecece8694634c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2bc4661d8856bc18b82ecece8694634c">common_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2bc4661d8856bc18b82ecece8694634c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433a50d9bda93287b0e904adb3209b1a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a433a50d9bda93287b0e904adb3209b1a">fp16_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a433a50d9bda93287b0e904adb3209b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80d31122cc47b5ed18e53c884843a77c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80d31122cc47b5ed18e53c884843a77c">fp32_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a80d31122cc47b5ed18e53c884843a77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a879e0c97797db99ad23964097232f62a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a879e0c97797db99ad23964097232f62a">s16_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a879e0c97797db99ad23964097232f62a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501c9f7380e820f32191939e99c98334"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a501c9f7380e820f32191939e99c98334">u8_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a501c9f7380e820f32191939e99c98334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0561f47ad19e4129d2fe9a9ad9add75f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0561f47ad19e4129d2fe9a9ad9add75f">qasymm8_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0561f47ad19e4129d2fe9a9ad9add75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a068eb822f12700b2c9c7eb235695fc72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a068eb822f12700b2c9c7eb235695fc72">qasymm8_signed_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a068eb822f12700b2c9c7eb235695fc72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d1451ea5389701b4e5f9907bf7c50db"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8d1451ea5389701b4e5f9907bf7c50db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8d1451ea5389701b4e5f9907bf7c50db">neon_logits_1d_max</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8d1451ea5389701b4e5f9907bf7c50db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e81061860c7f6fd71c9d59e4b547429"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4e81061860c7f6fd71c9d59e4b547429"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4e81061860c7f6fd71c9d59e4b547429">neon_softmax_logits_1d_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *max, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, bool is_log, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4e81061860c7f6fd71c9d59e4b547429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad58bf2776ed899b04002f19ad2f307f0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad58bf2776ed899b04002f19ad2f307f0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad58bf2776ed899b04002f19ad2f307f0">neon_softmax_logits_1d_float</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *max, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, bool is_log, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad58bf2776ed899b04002f19ad2f307f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee71620d39960df76ed85d99151f255"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acee71620d39960df76ed85d99151f255">sub_qasymm8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acee71620d39960df76ed85d99151f255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8acc2922a77f7c97eb724c61d30440fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8acc2922a77f7c97eb724c61d30440fc">sub_qasymm8_signed_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8acc2922a77f7c97eb724c61d30440fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe75050a14b59a82245e5ed873bdf1ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afe75050a14b59a82245e5ed873bdf1ab">sub_qsymm16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afe75050a14b59a82245e5ed873bdf1ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a42caf294cb15e85fa40a9bcc63c8b513">sub_same_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa64c9a243c1b8d4a5bb9cfa0c69d9c64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa64c9a243c1b8d4a5bb9cfa0c69d9c64">fp16_neon_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa64c9a243c1b8d4a5bb9cfa0c69d9c64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b5a907c9f3c15c309f9c538a4bd08c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2b5a907c9f3c15c309f9c538a4bd08c4">fp16_sve_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2b5a907c9f3c15c309f9c538a4bd08c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97667081943a6baea73dd6c7957a34fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a97667081943a6baea73dd6c7957a34fa">fp32_neon_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a97667081943a6baea73dd6c7957a34fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fc7ff87cd5070e32f7bd2a4bef72f0f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1fc7ff87cd5070e32f7bd2a4bef72f0f">fp32_sve_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1fc7ff87cd5070e32f7bd2a4bef72f0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a05c10bc9018179245c50d45b330a1c6a"><td class="memItemLeft" align="right" valign="top">constexpr int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> = 4</td></tr>
<tr class="separator:a05c10bc9018179245c50d45b330a1c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="adb6ece39851b42c09fe28c2ab0b27adf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb6ece39851b42c09fe28c2ab0b27adf">&#9670;&nbsp;</a></span>CpuElementwiseMax</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">CpuElementwiseMax</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for maximum operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="adbd129adc090ebe5de9f015531e4c7cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbd129adc090ebe5de9f015531e4c7cf">&#9670;&nbsp;</a></span>CpuElementwiseMin</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">CpuElementwiseMin</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for minimum operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00067">67</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a8e9db85fa6787c18e9bccc8a45c206f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e9db85fa6787c18e9bccc8a45c206f9">&#9670;&nbsp;</a></span>CpuElementwiseSquaredDiff</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">CpuElementwiseSquaredDiff</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for squared difference operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00069">69</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a99fc93dc9433985dfd932e0d2300ecdf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99fc93dc9433985dfd932e0d2300ecdf">&#9670;&nbsp;</a></span>CpuLogSoftmax</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a99fc93dc9433985dfd932e0d2300ecdf">CpuLogSoftmax</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a>&lt;true&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_softmax_8h_source.xhtml#l00107">107</a> of file <a class="el" href="_cpu_softmax_8h_source.xhtml">CpuSoftmax.h</a>.</p>

</div>
</div>
<a id="af2f4c203980958815b7fdf27f08cb3a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2f4c203980958815b7fdf27f08cb3a5">&#9670;&nbsp;</a></span>CpuPRelu</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">CpuPRelu</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for PRelu operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_p_relu_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_cpu_p_relu_8h_source.xhtml">CpuPRelu.h</a>.</p>

</div>
</div>
<a id="af0911d3121ab9a60ac055db72fcd8b82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0911d3121ab9a60ac055db72fcd8b82">&#9670;&nbsp;</a></span>CpuSoftmax</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af0911d3121ab9a60ac055db72fcd8b82">CpuSoftmax</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a>&lt;false&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_softmax_8h_source.xhtml#l00106">106</a> of file <a class="el" href="_cpu_softmax_8h_source.xhtml">CpuSoftmax.h</a>.</p>

</div>
</div>
<a id="a5e357b8c8241b9204a9d5e502565c20d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e357b8c8241b9204a9d5e502565c20d">&#9670;&nbsp;</a></span>ICpuKernel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e357b8c8241b9204a9d5e502565c20d">ICpuKernel</a> =  <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_cpu_kernel_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_i_cpu_kernel_8h_source.xhtml">ICpuKernel.h</a>.</p>

</div>
</div>
<a id="a186f98d6356749c10297655b3b05f70c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a186f98d6356749c10297655b3b05f70c">&#9670;&nbsp;</a></span>ICpuOperator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a186f98d6356749c10297655b3b05f70c">ICpuOperator</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">experimental::INEOperator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_cpu_operator_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_i_cpu_operator_8h_source.xhtml">ICpuOperator.h</a>.</p>

</div>
</div>
<a id="ac628ee7e5c3f38368a66f11582fe377e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac628ee7e5c3f38368a66f11582fe377e">&#9670;&nbsp;</a></span>KernelType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac628ee7e5c3f38368a66f11582fe377e">KernelType</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">kernels::CpuElementwiseUnaryKernel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_unary_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_cpu_elementwise_unary_8cpp_source.xhtml">CpuElementwiseUnary.cpp</a>.</p>

</div>
</div>
<a id="aa0a37b068450a7e7c63b0bf5d65dbf0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0a37b068450a7e7c63b0bf5d65dbf0e">&#9670;&nbsp;</a></span>NEEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">NEEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00171">171</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="acb9428c08ab9b91d102ca6269364eda9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb9428c08ab9b91d102ca6269364eda9">&#9670;&nbsp;</a></span>NEGreater</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">NEGreater</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00175">175</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a308bbf4b2dd91df7ce97f856f62865a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a308bbf4b2dd91df7ce97f856f62865a0">&#9670;&nbsp;</a></span>NEGreaterEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">NEGreaterEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00177">177</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a242490d7db27c65f3dd63bd2fe55d7f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a242490d7db27c65f3dd63bd2fe55d7f6">&#9670;&nbsp;</a></span>NELess</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">NELess</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00179">179</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a6a21c9cce9003a875ff3163bf7752abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a21c9cce9003a875ff3163bf7752abe">&#9670;&nbsp;</a></span>NELessEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">NELessEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00181">181</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a3fa32460d63a4499680df2b5933ea01f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fa32460d63a4499680df2b5933ea01f">&#9670;&nbsp;</a></span>NENotEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">NENotEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run not equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00173">173</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a3c378cf8ee66b2333bdf4868eeba2710"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c378cf8ee66b2333bdf4868eeba2710">&#9670;&nbsp;</a></span>AsmConvMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710">AsmConvMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34"></a>Im2Col&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c"></a>Indirect&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef"></a>Conv&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_cpu_gemm_assembly_dispatch_8h_source.xhtml">CpuGemmAssemblyDispatch.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">Im2Col</a>,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">Indirect</a>,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">Conv</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">arm_compute::cpu::AsmConvMethod::Im2Col</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">arm_compute::cpu::AsmConvMethod::Indirect</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">arm_compute::cpu::AsmConvMethod::Conv</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a61432523ea69cfc30a1aece3b93e6207"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61432523ea69cfc30a1aece3b93e6207">&#9670;&nbsp;</a></span>add_qasymm8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2neon_2qasymm8_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="add_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(oq_info.offset);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = is_broadcast_input_2 ? vdupq_n_f32(iq1_info.scale) : vdupq_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = is_broadcast_input_2 ? vdupq_n_f32(iq2_info.scale) : vdupq_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = is_broadcast_input_2 ? vdupq_n_s32(iq1_info.offset) : vdupq_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = is_broadcast_input_2 ? vdupq_n_s32(iq2_info.offset) : vdupq_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> uint8_t    broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> uint8x16_t broadcast_value_vec = vdupq_n_u8(broadcast_value);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(broadcast_value_vec))))), voffset2)), vscale2);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(broadcast_value_vec))))), voffset2)), vscale2);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(broadcast_value_vec))))), voffset2)), vscale2);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(broadcast_value_vec))))), voffset2)), vscale2);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value - broadcast_qinfo.offset) * broadcast_qinfo.scale;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keyword">const</span> uint8x16_t a    = vld1q_u8(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       af_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       af_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       af_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       af_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                int32x4_t rf_2{};</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                int32x4_t rf_3{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                rf_0 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                rf_1 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                rf_2 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                rf_3 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                rf_0 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                rf_1 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                rf_2 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                rf_3 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x) - non_broadcast_qinfo.offset) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                *(output_ptr + x) = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>((afs + bfs), oq_info);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        },</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(iq1_info.offset);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(iq2_info.offset);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> uint8x16_t a = vld1q_u8(input1_ptr + x);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> uint8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_u8(input2_ptr + x);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(a))))), voffset1)), vscale1);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(b))))), voffset2)), vscale2);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(b))))), voffset2)), vscale2);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(b))))), voffset2)), vscale2);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(b))))), voffset2)), vscale2);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                int32x4_t rf_2{};</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                int32x4_t rf_3{};</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                rf_0 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                rf_1 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                rf_2 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                rf_3 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                rf_0 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                rf_1 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                rf_2 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                rf_3 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x)) - iq1_info.offset) * iq1_info.scale;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> bfs   = static_cast&lt;int32_t&gt;((*(input2_ptr + x)) - iq2_info.offset) * iq2_info.scale;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                *(output_ptr + x) = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>((afs + bfs), oq_info);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        },</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9cdb8e82259a848a08aecc1ff53999d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cdb8e82259a848a08aecc1ff53999d6">&#9670;&nbsp;</a></span>add_qasymm8_signed_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_signed_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="add_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00317">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(oq_info.offset);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = is_broadcast_input_2 ? vdupq_n_f32(iq1_info.scale) : vdupq_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = is_broadcast_input_2 ? vdupq_n_f32(iq2_info.scale) : vdupq_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = is_broadcast_input_2 ? vdupq_n_s32(iq1_info.offset) : vdupq_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = is_broadcast_input_2 ? vdupq_n_s32(iq2_info.offset) : vdupq_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> int8_t    broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> int8x16_t broadcast_value_vec = vdupq_n_s8(broadcast_value);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(broadcast_value_vec)))), voffset2)), vscale2);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(broadcast_value_vec)))), voffset2)), vscale2);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(broadcast_value_vec)))), voffset2)), vscale2);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(broadcast_value_vec)))), voffset2)), vscale2);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>  = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value - broadcast_qinfo.offset) * broadcast_qinfo.scale;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keyword">const</span> int8x16_t a = vld1q_s8(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                int32x4_t rf_2{};</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                int32x4_t rf_3{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                rf_0 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                rf_1 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                rf_2 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                rf_3 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                rf_0 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                rf_1 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                rf_2 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                rf_3 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x) - non_broadcast_qinfo.offset) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>((afs + bfs), oq_info);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        },</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(iq1_info.offset);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(iq2_info.offset);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> int8x16_t a = vld1q_s8(input1_ptr + x);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> int8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s8(input2_ptr + x);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(a)))), voffset1)), vscale1);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(b)))), voffset2)), vscale2);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(b)))), voffset2)), vscale2);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(b)))), voffset2)), vscale2);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(b)))), voffset2)), vscale2);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                int32x4_t rf_2{};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                int32x4_t rf_3{};</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                rf_0 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                rf_1 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                rf_2 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                rf_3 = vcvtnq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                rf_0 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                rf_1 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                rf_2 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_2, bf_2), invvscaleo));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                rf_3 = vcvtq_s32_f32(vmlaq_f32(voffseto, vaddq_f32(af_3, bf_3), invvscaleo));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x)) - iq1_info.offset) * iq1_info.scale;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> bfs   = static_cast&lt;int32_t&gt;((*(input2_ptr + x)) - iq2_info.offset) * iq2_info.scale;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>((afs + bfs), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        },</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad37c71a18fef7a166093eadde4d314a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad37c71a18fef7a166093eadde4d314a3">&#9670;&nbsp;</a></span>add_qsymm16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qsymm16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2neon_2qsymm16_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="add_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00447">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 8;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t vscale1    = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t vscale2    = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> int16_t   broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> int16x8_t broadcast_value_vec = vdupq_n_s16(broadcast_value);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(broadcast_value_vec))), vscale2);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  bf_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(broadcast_value_vec))), vscale2);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>  = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value) * broadcast_qinfo.scale;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keyword">const</span> int16x8_t a    = vld1q_s16(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>      af_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>      af_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                rf_0 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                rf_1 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                rf_0 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                rf_1 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                vst1q_s16(output_ptr + x, pa);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x)) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs + bfs), oq_info);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        },</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> int16x8_t a = vld1q_s16(input1_ptr + x);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keyword">const</span> int16x8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s16(input2_ptr + x);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(b))), vscale2);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(b))), vscale2);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                int32x4_t rf_0{};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                int32x4_t rf_1{};</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                rf_0 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                rf_1 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                rf_0 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                rf_1 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                vst1q_s16(output_ptr + x, pa);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x))) * iq1_info.scale;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> bfs   = static_cast&lt;int32_t&gt;((*(input2_ptr + x))) * iq2_info.scale;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs + bfs), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        },</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00447">QuantizationInfo.h:447</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa21e96f6030e02320e0f48039837f94b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21e96f6030e02320e0f48039837f94b">&#9670;&nbsp;</a></span>add_same_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_same_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type. </p>

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2add_2neon_2list_8h_source.xhtml#l00045">45</a> of file <a class="el" href="cpu_2kernels_2add_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="scalar_2add_8h_source.xhtml#l00033">arm_compute::wrapper::add_sat()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00073">arm_compute::wrapper::vqadd()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;ScalarType, wrapper::traits::BitWidth::W128&gt;;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Window win = window;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16 / <span class="keyword">sizeof</span>(ScalarType);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> ScalarType broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>       broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> res             = (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">wrapper::vqadd</a>(broadcast_value_vec, non_broadcast_v) : <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(broadcast_value_vec, non_broadcast_v);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                *(output_ptr + x)          = (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">wrapper::add_sat</a>(broadcast_value, non_broadcast_v) : broadcast_value + non_broadcast_v;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        },</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> res  = (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">wrapper::vqadd</a>(val1, val2) : <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(val1, val2);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val1   = *(input1_ptr + x);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val2   = *(input2_ptr + x);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                *(output_ptr + x) = (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">wrapper::add_sat</a>(val1, val2) : val1 + val2;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        },</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ac4358b7409261f013124bd6068aeee79"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">arm_compute::wrapper::add_sat</a></div><div class="ttdeci">uint8_t add_sat(const uint8_t &amp;a, const uint8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="scalar_2add_8h_source.xhtml#l00033">add.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4b3ec2db417aa33bc7d68ad6e1ff7952"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">arm_compute::wrapper::vqadd</a></div><div class="ttdeci">uint8x8_t vqadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00073">add.h:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a19c90203a243568f6429307584a1475a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19c90203a243568f6429307584a1475a">&#9670;&nbsp;</a></span>bilinear_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::bilinear_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00094">94</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00374">BorderSize::bottom</a>, <a class="el" href="_scale_utils_8cpp_source.xhtml#l00027">arm_compute::scale_utils::calculate_resize_ratio()</a>, <a class="el" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::CONSTANT</a>, <a class="el" href="_scale_helpers_8h_source.xhtml#l00186">arm_compute::scale_helpers::delta_bilinear()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00244">PixelValue::get()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00375">BorderSize::left</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">offset()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo::padding()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::REPLICATE</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00373">BorderSize::right</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00372">BorderSize::top</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00227">type</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Compute the ratio between source height and destination height</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> hr = <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    Iterator  out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_c  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().left + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().right;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_w     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_h     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_wc = in_stride_c * (in_dim_w + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().top + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().bottom);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Don&#39;t increment in Y and Z direction for the input tensor</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    win_in.set(Window::DimY, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    win_in.set(Window::DimZ, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span>(border_mode == BorderMode::CONSTANT)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">using</span> ConstType = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, float16_t&gt;::value, <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>, T&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">using</span> ConstType = T;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keyword">const</span> T const_border_value = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(constant_border_value.get&lt;ConstType&gt;());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dx_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dy_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">const</span> int32_t in_hi  = std::floor((<span class="keywordtype">id</span>.z() + sampling_offset) * hr - sampling_offset);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keyword">const</span> T      *in_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr()) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> * in_stride_c + in_hi * in_stride_wc;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a00 = (0 &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; in_dim_w &amp;&amp; 0 &lt;= in_hi &amp;&amp; in_hi &lt; in_dim_h) ? *in_ptr : const_border_value;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a01 = (-1 &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; in_dim_w - 1 &amp;&amp; 0 &lt;= in_hi &amp;&amp; in_hi &lt; in_dim_h) ? *(in_ptr + in_stride_c) : const_border_value;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a10 = (0 &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; in_dim_w &amp;&amp; -1 &lt;= in_hi &amp;&amp; in_hi &lt; in_dim_h - 1) ? *(in_ptr + in_stride_wc) : const_border_value;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a11 = (-1 &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &amp;&amp; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; in_dim_w - 1 &amp;&amp; -1 &lt;= in_hi &amp;&amp; in_hi &lt; in_dim_h - 1) ? *(in_ptr + in_stride_c + in_stride_wc) : const_border_value;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) = static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(a00, a01, a10, a11, dx_val, dy_val));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        },</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        in, out);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(border_mode == BorderMode::REPLICATE)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dx_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dy_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z())));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>  in_hi  = std::floor((<span class="keywordtype">id</span>.z() + sampling_offset) * hr - sampling_offset);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keyword">auto</span> clamped_w  = utility::clamp&lt;int&gt;(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, 0, in_dim_w - 1);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keyword">auto</span> clamped_w1 = utility::clamp&lt;int&gt;(offset + 1, 0, in_dim_w - 1);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keyword">auto</span> clamped_h  = utility::clamp&lt;int&gt;(in_hi, 0, in_dim_h - 1);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keyword">auto</span> clamped_h1 = utility::clamp&lt;int&gt;(in_hi + 1, 0, in_dim_h - 1);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a00 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr()) + clamped_w * in_stride_c + clamped_h * in_stride_wc);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a01 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr()) + clamped_w1 * in_stride_c + clamped_h * in_stride_wc);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a10 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr()) + clamped_w * in_stride_c + clamped_h1 * in_stride_wc);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a11 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr()) + clamped_w1 * in_stride_c + clamped_h1 * in_stride_wc);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) = static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(a00, a01, a10, a11, dx_val, dy_val));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        },</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        in, out);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00227">gemm_interleaved.hpp:227</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners. </div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00027">ScaleUtils.cpp:27</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1scale__helpers_xhtml_aeb969d3b0e5ceb8597c39b708f0df6e8"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">arm_compute::scale_helpers::delta_bilinear</a></div><div class="ttdeci">float delta_bilinear(float a00, float a01, float a10, float a11, float dx_val, float dy_val)</div><div class="ttdoc">Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and t...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00186">ScaleHelpers.h:186</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a66e088b7ebbf193cb134b76fa22717bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66e088b7ebbf193cb134b76fa22717bb">&#9670;&nbsp;</a></span>calculate_avg_scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::cpu::calculate_avg_scale </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>exclude_padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>pool_size_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>pool_size_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>upper_bound_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>upper_bound_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>pad_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>pad_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>stride_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00162">162</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_helpers_8inl_source.xhtml#l00193">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">arm_compute::test::validation::idx_width</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">poolingMxN_fp32_neon_nhwc()</a>, and <a class="el" href="quantized_8h_source.xhtml#l00182">poolingMxN_q8_neon_nhwc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">data_layout</a>, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = <a class="code" href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">data_layout</a>, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">int</span> start_x = <span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>] * stride_x - pad_x;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">int</span> start_y = <span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>] * stride_y - pad_y;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_x = std::min(start_x + pool_size_x, upper_bound_w);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_y = std::min(start_y + pool_size_y, upper_bound_h);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>(exclude_padding)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        start_x = std::max(0, start_x);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        start_y = std::max(0, start_y);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> 1.f / ((end_y - start_y) * (end_x - start_x));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">Scale.cpp:264</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a786677cbfb3f5677b4d84f3056eb08db"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00151">Im2Col.cpp:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a46e938020a3ac8c926d0590b7fe957db"><div class="ttname"><a href="namespacearm__compute.xhtml#a46e938020a3ac8c926d0590b7fe957db">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00193">Helpers.inl:193</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2bc4661d8856bc18b82ecece8694634c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bc4661d8856bc18b82ecece8694634c">&#9670;&nbsp;</a></span>common_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::common_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00169">169</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>(policy == InterpolationPolicy::BILINEAR)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        bilinear_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        nearest_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a53285ac0836360e8a03088185fd669bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53285ac0836360e8a03088185fd669bc">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00125">125</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">using</span> neon_vector_float = wrapper::traits::neon_vector&lt;float, 4&gt;;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    float32x4x4_t out =</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[0], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[0]),</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[1]),</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[2], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[2]),</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[3], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[3]),</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    };</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abbfe5d27e11d8842fdb4cef411832f8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbfe5d27e11d8842fdb4cef411832f8e">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00160">160</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">arm_compute::MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::PRELU</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::SQUARED_DIFF</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00227">type</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, and <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">using</span> vec_type    = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> VectorType::tag_type;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    vec_type res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;scalar_type&gt;(0), tag_type{});</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">const</span> vec_type tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            res                = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(tmp, tmp);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keyword">const</span> vec_type zero = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;scalar_type&gt;(0), tag_type{});</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keyword">const</span> vec_type tmp  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>     gt   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, zero);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(gt, a, tmp);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div><div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_a01b6a20d51e2db6f1704f2315ead62d3"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">PRELU</a></div><div class="ttdeci">#define PRELU(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00031">elementwise_operation_quantized.cl:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_a74e75242132eaabbc1c512488a135926"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a></div><div class="ttdeci">#define MIN(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00029">elementwise_operation_quantized.cl:29</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00227">gemm_interleaved.hpp:227</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_ab05bd244cb8823c69d6dce6a23a758fd"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">SQUARED_DIFF</a></div><div class="ttdeci">#define SQUARED_DIFF(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00030">elementwise_operation_quantized.cl:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a29b215a8ed4583d1d4ac5d1e226bf9ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29b215a8ed4583d1d4ac5d1e226bf9ef">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00269">269</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    elementwise_op&lt;scalar_type, scalar_type, VectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                         &amp;elementwise_arithm_op_scalar&lt;op, scalar_type&gt;,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                         &amp;elementwise_arithm_op_broadcast_loop&lt;op, scalar_type, VectorType&gt;,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                         &amp;elementwise_arithm_op_loop&lt;op, scalar_type, VectorType&gt;);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad3c3a3a2edcc9ae7274708f1babf305a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3c3a3a2edcc9ae7274708f1babf305a">&#9670;&nbsp;</a></span>elementwise_arithm_op< ArithmeticOperation::DIV, typename wrapper::traits::neon_vector< float, 4 > >()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; float, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00206">206</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, and <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>.</p>
<div class="fragment"><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2dd8a3579e2536f06cbda2c602ff6261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dd8a3579e2536f06cbda2c602ff6261">&#9670;&nbsp;</a></span>elementwise_arithm_op< ArithmeticOperation::DIV, typename wrapper::traits::neon_vector< int32_t, 4 > >()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; int32_t, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00200">200</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>, and <a class="el" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> vcvtq_s32_f32(<a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vcvtq_f32_s32(a), vcvtq_f32_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7232f84a3d1ac94e631f1abf4f1fdca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7232f84a3d1ac94e631f1abf4f1fdca">&#9670;&nbsp;</a></span>elementwise_arithm_op< ArithmeticOperation::POWER, typename wrapper::traits::neon_vector< float, 4 > >()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; float, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00212">212</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>, and <a class="el" href="pow_8h_source.xhtml#l00040">arm_compute::wrapper::vpow()</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">wrapper::vpow</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a566497df1ac44164eb8643f5d469afae"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">arm_compute::wrapper::vpow</a></div><div class="ttdeci">float32x4_t vpow(const float32x4_t &amp;a, const float32x4_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pow_8h_source.xhtml#l00040">pow.h:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6e4a309149d475d17fdfd2d11c26b916"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e4a309149d475d17fdfd2d11c26b916">&#9670;&nbsp;</a></span>elementwise_arithm_op_broadcast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> arm_compute::cpu::elementwise_arithm_op_broadcast </td>
          <td>(</td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00232">232</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00227">type</a>, and <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">using</span> tag_type = <span class="keyword">typename</span> VectorType::tag_type;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">using</span> vec_type = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    vec_type broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, tag_type{});</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, VectorType&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : a, <a class="code" href="namespacereorder.xhtml">reorder</a> ? a : broadcast_vector);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div><div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00227">gemm_interleaved.hpp:227</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d55687f004c1a3302485b2cb8da093b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d55687f004c1a3302485b2cb8da093b">&#9670;&nbsp;</a></span>elementwise_arithm_op_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ScalarType *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00256">256</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_arithm_op_broadcast&lt;op, ScalarType, VectorType&gt;(a, broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ecfb489f7d67ef4d8c1ba77e1060702"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ecfb489f7d67ef4d8c1ba77e1060702">&#9670;&nbsp;</a></span>elementwise_arithm_op_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ScalarType *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00242">242</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_arithm_op&lt;op, VectorType&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9627c97b4adec6501e3b1f23ec750fbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9627c97b4adec6501e3b1f23ec750fbc">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00622">622</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00299">elementwise_op_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                             &amp;elementwise_arithm_op_quantized_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                             &amp;elementwise_arithm_op_quantized_loop&lt;op&gt;);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aae3f4470575b8ef973d136101ea80b68"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">arm_compute::cpu::elementwise_op_quantized</a></div><div class="ttdeci">void elementwise_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00299">elementwise_quantized_list.h:299</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab1893a2a9fc472d75b5fe897e63c5a41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1893a2a9fc472d75b5fe897e63c5a41">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00199">199</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">load_quantized()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : af, <a class="code" href="namespacereorder.xhtml">reorder</a> ? af : broadcast_vector);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae239dc51a686a455c70ff87fce9ea5aa"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">float32x4x4_t load_quantized(const uint8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">elementwise_quantized_list.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a918ccd824090fc763e31459310bdea53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a918ccd824090fc763e31459310bdea53">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00163">163</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">load_quantized()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// Get inputs and compute output</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae239dc51a686a455c70ff87fce9ea5aa"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">float32x4x4_t load_quantized(const uint8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">elementwise_quantized_list.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a06083700f047b600de212931e66daab7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06083700f047b600de212931e66daab7">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_arithm_op_quantized_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00113">113</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9953a8057dee990456f905a5099c9730"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9953a8057dee990456f905a5099c9730">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00629">629</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00514">elementwise_op_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_signed_scalar&lt;op&gt;,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                    &amp;elementwise_arithm_op_quantized_signed_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                    &amp;elementwise_arithm_op_quantized_singed_loop&lt;op&gt;);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a1806b9850ee209fa95836d94e33e176f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">arm_compute::cpu::elementwise_op_quantized_signed</a></div><div class="ttdeci">void elementwise_op_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00514">elementwise_quantized_list.h:514</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a77a76d4cabb3dcbb44ecb12034a28e46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a76d4cabb3dcbb44ecb12034a28e46">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_signed_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00214">214</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">load_quantized_signed()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00091">store_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : af, <a class="code" href="namespacereorder.xhtml">reorder</a> ? af : broadcast_vector);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_af77016f5946f5a276e68576bb1b68877"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">arm_compute::cpu::store_quantized_signed</a></div><div class="ttdeci">void store_quantized_signed(int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00098">elementwise_quantized_list.h:98</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">elementwise_quantized_list.h:48</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d0c8d90c3c46f6f1eb5f80e1a82254c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d0c8d90c3c46f6f1eb5f80e1a82254c">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::cpu::elementwise_arithm_op_quantized_signed_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00119">119</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00317">arm_compute::quantize_qasymm8_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a136ae2cf27f2d1d2aac2da4c33d24c1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a136ae2cf27f2d1d2aac2da4c33d24c1c">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_singed_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_singed_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00181">181</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">load_quantized_signed()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00091">store_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Get inputs and compute output</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_af77016f5946f5a276e68576bb1b68877"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">arm_compute::cpu::store_quantized_signed</a></div><div class="ttdeci">void store_quantized_signed(int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00098">elementwise_quantized_list.h:98</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">elementwise_quantized_list.h:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c0ec3e8fab2ea0202cedcc94da53f25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c0ec3e8fab2ea0202cedcc94da53f25">&#9670;&nbsp;</a></span>elementwise_arithm_op_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ScalarType arm_compute::cpu::elementwise_arithm_op_scalar </td>
          <td>(</td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00113">113</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::DIV</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">arm_compute::MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::POWER</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::PRELU</a>, and <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::SQUARED_DIFF</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> res = ScalarType(0);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            res = std::max(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            res = std::min(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            res = (a - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) * (a - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            res = (a &gt; 0 ? a : a * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">ArithmeticOperation::DIV</a>:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            res = a / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">if</span>(std::is_integral&lt;ScalarType&gt;::value)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                res = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> == 0) ? 0 : res;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span>(static_cast&lt;int32_t&gt;(a) % <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) != 0 &amp;&amp; ((a &lt; 0) != (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &lt; 0)))</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    --res;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">case</span> ArithmeticOperation::POWER:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            res = std::pow(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_a01b6a20d51e2db6f1704f2315ead62d3"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">PRELU</a></div><div class="ttdeci">#define PRELU(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00031">elementwise_operation_quantized.cl:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_a49f6fecffd852cda3b0ece53dcbb2b87"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">DIV</a></div><div class="ttdeci">#define DIV(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00032">elementwise_operation_quantized.cl:32</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_a74e75242132eaabbc1c512488a135926"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a></div><div class="ttdeci">#define MIN(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00029">elementwise_operation_quantized.cl:29</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_ab05bd244cb8823c69d6dce6a23a758fd"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">SQUARED_DIFF</a></div><div class="ttdeci">#define SQUARED_DIFF(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00030">elementwise_operation_quantized.cl:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afaa460d8a451197db97d0af703bf8316"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaa460d8a451197db97d0af703bf8316">&#9670;&nbsp;</a></span>elementwise_comp_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32x4x4_t arm_compute::cpu::elementwise_comp_op </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00148">148</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    uint32x4x4_t out =</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[0], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[0]),</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[1]),</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[2], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[2]),</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[3], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[3])</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac758cf39f9e6885c73b6814ac80ff0ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac758cf39f9e6885c73b6814ac80ff0ec">&#9670;&nbsp;</a></span>elementwise_comp_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">OutputVectorType arm_compute::cpu::elementwise_comp_op </td>
          <td>(</td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00311">311</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::LessEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::NotEqual</a>, <a class="el" href="ceq_8h_source.xhtml#l00039">arm_compute::wrapper::vceq()</a>, <a class="el" href="cge_8h_source.xhtml#l00039">arm_compute::wrapper::vcge()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, and <a class="el" href="not_8h_source.xhtml#l00039">arm_compute::wrapper::vnot()</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;{</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    OutputVectorType res = { 0, 0, 0, 0 };</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">wrapper::vnot</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, a);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, a);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aed661d4bd9a14812355576773982eb7a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">arm_compute::wrapper::vnot</a></div><div class="ttdeci">uint8x8_t vnot(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="not_8h_source.xhtml#l00039">not.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1f777df8db31568a3436995df958714c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">arm_compute::wrapper::vcge</a></div><div class="ttdeci">uint8x8_t vcge(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cge_8h_source.xhtml#l00039">cge.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa7ccd655f600847f9d471604ed47e810"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">arm_compute::wrapper::vceq</a></div><div class="ttdeci">uint8x8_t vceq(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="ceq_8h_source.xhtml#l00039">ceq.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a38e6bb15e7ac2da0795f3cfef2f29d6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38e6bb15e7ac2da0795f3cfef2f29d6d">&#9670;&nbsp;</a></span>elementwise_comp_op_16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00467">467</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;{</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_16_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                                              &amp;elementwise_comp_op_16_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a550901088b6a737a17d7eeb052ba9ef6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a550901088b6a737a17d7eeb052ba9ef6">&#9670;&nbsp;</a></span>elementwise_comp_op_16_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_16_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00414">414</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;{</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint16x8_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3b186f6a61b072a9952403a3ef8548b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b186f6a61b072a9952403a3ef8548b4">&#9670;&nbsp;</a></span>elementwise_comp_op_32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00476">476</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_32_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                                              &amp;elementwise_comp_op_32_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae64977c9bd4690e8e3607e6fea754199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae64977c9bd4690e8e3607e6fea754199">&#9670;&nbsp;</a></span>elementwise_comp_op_32_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_32_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00429">429</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">auto</span>       a    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keyword">auto</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res  = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        a               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x + 4);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x + 4);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res2 = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res2))));</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">if</span>(x &lt;= window_end_x - 4)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(res, i);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        x = +4;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af8cc8f4068cf9120bf433df94926221f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cc8f4068cf9120bf433df94926221f">&#9670;&nbsp;</a></span>elementwise_comp_op_8()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00458">458</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_8_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                                              &amp;elementwise_comp_op_8_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0df077147bf38575572e36582af9f573"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0df077147bf38575572e36582af9f573">&#9670;&nbsp;</a></span>elementwise_comp_op_8_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_8_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00399">399</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint8x16_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae6f48be843bb47d4779d6613cd3ce68d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6f48be843bb47d4779d6613cd3ce68d">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">OutputVectorType arm_compute::cpu::elementwise_comp_op_broadcast </td>
          <td>(</td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00343">343</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    InputVectorType broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, wrapper::traits::vector_128_tag());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op&lt;op, InputVectorType, OutputVectorType&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : a, <a class="code" href="namespacereorder.xhtml">reorder</a> ? a : broadcast_vector);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a324f99e84c7277809b5a774363197382"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a324f99e84c7277809b5a774363197382">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_16_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_16_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00363">363</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint16x8_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a));</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a15e0926812301b45c7e24e7eea269ab2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15e0926812301b45c7e24e7eea269ab2">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_32_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_32_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00376">376</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x), broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x + 4), broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(b))));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">if</span>(x &lt;= window_end_x - 4)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, i);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        x = +4;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2a62b7914c8bff0e139b376ec38dbe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2a62b7914c8bff0e139b376ec38dbe7">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_8_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_8_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00350">350</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, <a class="code" href="namespacereorder.xhtml">reorder</a>);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, a);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0cc9dbc4c9cc16127d546998da1bd4c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cc9dbc4c9cc16127d546998da1bd4c7">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00637">637</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00299">elementwise_op_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                             &amp;elementwise_comp_op_quantized_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                             &amp;elementwise_comp_op_quantized_loop&lt;op&gt;);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aae3f4470575b8ef973d136101ea80b68"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">arm_compute::cpu::elementwise_op_quantized</a></div><div class="ttdeci">void elementwise_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00299">elementwise_quantized_list.h:299</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a26d9b05aae3ad0b55e92cde353d3bd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26d9b05aae3ad0b55e92cde353d3bd15">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00266">266</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">load_quantized()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : af, <a class="code" href="namespacereorder.xhtml">reorder</a> ? af : broadcast_vector);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae239dc51a686a455c70ff87fce9ea5aa"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">float32x4x4_t load_quantized(const uint8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">elementwise_quantized_list.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c8d923ab1f2263472ff1815a0655701"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8d923ab1f2263472ff1815a0655701">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00230">230</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">load_quantized()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae239dc51a686a455c70ff87fce9ea5aa"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">float32x4x4_t load_quantized(const uint8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">elementwise_quantized_list.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac216018d489f5f9ea7d1907f593a039e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac216018d489f5f9ea7d1907f593a039e">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_comp_op_quantized_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00141">141</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aada344073480d0eb85f751181cef6d8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aada344073480d0eb85f751181cef6d8e">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00645">645</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00407">elementwise_comp_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;{</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_loop&lt;op&gt;);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a8d498841f133c2ce4c31076a6f700a4f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">arm_compute::cpu::elementwise_comp_quantized_signed</a></div><div class="ttdeci">void elementwise_comp_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00407">elementwise_quantized_list.h:407</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a30b6a7350fda90e0f6d8dc86df9d586f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30b6a7350fda90e0f6d8dc86df9d586f">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_signed_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00283">283</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">load_quantized_signed()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(<a class="code" href="namespacereorder.xhtml">reorder</a> ? broadcast_vector : af, <a class="code" href="namespacereorder.xhtml">reorder</a> ? af : broadcast_vector);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">elementwise_quantized_list.h:48</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c7874a7ad657bd64f21bc52840ce4ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c7874a7ad657bd64f21bc52840ce4ee">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_signed_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00248">248</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">load_quantized_signed()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">elementwise_quantized_list.h:48</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abb34d4000c420ca4fed96903be0fdc64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb34d4000c420ca4fed96903be0fdc64">&#9670;&nbsp;</a></span>elementwise_comp_op_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_comp_op_scalar </td>
          <td>(</td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00280">280</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::LessEqual</a>, and <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::NotEqual</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            res = (a == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            res = (a != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            res = (a &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            res = (a &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            res = (a &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            res = (a &lt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> res ? ~static_cast&lt;uint8_t&gt;(0) : static_cast&lt;uint8_t&gt;(0);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d498841f133c2ce4c31076a6f700a4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d498841f133c2ce4c31076a6f700a4f">&#9670;&nbsp;</a></span>elementwise_comp_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00407">407</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00372">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00415">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00645">elementwise_comp_op_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    Window win = window;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        },</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        Iterator input1(in1, input1_win);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        Iterator input2(in2, input2_win);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            }</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        },</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a3dc07539dda26f6cd2dcdc08a222292d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(char input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from signed 8-bit asymmetric to floating-point. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00075">helpers_asymm.h:75</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a82713bd9209865da67e8624a162ef9c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82713bd9209865da67e8624a162ef9c1">&#9670;&nbsp;</a></span>elementwise_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OutputScalarType(*)(const InputScalarType &amp;, const InputScalarType &amp;)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__list_8h_source.xhtml#l00036">36</a> of file <a class="el" href="neon_2elementwise__list_8h_source.xhtml">elementwise_list.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win = window;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = std::min(16 / static_cast&lt;int&gt;(<span class="keyword">sizeof</span>(OutputScalarType)), 8);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">auto</span>                  output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>            non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">const</span> InputScalarType broadcast_value         = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_value, output_ptr, !is_broadcast_input_2);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? broadcast_value : a, !is_broadcast_input_2 ? a : broadcast_value);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        },</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        Iterator input1(in1, input1_win);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        Iterator input2(in2, input2_win);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(input1_ptr + x);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>      = *(input2_ptr + x);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                *(output_ptr + x) = (*scalar_func)(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        },</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a09d2d3f428d66266a790a9fa05be7cc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09d2d3f428d66266a790a9fa05be7cc1">&#9670;&nbsp;</a></span>elementwise_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml#l00083">83</a> of file <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml">elementwise_unary_list.h</a>.</p>

<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml#l00035">elementwise_op_scalar_imp()</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(ScalarType);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    Window win = window;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    Iterator output(out, win);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= window_end_x - window_step_x; x += window_step_x)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_op_imp&lt;ScalarType&gt;(op, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x)));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            *(output_ptr + x) = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">elementwise_op_scalar_imp</a>(op, *(input_ptr + x));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    },</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ac9a0d70dfa153ee766d9c184deac4aec"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">arm_compute::cpu::elementwise_op_scalar_imp</a></div><div class="ttdeci">ScalarType elementwise_op_scalar_imp(ElementWiseUnary op, const ScalarType &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__unary__list_8h_source.xhtml#l00035">elementwise_unary_list.h:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9f495c76ff4bbde6bc84c4dda788e1f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f495c76ff4bbde6bc84c4dda788e1f6">&#9670;&nbsp;</a></span>elementwise_op_imp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">VectorType arm_compute::cpu::elementwise_op_imp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml#l00059">59</a> of file <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml">elementwise_unary_list.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::SIN</a>, <a class="el" href="abs_8h_source.xhtml#l00046">arm_compute::wrapper::vabs()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00047">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00047">arm_compute::wrapper::vlog()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="round_8h_source.xhtml#l00047">arm_compute::wrapper::vround()</a>, and <a class="el" href="sin_8h_source.xhtml#l00047">arm_compute::wrapper::vsin()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(a);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(a);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(a);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(a);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">wrapper::vabs</a>(a);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a98c8805795fb292b29f4967621cd8189">wrapper::vround</a>(a);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac57024ac39a9f06f1e5bb37807c0e362">wrapper::vsin</a>(a);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a23cc34c6476b7df556284c718c44e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">arm_compute::wrapper::vlog</a></div><div class="ttdeci">float32x4_t vlog(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00047">log.h:47</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a569988c8e1a2619532b8f4d0394d5d79"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">arm_compute::wrapper::vinvsqrt</a></div><div class="ttdeci">float32x2_t vinvsqrt(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="invsqrt_8h_source.xhtml#l00047">invsqrt.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4c1fe3150ad2ca29262dc6403605e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">arm_compute::wrapper::vabs</a></div><div class="ttdeci">int8x8_t vabs(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="abs_8h_source.xhtml#l00046">abs.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ac57024ac39a9f06f1e5bb37807c0e362"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ac57024ac39a9f06f1e5bb37807c0e362">arm_compute::wrapper::vsin</a></div><div class="ttdeci">float32x4_t vsin(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="sin_8h_source.xhtml#l00047">sin.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a98c8805795fb292b29f4967621cd8189"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a98c8805795fb292b29f4967621cd8189">arm_compute::wrapper::vround</a></div><div class="ttdeci">float32x4_t vround(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="round_8h_source.xhtml#l00047">round.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae3f4470575b8ef973d136101ea80b68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3f4470575b8ef973d136101ea80b68">&#9670;&nbsp;</a></span>elementwise_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00299">299</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00359">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00415">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00622">elementwise_arithm_op_quantized()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00637">elementwise_comp_op_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    Window win = window;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Output quantization info (add 0.5 to round toward the nearest integer - 0.5 rounds away from zero)</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset + 0.5f);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keyword">const</span> uint8_t       broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_u8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        },</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        Iterator input1(in1, input1_win);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        Iterator input2(in2, input2_win);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        },</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_afbec2094d42590b94e7eead93710411d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uchar input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from 8-bit asymmetric to floating-point. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00062">helpers_asymm.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1806b9850ee209fa95836d94e33e176f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1806b9850ee209fa95836d94e33e176f">&#9670;&nbsp;</a></span>elementwise_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00514">514</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00372">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00415">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00629">elementwise_arithm_op_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    Window win = window;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    {</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            }</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        },</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        Iterator input1(in1, input1_win);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        Iterator input2(in2, input2_win);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        Iterator output(out, win);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        {</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            {</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        },</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    }</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a3dc07539dda26f6cd2dcdc08a222292d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(char input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from signed 8-bit asymmetric to floating-point. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00075">helpers_asymm.h:75</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac9a0d70dfa153ee766d9c184deac4aec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9a0d70dfa153ee766d9c184deac4aec">&#9670;&nbsp;</a></span>elementwise_op_scalar_imp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ScalarType arm_compute::cpu::elementwise_op_scalar_imp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml#l00035">35</a> of file <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml">elementwise_unary_list.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00169">arm_compute::support::cpp11::nearbyint()</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::SIN</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__unary__list_8h_source.xhtml#l00083">elementwise_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keywordflow">return</span> 1 / sqrt(a);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> std::exp(a);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">return</span> -a;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">return</span> std::log(a);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> std::abs(a);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">support::cpp11::nearbyint</a>(a);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">return</span> std::sin(a);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ac26a2b6f5d8e0c60e67684eea7e71e7c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">arm_compute::support::cpp11::nearbyint</a></div><div class="ttdeci">T nearbyint(T value)</div><div class="ttdoc">Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00169">ToolchainSupport.h:169</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aac1e9e4b134549fcc216e86bff4e9163"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac1e9e4b134549fcc216e86bff4e9163">&#9670;&nbsp;</a></span>fp16_neon_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa64c9a243c1b8d4a5bb9cfa0c69d9c64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa64c9a243c1b8d4a5bb9cfa0c69d9c64">&#9670;&nbsp;</a></span>fp16_neon_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a675a82f6a2cbbcecd80e3561257611fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a675a82f6a2cbbcecd80e3561257611fd">&#9670;&nbsp;</a></span>fp16_neon_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_floor </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adf625f706113c171a0d7c5ec4ac0f91f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf625f706113c171a0d7c5ec4ac0f91f">&#9670;&nbsp;</a></span>fp16_sve_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_sve_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2b5a907c9f3c15c309f9c538a4bd08c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b5a907c9f3c15c309f9c538a4bd08c4">&#9670;&nbsp;</a></span>fp16_sve_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_sve_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a433a50d9bda93287b0e904adb3209b1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a433a50d9bda93287b0e904adb3209b1a">&#9670;&nbsp;</a></span>fp16_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adf7d9cc42449cade42c87ff9caf215b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf7d9cc42449cade42c87ff9caf215b1">&#9670;&nbsp;</a></span>fp32_neon_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>
<p>SIMD vector tag type. </p>

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2activation_2neon_2fp32_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="cpu_2kernels_2activation_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01515">ActivationLayerInfo::a()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ActivationLayerInfo::ABS</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01510">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01520">ActivationLayerInfo::b()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::BOUNDED_RELU</a>, <a class="el" href="_window_8inl_source.xhtml#l00068">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa5b44c930bf0ddeef48b50ef11e5ddd58">ActivationLayerInfo::ELU</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">ActivationLayerInfo::HARD_SWISH</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad8156d3c6735d75d8a1b8dedd0e79c8b">ActivationLayerInfo::IDENTITY</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">ActivationLayerInfo::LEAKY_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">ActivationLayerInfo::LINEAR</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::RELU</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::SOFT_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::SQRT</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">ActivationLayerInfo::SQUARE</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="abs_8h_source.xhtml#l00046">arm_compute::wrapper::vabs()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="ceq_8h_source.xhtml#l00039">arm_compute::wrapper::vceq()</a>, <a class="el" href="cge_8h_source.xhtml#l00039">arm_compute::wrapper::vcge()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="inv_8h_source.xhtml#l00047">arm_compute::wrapper::vinv()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00047">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00047">arm_compute::wrapper::vlog()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="not_8h_source.xhtml#l00039">arm_compute::wrapper::vnot()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, <a class="el" href="tanh_8h_source.xhtml#l00040">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t&lt;float, wrapper::traits::BitWidth::W128&gt;</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 4;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo::ActivationFunction act            = act_info.activation();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// In case of non-aarch64, a small delta value is added to the input</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// to prevent NAN values caused by zeros in inputs to SQRT.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// In case of aarh64, we call vsqrt directly, so we don&#39;t use delta.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> delta = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(1e-24), ExactTagType {});</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_1     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(1.f), ExactTagType {});</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_0     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(0.f), ExactTagType{});</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_6     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(6.f), ExactTagType{});</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_3     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(3.f), ExactTagType{});</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_6 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(0.166666667f), ExactTagType{});</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    constexpr <span class="keywordtype">float</span> soft_relu_thresh  = 12.f;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      vsoft_relu_thresh = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(soft_relu_thresh), ExactTagType{});</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> va = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(act_info.a()), ExactTagType{});</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vb = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;float&gt;(act_info.b()), ExactTagType{});</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> a  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(act_info.a());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(act_info.b());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win_collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        wrapper::traits::neon_bitvector_t&lt;float, wrapper::traits::BitWidth::W128&gt; tmp;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">switch</span>(act)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">wrapper::vabs</a>(vin);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(vb, va, vin);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin))));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, vin);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, vin));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vb, vin));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin, const_0), vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, vin));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin, vsoft_relu_thresh), vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vin))));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(vin, const_0), vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vin), const_1)));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    tmp = wrapper::vsqrt(vin);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> bitmask = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(0.f, ExactTagType{}));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        tmp                 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin, mask_float_vector(delta, bitmask))));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        tmp                 = mask_float_vector(tmp, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">wrapper::vnot</a>(bitmask));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin, vin);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vb, vin)));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    tmp = vin;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin, const_3)))));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> in = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input_ptr + x));</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordtype">float</span>       tmp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">switch</span>(act)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    tmp = std::abs(in);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    tmp = a * in + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    tmp = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(1) / (static_cast&lt;float&gt;(1) + std::exp(-in));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    tmp = std::max&lt;float&gt;(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(0), in);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    tmp = std::min&lt;float&gt;(a, std::max(static_cast&lt;float&gt;(0), in));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    tmp = std::min&lt;float&gt;(a, std::max&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, in));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    tmp = (in &gt; 0) ? in : a * in;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    tmp = (in &gt; soft_relu_thresh) ? in : std::log(static_cast&lt;float&gt;(1) + std::exp(in));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    tmp = (in &gt;= 0) ? in : a * (std::exp(in) - 1);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    tmp = std::sqrt(in);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    tmp = in * in;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    tmp = a * std::tanh(b * in);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    tmp = in;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    tmp = in * ((std::min(std::max((in + 3), 0.0f), 6.0f)) * 0.166666667f);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            *(output_ptr + x) = tmp;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    },</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a23cc34c6476b7df556284c718c44e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">arm_compute::wrapper::vlog</a></div><div class="ttdeci">float32x4_t vlog(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00047">log.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acbccd6a89f4cdd679773ce30f7959db0"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">arm_compute::wrapper::vtanh</a></div><div class="ttdeci">float32x4_t vtanh(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="tanh_8h_source.xhtml#l00040">tanh.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a569988c8e1a2619532b8f4d0394d5d79"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">arm_compute::wrapper::vinvsqrt</a></div><div class="ttdeci">float32x2_t vinvsqrt(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="invsqrt_8h_source.xhtml#l00047">invsqrt.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a5ac8135a2c0a60f10448be0057543ed7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">arm_compute::wrapper::vinv</a></div><div class="ttdeci">float32x2_t vinv(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="inv_8h_source.xhtml#l00047">inv.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4c1fe3150ad2ca29262dc6403605e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">arm_compute::wrapper::vabs</a></div><div class="ttdeci">int8x8_t vabs(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="abs_8h_source.xhtml#l00046">abs.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_1_1traits_xhtml_acf6b3be295be8dbd7897536bcd7561a3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t</a></div><div class="ttdeci">typename neon_bitvector&lt; T, BW &gt;::tag_type neon_bitvector_tag_t</div><div class="ttdoc">Helper type template to get the tag type of a neon vector. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00132">traits.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aed661d4bd9a14812355576773982eb7a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">arm_compute::wrapper::vnot</a></div><div class="ttdeci">uint8x8_t vnot(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="not_8h_source.xhtml#l00039">not.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1f777df8db31568a3436995df958714c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">arm_compute::wrapper::vcge</a></div><div class="ttdeci">uint8x8_t vcge(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cge_8h_source.xhtml#l00039">cge.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa7ccd655f600847f9d471604ed47e810"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">arm_compute::wrapper::vceq</a></div><div class="ttdeci">uint8x8_t vceq(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="ceq_8h_source.xhtml#l00039">ceq.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a97667081943a6baea73dd6c7957a34fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97667081943a6baea73dd6c7957a34fa">&#9670;&nbsp;</a></span>fp32_neon_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_o_n_2kernels_2batchnormalization_2impl_2_n_e_o_n_2fp32_8cpp_source.xhtml#l00135">135</a> of file <a class="el" href="_n_e_o_n_2kernels_2batchnormalization_2impl_2_n_e_o_n_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01510">ActivationLayerInfo::activation()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01525">ActivationLayerInfo::enabled()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        fused_map[act_info.activation()](<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, act_info, window);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        batch_normalization&lt;detail::dummy&lt;float, 4&gt;&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, act_info, window);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a740ffe76254ad6ca7f8f68e1e268ae7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a740ffe76254ad6ca7f8f68e1e268ae7e">&#9670;&nbsp;</a></span>fp32_neon_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_floor </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2common_2utils_2_validate_8h_source.xhtml#l00037">ARM_COMPUTE_ASSERT</a>, <a class="el" href="src_2common_2utils_2_validate_8h_source.xhtml#l00038">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>, and <a class="el" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a6d40659f94b26d9ac5ae03538252dcd4">ARM_COMPUTE_ASSERT</a>(len &gt;= 0);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span> psrc = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">auto</span> pdst = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">for</span>(; len &gt;= <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>; len -= <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        vst1q_f32(pdst, <a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(vld1q_f32(psrc)));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        psrc += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        pdst += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span>(; len &gt; 0; --len)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        *pdst = std::floor(*psrc);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        ++pdst;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        ++psrc;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="src_2common_2utils_2_validate_8h_xhtml_a6d40659f94b26d9ac5ae03538252dcd4"><div class="ttname"><a href="src_2common_2utils_2_validate_8h.xhtml#a6d40659f94b26d9ac5ae03538252dcd4">ARM_COMPUTE_ASSERT</a></div><div class="ttdeci">#define ARM_COMPUTE_ASSERT(cond)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_validate_8h_source.xhtml#l00037">Validate.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="src_2common_2utils_2_validate_8h_xhtml_a4966345d10014481a252ea1f91d2d5ab"><div class="ttname"><a href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ASSERT_NOT_NULLPTR(ptr)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_validate_8h_source.xhtml#l00038">Validate.h:38</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7d8c1a2fff7218cc668b8dbfc15fffa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7d8c1a2fff7218cc668b8dbfc15fffa">&#9670;&nbsp;</a></span>fp32_sve_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp32_sve_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1fc7ff87cd5070e32f7bd2a4bef72f0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fc7ff87cd5070e32f7bd2a4bef72f0f">&#9670;&nbsp;</a></span>fp32_sve_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp32_sve_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a80d31122cc47b5ed18e53c884843a77c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80d31122cc47b5ed18e53c884843a77c">&#9670;&nbsp;</a></span>fp32_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp32_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae239dc51a686a455c70ff87fce9ea5aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae239dc51a686a455c70ff87fce9ea5aa">&#9670;&nbsp;</a></span>load_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::load_quantized </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00033">33</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00199">elementwise_arithm_op_quantized_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00163">elementwise_arithm_op_quantized_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00266">elementwise_comp_op_quantized_broadcast_loop()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00230">elementwise_comp_op_quantized_loop()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>        x = vld1q_u8(input1_ptr);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> float32x4x4_t out =</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00037">NEAsymm.h:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5bb53d2922eed568fcd9de9081faeeb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bb53d2922eed568fcd9de9081faeeb7">&#9670;&nbsp;</a></span>load_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::load_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00048">48</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00214">elementwise_arithm_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00181">elementwise_arithm_op_quantized_singed_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00283">elementwise_comp_op_quantized_signed_broadcast_loop()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00248">elementwise_comp_op_quantized_signed_loop()</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> x = vld1q_s8(input1_ptr);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> float32x4x4_t out =</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    };</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00043">NEAsymm.h:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9b26a65178cfe477d292f394c0638b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9b26a65178cfe477d292f394c0638b3">&#9670;&nbsp;</a></span>nearest_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::nearest_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00051">51</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00374">BorderSize::bottom</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_scale_utils_8cpp_source.xhtml#l00027">arm_compute::scale_utils::calculate_resize_ratio()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00375">BorderSize::left</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">offset()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo::padding()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00373">BorderSize::right</a>, <a class="el" href="support_2_rounding_8h_source.xhtml#l00106">arm_compute::utils::rounding::round_half_away_from_zero()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00372">BorderSize::top</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_stride_c  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().left + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().right;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().top + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().bottom;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_stride_wc = in_stride_w * in_stride_c;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_dim_h     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Compute the ratio between source height and destination height</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> hr             = <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(in_dim_h, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    Window win(window);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> uint8_t     *in_ptr_start        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride_bytes_hwc = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> int32_t <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>.y(), <span class="keywordtype">id</span>.z()))) * in_stride_c;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>    in_hi      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(align_corners ? <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>((<span class="keywordtype">id</span>.z() + sampling_offset) * hr) : <a class="code" href="namespacestd.xhtml">std</a>::floor((id.z() + sampling_offset) * hr));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>     offset_row = in_hi * in_stride_wc;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        int32_t       x          = window_start_x;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keyword">const</span> T      *in_ptr     = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_start + in_stride_bytes_hwc * <span class="keywordtype">id</span>[3]);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= window_end_x - window_step_x; x += window_step_x)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + offset + offset_row + x));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x) = *(in_ptr + offset + offset_row + x);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    },</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    out);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1rounding_xhtml_aeecc6e8935077dc93cc5079fe98d3adc"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">arm_compute::utils::rounding::round_half_away_from_zero</a></div><div class="ttdeci">T round_half_away_from_zero(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="support_2_rounding_8h_source.xhtml#l00106">Rounding.h:106</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners. </div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00027">ScaleUtils.cpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d1451ea5389701b4e5f9907bf7c50db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d1451ea5389701b4e5f9907bf7c50db">&#9670;&nbsp;</a></span>neon_logits_1d_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_logits_1d_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type. </p>

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml#l00037">37</a> of file <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="pmax_8h_source.xhtml#l00039">arm_compute::wrapper::vpmax()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win{ window };</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator output(out, win);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> sum_stages = log2(window_step_x / 2);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// Get pointers</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="comment">// Init max value</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordtype">int</span>  x       = window_start_x;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> current_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            vec_max                  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">auto</span> carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_max), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_max));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(carry_max, carry_max);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        T max_val = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(carry_max, 0);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            max_val = *(in_ptr + x) &gt; max_val ? *(in_ptr + x) : max_val;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        *out_ptr = max_val;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    },</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab799fd9cd5fc5989593e69c55bc400f9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">arm_compute::wrapper::vpmax</a></div><div class="ttdeci">uint8x8_t vpmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pmax_8h_source.xhtml#l00039">pmax.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad58bf2776ed899b04002f19ad2f307f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad58bf2776ed899b04002f19ad2f307f0">&#9670;&nbsp;</a></span>neon_softmax_logits_1d_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_softmax_logits_1d_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type. </p>

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml#l00260">260</a> of file <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00251">ValidRegion::anchor</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">input_width</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00252">ValidRegion::shape</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;{</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_x     = in-&gt;info()-&gt;valid_region().anchor.x();</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a> = in-&gt;info()-&gt;valid_region().shape.x();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    Iterator in_it(in, window);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    Iterator max_it(max, window);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    Iterator out_it(out, window);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    constexpr <span class="keywordtype">int</span> vec_size   = 16 / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>     sum_stages = log2(vec_size / 2);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">/* Get pointers */</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_it.ptr()) + start_x;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_it.ptr()) + start_x;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(tmp);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        T sum{};</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        T sum_inversed{};</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="comment">/* Compute exponentials and sum */</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="comment">/* Get max value */</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> max_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(max_it.ptr());</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(max_val, ExactTagType{});</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="comment">/* Init sum to zero */</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">auto</span> vec_sum = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(0), ExactTagType{});</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="comment">/* Loop over row and compute exponentials and sum */</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordtype">int</span> x = 0;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (input_width - vec_size); x += vec_size)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keyword">auto</span> vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                vec_elements      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_elements, vec_max);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(beta), ExactTagType{}));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vec_elements));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(beta), ExactTagType{})));</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, vec_elements);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(tmp_ptr + x, vec_elements);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="comment">/* Reduce sum */</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keyword">auto</span> sum_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_sum), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_sum));</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                sum_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(sum_res, sum_res);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            sum = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_res, 0);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="comment">/* Run remaining elements */</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">for</span>(; x &lt; <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>; ++x)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                T element{};</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    element = (in_ptr[x] - max_val) * beta;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    sum += std::exp(element);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    element = std::exp((in_ptr[x] - max_val) * beta);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                    sum += element;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                tmp_ptr[x] = element;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">if</span>(!is_log)</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                sum_inversed = T(1) / sum;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                sum = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(std::log(sum));</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="comment">/* Normalize exponentials */</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">/* Loop over row and compute softmax */</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordtype">int</span> x = 0;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (input_width - vec_size); x += vec_size)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keyword">auto</span> vec_in           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(tmp_ptr + x);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keyword">auto</span> normalized_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(0), ExactTagType{});</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    normalized_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_in, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(sum), ExactTagType{}));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    normalized_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_in, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(sum_inversed), ExactTagType{}));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, normalized_value);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <span class="comment">/* Run remaining elements */</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">for</span>(; x &lt; <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>; ++x)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                {</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    out_ptr[x] = tmp_ptr[x] - sum;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    out_ptr[x] = tmp_ptr[x] * sum_inversed;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    },</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    in_it, max_it, out_it);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a475ee3c8ef70a2e4f18effd1d527a63a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">arm_compute::wrapper::vpadd</a></div><div class="ttdeci">uint8x8_t vpadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00187">add.h:187</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4e81061860c7f6fd71c9d59e4b547429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e81061860c7f6fd71c9d59e4b547429">&#9670;&nbsp;</a></span>neon_softmax_logits_1d_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_softmax_logits_1d_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml#l00087">87</a> of file <a class="el" href="cpu_2kernels_2softmax_2impl_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00251">ValidRegion::anchor</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">input_width</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00043">arm_compute::utils::cast::saturate_cast()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00252">ValidRegion::shape</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00074">arm_compute::wrapper::vqsub()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    static_assert(std::is_same&lt;T, qasymm8_t&gt;::value</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                  || std::is_same&lt;T, qasymm8_signed_t&gt;::value,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                  <span class="stringliteral">&quot;quantized type should be either qasymm8_t or qasymm8_signed_t.&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_x     = in-&gt;info()-&gt;valid_region().anchor.x();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a> = in-&gt;info()-&gt;valid_region().shape.x();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> scale_beta     = -beta * in-&gt;info()-&gt;quantization_info().uniform().scale;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  scale_beta_vec = vdupq_n_f32(scale_beta);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    Iterator      in_it(in, window);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    Iterator      max_it(max, window);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    Iterator      out_it(out, window);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    constexpr <span class="keywordtype">int</span> vec_size = 16;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="comment">/* Get pointers */</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_it.ptr()) + start_x;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_it.ptr()) + start_x;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordtype">float</span> sum{};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordtype">float</span> sum_inversed{};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">/* Compute exponentials and sum */</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="comment">/* Get max value */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> max_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(max_it.ptr());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(max_val, wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">/* Init sum to zero */</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            float32x4x4_t vec_sum =</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                vdupq_n_f32(0.f),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                vdupq_n_f32(0.f),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                vdupq_n_f32(0.f),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                vdupq_n_f32(0.f),</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            };</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">/* Loop over row and compute exponentials and sum */</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">int</span> x = 0;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (input_width - vec_size); x += vec_size)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keyword">auto</span> vec_elements     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                vec_elements          = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keyword">auto</span> vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                vst4q_f32(tmp_ptr + x, vec_elements_flt);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="comment">/* Reduce sum */</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> sum_16_byte = vaddq_f32(vaddq_f32(vec_sum.val[0], vec_sum.val[1]), vaddq_f32(vec_sum.val[2], vec_sum.val[3]));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keyword">auto</span>       sum_res     = vpadd_f32(vget_high_f32(sum_16_byte), vget_low_f32(sum_16_byte));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            sum_res                = vpadd_f32(sum_res, sum_res);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            sum                    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_res, 0);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="comment">/* Run remaining elements */</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">for</span>(; x &lt; <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>; ++x)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordtype">float</span> element{};</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    element = (max_val - in_ptr[x]) * scale_beta;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    sum += std::exp(element);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    element = std::exp((max_val - in_ptr[x]) * scale_beta);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    sum += element;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                tmp_ptr[x] = element;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">if</span>(!is_log)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                sum_inversed = 256.f / sum;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                sum = std::log(sum);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="comment">/* Normalize exponentials */</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;T, qasymm8_signed_t&gt;::value;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">/* Loop over row and compute softmax */</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordtype">int</span> x = 0;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (input_width - vec_size); x += vec_size)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keyword">using</span> int_vec_type   = wrapper::traits::neon_vector_t&lt;T, 16&gt;;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                float32x4x4_t vec_in = vld4q_f32(tmp_ptr + x);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                int_vec_type  normalized_value{};</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keyword">const</span> float32x4x4_t sub =</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        vsubq_f32(vec_in.val[0], vdupq_n_f32(sum)),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        vsubq_f32(vec_in.val[1], vdupq_n_f32(sum)),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        vsubq_f32(vec_in.val[2], vdupq_n_f32(sum)),</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        vsubq_f32(vec_in.val[3], vdupq_n_f32(sum)),</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    };</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(sub);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    float32x4x4_t mul =</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        vmulq_f32(vec_in.val[0], vdupq_n_f32(sum_inversed)),</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        vmulq_f32(vec_in.val[1], vdupq_n_f32(sum_inversed)),</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        vmulq_f32(vec_in.val[2], vdupq_n_f32(sum_inversed)),</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        vmulq_f32(vec_in.val[3], vdupq_n_f32(sum_inversed)),</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    };</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keywordflow">if</span>(is_qasymm8_signed)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(128.f, wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        mul.val[0]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[0], offset_vec);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        mul.val[1]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[1], offset_vec);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        mul.val[2]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[2], offset_vec);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        mul.val[3]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[3], offset_vec);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(mul);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, normalized_value);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="comment">/* Run remaining elements */</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">for</span>(; x &lt; <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>; ++x)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordflow">if</span>(is_log)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    out_ptr[x] = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">utils::cast::saturate_cast</a>&lt;T&gt;(tmp_ptr[x] - sum);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    out_ptr[x] = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">utils::cast::saturate_cast</a>&lt;T&gt;((tmp_ptr[x] * sum_inversed) - (is_qasymm8_signed ? 128.f : 0));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    },</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    in_it, max_it, out_it);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a5e5f2a88728fcb05b92a1291fa7fd7ea"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">arm_compute::wrapper::vqsub</a></div><div class="ttdeci">uint8x8_t vqsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00074">sub.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00312">Utils.h:312</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab55486f1153a4c5f507d4923b59fc6a0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32</a></div><div class="ttdeci">float32x4_t vexpq_f32(float32x4_t x)</div><div class="ttdoc">Calculate exponential. </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a80763dd41a2676071d6c4bb52801bc41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80763dd41a2676071d6c4bb52801bc41">&#9670;&nbsp;</a></span>offset_no_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t arm_compute::cpu::offset_no_padding </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>padded_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pool_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pool_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">62</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00374">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00375">BorderSize::left</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo::padding()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00373">BorderSize::right</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00372">BorderSize::top</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00092">Dimensions&lt; T &gt;::y()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00097">Dimensions&lt; T &gt;::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().left;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().right;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().top;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().bottom;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes().y());</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes()[3]);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_horiz   = pad_left + pad_right;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_vert    = pad_top + pad_bottom;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">data_layout</a> == DataLayout::NCHW)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> uint32_t offset_base = padded_offset</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                     - <span class="keyword">sizeof</span>(T) * pad_horiz * <span class="keywordtype">id</span>.y() * pool_stride_y                                            <span class="comment">/* subtract padding elems per row */</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                     - pad_top * <span class="keyword">sizeof</span>(T)                                                                       <span class="comment">/* top padding */</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                     - <span class="keyword">sizeof</span>(T) * pad_horiz * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape()[1] * <span class="keywordtype">id</span>.z() - pad_vert * in_stride_y * <span class="keywordtype">id</span>.z() <span class="comment">/* for each Z plane there are height*pad_right padding elems */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                     - in_stride_w * <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> offset_base;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keyword">const</span> uint32_t offset_base = padded_offset</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                     - <span class="keyword">sizeof</span>(T) * pad_horiz * <span class="keywordtype">id</span>.y() * <a class="code" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a>                          <span class="comment">// subtract padding elems per row</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                     - pad_top * <span class="keyword">sizeof</span>(T)                                                     <span class="comment">// top padding</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                     - <span class="keyword">sizeof</span>(T) * pad_horiz * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape()[1] * <span class="keywordtype">id</span>.z() * pool_stride_y <span class="comment">// for each Z plane there are width*pad_right padding elems</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                     - in_stride_w * <span class="keywordtype">id</span>[3];</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> offset_base;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a786677cbfb3f5677b4d84f3056eb08db"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a786677cbfb3f5677b4d84f3056eb08db">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00151">Im2Col.cpp:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_cpu_pool2d_kernel_8cpp_xhtml_a7a2bda021a34382ac8765ad308900f29"><div class="ttname"><a href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a></div><div class="ttdeci">int pool_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00059">CpuPool2dKernel.cpp:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af8966e308573541aa625e4a7f955d424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8966e308573541aa625e4a7f955d424">&#9670;&nbsp;</a></span>poolingMxN_fp16_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxN_fp16_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acf656cc44c210ddef37bf59c2851a713"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf656cc44c210ddef37bf59c2851a713">&#9670;&nbsp;</a></span>poolingMxN_fp32_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_fp32_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="quantized_8h_source.xhtml#l00162">calculate_avg_scale()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01228">PoolingLayerInfo::exclude_padding</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00090">Size2D::height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">arm_compute::test::validation::idx_width</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01229">PoolingLayerInfo::is_global_pooling</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::L2</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00277">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00736">PadStrideInfo::pad_bottom()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00721">PadStrideInfo::pad_left()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00726">PadStrideInfo::pad_right()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01227">PoolingLayerInfo::pad_stride_info</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00731">PadStrideInfo::pad_top()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01225">PoolingLayerInfo::pool_size</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00059">pool_stride_x</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01224">PoolingLayerInfo::pool_type</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">arm_compute::test::validation::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00695">PadStrideInfo::stride()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::width</a>, <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00092">Dimensions&lt; T &gt;::y()</a>, <a class="el" href="_window_8h_source.xhtml#l00154">Window::y()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00097">Dimensions&lt; T &gt;::z()</a>, and <a class="el" href="_window_8h_source.xhtml#l00163">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span>(pool_info.pool_size == Size2D(2, 2) &amp;&amp; pool_info.pool_type == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a> &amp;&amp; dst1)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        pooling2_f32_maxpool_indices(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 4;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        Window window_out = window;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, window_src);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        Iterator out(dst0, window_out);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x     = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y     = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = pool_info.pad_stride_info.pad_right();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = pool_info.pad_stride_info.pad_top();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = pool_info.pad_stride_info.pad_left();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = pool_info.pad_stride_info.pad_bottom();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordtype">int</span>       <a class="code" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a>   = 0;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordtype">int</span>       pool_stride_y   = 0;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        float32x4_t vres;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>    = <span class="keywordtype">id</span>.y() * <a class="code" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y   = std::min(pool_size_y, window_src.z().end() + pool_limit_y);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x   = std::min(pool_size_x, window_src.y().end() + pool_limit_x);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">for</span>(; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = <a class="code" href="common_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a>(pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                                            pool_stride_y);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(scale);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <span class="comment">// Perform pooling</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    vres = vdupq_n_f32(0.0f);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                            <span class="keyword">const</span> float32x4_t data = vld1q_f32(reinterpret_cast&lt;const float *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                                                                               (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                            <span class="keywordflow">if</span>(pool_info.pool_type == PoolingType::L2)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                            {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                vres = vmlaq_f32(vres, data, data);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                            }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            <span class="keywordflow">else</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                vres = vaddq_f32(vres, data);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="comment">// Divide by scale</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    vres = vmulq_f32(vres, scale_v);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    vres = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>());</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                            <span class="keyword">const</span> float32x4_t data = vld1q_f32(reinterpret_cast&lt;const float *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                                                               (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                            vres                   = vmaxq_f32(vres, data);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="comment">// Calculate square-root in case of l2 pooling</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">if</span>(pool_info.pool_type == PoolingType::L2)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    float32x4_t l2_res = { <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sqrt(vgetq_lane_f32(vres, 0))),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                           static_cast&lt;float&gt;(sqrt(vgetq_lane_f32(vres, 1))),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                           static_cast&lt;float&gt;(sqrt(vgetq_lane_f32(vres, 2))),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                           static_cast&lt;float&gt;(sqrt(vgetq_lane_f32(vres, 3)))</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                         };</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    vres = l2_res;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="comment">// Store result</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                vst1q_f32(reinterpret_cast&lt;float *&gt;(out.ptr()) + x_off, vres);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="comment">// Left-overs loop</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">for</span>(; x_off &lt; window_end_x; ++x_off)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keywordtype">float</span> res = 0.0f;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> scale = <a class="code" href="common_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a>(pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                            pool_stride_y);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">float</span> data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                                                 (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                            <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                            <span class="keywordflow">if</span>(pool_info.pool_type == PoolingType::L2)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                res += data * data;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            <span class="keywordflow">else</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                            {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                res += data;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="comment">// Divide by scale</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    res *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    res = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;float&gt;::lowest</a>();</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">float</span> data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                                                 (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                            res              = std::max(res, data);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="comment">// Calculate square-root in case of l2 pooling</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="keywordflow">if</span>(pool_info.pool_type == PoolingType::L2)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    res = std::sqrt(res);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="comment">// Store result</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        },</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        in, out);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">Scale.cpp:264</a></div></div>
<div class="ttc" id="common_2pooling__layer_8cl_xhtml_ae9df7602479b001f6280f2f528f10a92"><div class="ttname"><a href="common_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a></div><div class="ttdeci">ACC_DATA_TYPE calculate_avg_scale(const int pool_size_x, const int pool_size_y, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)</div><div class="ttdef"><b>Definition:</b> <a href="common_2pooling__layer_8cl_source.xhtml#l00172">pooling_layer.cl:172</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="_cpu_pool2d_kernel_8cpp_xhtml_a7a2bda021a34382ac8765ad308900f29"><div class="ttname"><a href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a></div><div class="ttdeci">int pool_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00059">CpuPool2dKernel.cpp:59</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7fb9537b47012988a3865769e0e0d009"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fb9537b47012988a3865769e0e0d009">&#9670;&nbsp;</a></span>poolingMxN_q8_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxN_q8_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00182">182</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::AVG</a>, <a class="el" href="quantized_8h_source.xhtml#l00162">calculate_avg_scale()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01228">PoolingLayerInfo::exclude_padding</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00090">Size2D::height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">arm_compute::test::validation::idx_width</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01229">PoolingLayerInfo::is_global_pooling</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00134">Iterator::offset()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00736">PadStrideInfo::pad_bottom()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00721">PadStrideInfo::pad_left()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00726">PadStrideInfo::pad_right()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01227">PoolingLayerInfo::pad_stride_info</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00731">PadStrideInfo::pad_top()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00060">pool_size</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01225">PoolingLayerInfo::pool_size</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00059">pool_stride_x</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01224">PoolingLayerInfo::pool_type</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00184">arm_compute::support::cpp11::round()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">arm_compute::test::validation::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00695">PadStrideInfo::stride()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00227">type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00122">arm_compute::wrapper::vaddl()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae73b6f90bda75f35f8ea1f6ca8520551">vcvtq_f32_q32()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="ext_8h_source.xhtml#l00039">arm_compute::wrapper::vext_1()</a>, <a class="el" href="ext_8h_source.xhtml#l00040">arm_compute::wrapper::vext_2()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, <a class="el" href="pmax_8h_source.xhtml#l00039">arm_compute::wrapper::vpmax()</a>, <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tbl_8h_source.xhtml#l00039">arm_compute::wrapper::vtbl()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::width</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00092">Dimensions&lt; T &gt;::y()</a>, <a class="el" href="_window_8h_source.xhtml#l00154">Window::y()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00097">Dimensions&lt; T &gt;::z()</a>, and <a class="el" href="_window_8h_source.xhtml#l00163">Window::z()</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dst1);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x     = window.x().start();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x       = window.x().end();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x      = 16;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_half_step_x = window_step_x / 2;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    Window window_out = window;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, window_src);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    Iterator out(dst0, window_out);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">using</span> q16_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;T&gt;;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">using</span> q16x8_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q16_t, 8&gt;::type</a>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">using</span> q32_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;q16_t&gt;;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">using</span> q32x4_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q32_t, 4&gt;::type</a>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x     = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y     = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = pool_info.pad_stride_info.pad_right();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = pool_info.pad_stride_info.pad_top();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = pool_info.pad_stride_info.pad_left();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = pool_info.pad_stride_info.pad_bottom();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a> = 0;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = 0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> float32x4_t             half_scale_v = vdupq_n_f32(0.5f);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo src_qinfo    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo dst_qinfo    = dst0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> quant_rescale = dst_qinfo.scale / src_qinfo.scale;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// &quot;new_offset&quot; doesn&#39;t have to consider the &quot;half_scale_v&quot; in its computation</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// With a requantization performed in a single step there won&#39;t be uncertainties introduced</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> int32_t new_offset = dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / quant_rescale);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   requant_scale  = dst_qinfo.scale / src_qinfo.scale;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> int32_t                 requant_offset = dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / requant_scale);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo requant_qinfo  = UniformQuantizationInfo(requant_scale, requant_offset);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>    = <span class="keywordtype">id</span>.y() * <a class="code" href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y   = std::min(pool_size_y, window_src.z().end() + pool_limit_y);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x   = std::min(pool_size_x, window_src.y().end() + pool_limit_x);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordtype">int</span> x_off = window_start_x;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                q32x4_t vres1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;q32_t&gt;(0.f), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                q32x4_t vres2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;q32_t&gt;(0.f), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                q32x4_t vres3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;q32_t&gt;(0.f), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                q32x4_t vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;q32_t&gt;(0.f), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a66e088b7ebbf193cb134b76fa22717bb">calculate_avg_scale</a>(pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                        pool_stride_y);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="comment">// Perform pooling</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        <span class="keyword">const</span> q8x16_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(reinterpret_cast&lt;const T *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                                                                         (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <span class="keyword">const</span> q16x8_t data_q16  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                        <span class="keyword">const</span> q16x8_t data2_q16 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        vres1                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data_q16)));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        vres2                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data_q16)));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        vres3                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data2_q16)));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                        vres4                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres4, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data2_q16)));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="keywordflow">if</span>(src_qinfo != dst_qinfo)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    <span class="keyword">const</span> float32x4x4_t vres =</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres1),</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres2),</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres3),</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres4),</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    };</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> requantized_dst = vrequantize_pooling_with_scale&lt;q8x16_t&gt;(vres, quant_rescale, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, new_offset);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="comment">// Store result</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(requantized_dst));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off + 8, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(requantized_dst));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(scale);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    vres1 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres1), scale_v));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    vres2 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres2), scale_v));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    vres3 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres3), scale_v));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    vres4 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">vcvtq_f32_q32</a>(vres4), scale_v));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <span class="keyword">const</span> q8x8_t res1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres1), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres2)));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    <span class="keyword">const</span> q8x8_t res2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres3), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres4)));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="comment">// Store result</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off, res1);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off + 8, res2);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                q8x16_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        <span class="keyword">const</span> q8x16_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(reinterpret_cast&lt;const T *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                                                         (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        vres               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                <span class="comment">// Store result</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off, (src_qinfo != dst_qinfo) ? vrequantize_pooling&lt;q8x8_t, q8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vres), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vres),</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                requant_qinfo) :</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                vres);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">if</span>(pool_info.pool_type == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">for</span>(; x_off &lt;= (window_end_x - window_half_step_x); x_off += window_half_step_x)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                q8x8_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_64_tag{});</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        <span class="keyword">const</span> q8x8_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;const T *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                                                       (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        vres              = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="comment">// Store result</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(out.ptr()) + x_off,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                (src_qinfo != dst_qinfo) ? vrequantize_pooling&lt;q8x8_t&gt;(vres, requant_qinfo) : vres);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="comment">// Left-overs loop</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt; window_end_x; ++x_off)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                q32_t res = <span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> scale = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a66e088b7ebbf193cb134b76fa22717bb">calculate_avg_scale</a>(pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                                        pool_stride_y);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="comment">// Perform pooling</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="keyword">const</span> T data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                                     (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        res += data;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keywordflow">if</span>(src_qinfo != dst_qinfo)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale       = quant_rescale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>  requantized_dst = quantize&lt;T&gt;(res_f, UniformQuantizationInfo(new_scale, new_offset));</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="comment">// Store result</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = requantized_dst;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res) * scale);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="comment">// Store result</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                T res = std::numeric_limits&lt;T&gt;::min();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                        <span class="keyword">const</span> T data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                                                     (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        res          = std::max(res, data);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="comment">// Store result</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                <span class="keywordflow">if</span>(src_qinfo != dst_qinfo)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f                           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = quantize&lt;T&gt;(res_f, requant_qinfo);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    },</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    in, out);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00264">Scale.cpp:264</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="elementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00227">gemm_interleaved.hpp:227</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a6902110788dc823846d923f666950736"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a6902110788dc823846d923f666950736">arm_compute::cpu::vcvtq_f32_q32</a></div><div class="ttdeci">float32x4_t vcvtq_f32_q32(int32x4_t values)</div><div class="ttdef"><b>Definition:</b> <a href="quantized_8h_source.xhtml#l00078">quantized.h:78</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a66e088b7ebbf193cb134b76fa22717bb"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a66e088b7ebbf193cb134b76fa22717bb">arm_compute::cpu::calculate_avg_scale</a></div><div class="ttdeci">float calculate_avg_scale(bool exclude_padding, DataLayout data_layout, const Coordinates &amp;id, const int pool_size_x, const int pool_size_y, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)</div><div class="ttdef"><b>Definition:</b> <a href="quantized_8h_source.xhtml#l00162">quantized.h:162</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="_cpu_pool2d_kernel_8cpp_xhtml_a7a2bda021a34382ac8765ad308900f29"><div class="ttname"><a href="_cpu_pool2d_kernel_8cpp.xhtml#a7a2bda021a34382ac8765ad308900f29">pool_stride_x</a></div><div class="ttdeci">int pool_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00059">CpuPool2dKernel.cpp:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8377fe826bf521b54420609f64305833"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8377fe826bf521b54420609f64305833">&#9670;&nbsp;</a></span>poolingMxN_qasymm8_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_qasymm8_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool2d_2neon_2qasymm8_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="pool2d_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    poolingMxN_q8_neon_nhwc&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a84b7dbf3cd11ed10bd6d276833450744"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84b7dbf3cd11ed10bd6d276833450744">&#9670;&nbsp;</a></span>poolingMxN_qasymm8_signed_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_qasymm8_signed_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool2d_2neon_2qasymm8__signed_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="pool2d_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    poolingMxN_q8_neon_nhwc&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95c45cdde5291576398164457a199f56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c45cdde5291576398164457a199f56">&#9670;&nbsp;</a></span>qasymm8_neon_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_neon_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2neon_2qasymm8_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="activation_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01515">ActivationLayerInfo::a()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01510">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01520">ActivationLayerInfo::b()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::BOUNDED_RELU</a>, <a class="el" href="_window_8inl_source.xhtml#l00068">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00359">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">ActivationLayerInfo::HARD_SWISH</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">ActivationLayerInfo::LEAKY_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::RELU</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00415">arm_compute::vdequantize()</a>, <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="_n_e_asymm_8inl_source.xhtml#l00026">arm_compute::vmlaq_qasymm8()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00602">arm_compute::vquantize()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00040">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 16;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo::ActivationFunction act            = act_info.activation();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            va       = vdupq_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(act_info.a(), qi_in));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            vb       = vdupq_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(act_info.b(), qi_in));</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               a        = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(act_info.a(), qi_in);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>        = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(act_info.b(), qi_in);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               const_0  = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(0.f, qi_in);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            vconst_0 = vdupq_n_u8(const_0);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = vdupq_n_f32(1.f);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vconst_0_f32 = vdupq_n_f32(0);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> float32x4_t va_f32          = vdupq_n_f32(act_info.a());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> float32x4_t vb_f32          = vdupq_n_f32(act_info.b());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       a_f32           = act_info.a();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       b_f32           = act_info.b();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_6_f32     = vdupq_n_f32(6.f);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_0_f32     = vdupq_n_f32(0.f);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_3_f32     = vdupq_n_f32(3.f);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_inv_6_f32 = vdupq_n_f32(0.166666667f);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">float</span>       s  = qi_in.scale / qi_out.scale;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">float</span>       o  = -qi_in.offset * s + qi_out.offset;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    float32x4_t vs = vdupq_n_f32(s);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    float32x4_t vo = vdupq_n_f32(o);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win_collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        wrapper::traits::neon_bitvector_t&lt;qasymm8_t, wrapper::traits::BitWidth::W128&gt; tmp;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::RELU)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                tmp = vmaxq_u8(vconst_0, vin);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">vmlaq_qasymm8</a>(tmp, vs, vo);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                tmp = vminq_u8(va, vmaxq_u8(vconst_0, vin));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">vmlaq_qasymm8</a>(tmp, vs, vo);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                tmp = vminq_u8(va, vmaxq_u8(vb, vin));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">vmlaq_qasymm8</a>(tmp, vs, vo);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[2])))),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[3])))),</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                };</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], vb_f32))),</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], vb_f32))),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                };</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[0], const_3_f32))))),</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[1], const_3_f32))))),</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[2], const_3_f32))))),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[3], const_3_f32))))),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                };</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keyword">const</span> uint32x4x4_t pos_mask =</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        wrapper::vcgtz(vin_deq.val[0]),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        wrapper::vcgtz(vin_deq.val[1]),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        wrapper::vcgtz(vin_deq.val[2]),</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        wrapper::vcgtz(vin_deq.val[3]),</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                };</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keyword">const</span> uint32x4x4_t pos_mask =</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[0], vconst_0_f32),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[1], vconst_0_f32),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[2], vconst_0_f32),</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[3], vconst_0_f32),</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                };</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[0], vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[0])),</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[1], vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[1])),</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[2], vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[2])),</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[3], vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[3])),</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                };</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> tmp = 0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::RELU)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                tmp = std::max(const_0, in);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(tmp * s + o);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                tmp = std::min(a, std::max(const_0, in));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(tmp * s + o);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                tmp = std::min(a, std::max(b, in));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(tmp * s + o);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                tmp_f       = tmp_f * ((std::min(std::max((tmp_f + 3), 0.0f), 6.0f)) * 0.166666667f);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                tmp_f       = tmp_f &gt; 0 ? tmp_f : tmp_f * a_f32;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            *(output_ptr + x) = tmp;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    },</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acbccd6a89f4cdd679773ce30f7959db0"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">arm_compute::wrapper::vtanh</a></div><div class="ttdeci">float32x4_t vtanh(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="tanh_8h_source.xhtml#l00040">tanh.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_afbec2094d42590b94e7eead93710411d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uchar input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from 8-bit asymmetric to floating-point. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00062">helpers_asymm.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aba8de9eaa10a7cb45c5aa603585d0e4c"><div class="ttname"><a href="namespacearm__compute.xhtml#aba8de9eaa10a7cb45c5aa603585d0e4c">arm_compute::vmlaq_qasymm8</a></div><div class="ttdeci">uint8x16_t vmlaq_qasymm8(qasymm8x16_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8 vector. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00026">NEAsymm.inl:26</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab8938bcb3ec0f5f8d93285eb3a28b701"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">arm_compute::qasymm8_t</a></div><div class="ttdeci">uint8_t qasymm8_t</div><div class="ttdoc">8 bit quantized asymmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00039">QuantizationInfo.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00602">NEAsymm.h:602</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00037">NEAsymm.h:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a594fa7dfda56b0775950658f6937af9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a594fa7dfda56b0775950658f6937af9c">&#9670;&nbsp;</a></span>qasymm8_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2qasymm8_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="scale_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>(policy == InterpolationPolicy::BILINEAR)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        qasymm8_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        nearest_neon_scale&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acfae6e353dc0a583bbf0a8d5016b16ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfae6e353dc0a583bbf0a8d5016b16ab">&#9670;&nbsp;</a></span>qasymm8_signed_neon_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_signed_neon_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2neon_2qasymm8__signed_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="activation_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01515">ActivationLayerInfo::a()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01510">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01520">ActivationLayerInfo::b()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::BOUNDED_RELU</a>, <a class="el" href="_window_8inl_source.xhtml#l00068">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00372">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaab15c8ee86990d0e2f174a1841b0594be">ActivationLayerInfo::HARD_SWISH</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaac7e80a3de04936f4e423e1b564fdca10">ActivationLayerInfo::LEAKY_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00317">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::RELU</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00415">arm_compute::vdequantize()</a>, <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="_n_e_asymm_8inl_source.xhtml#l00059">arm_compute::vmlaq_qasymm8_signed()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00630">arm_compute::vquantize_signed()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00040">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 16;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo::ActivationFunction act            = act_info.activation();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     va       = vdupq_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(act_info.a(), qi_in));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     vb       = vdupq_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(act_info.b(), qi_in));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        a        = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(act_info.a(), qi_in);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>        = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(act_info.b(), qi_in);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        const_0  = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(0.f, qi_in);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     vconst_0 = vdupq_n_s8(const_0);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = vdupq_n_f32(1.f);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vconst_0_f32 = vdupq_n_f32(1.f);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> float32x4_t va_f32          = vdupq_n_f32(act_info.a());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> float32x4_t vb_f32          = vdupq_n_f32(act_info.b());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       a_f32           = act_info.a();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       b_f32           = act_info.b();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_6_f32     = vdupq_n_f32(6.f);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_0_f32     = vdupq_n_f32(0.f);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_3_f32     = vdupq_n_f32(3.f);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_inv_6_f32 = vdupq_n_f32(0.166666667f);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">float</span>       s  = qi_in.scale / qi_out.scale;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">float</span>       o  = -qi_in.offset * s + qi_out.offset;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    float32x4_t vs = vdupq_n_f32(s);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    float32x4_t vo = vdupq_n_f32(o);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win_collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        wrapper::traits::neon_bitvector_t&lt;qasymm8_signed_t, wrapper::traits::BitWidth::W128&gt; tmp;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::RELU)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                tmp = vmaxq_s8(vconst_0, vin);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a54c0b3b26b7e2588af93ac27f7724279">vmlaq_qasymm8_signed</a>(tmp, vs, vo);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                tmp = vminq_s8(va, vmaxq_s8(vconst_0, vin));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a54c0b3b26b7e2588af93ac27f7724279">vmlaq_qasymm8_signed</a>(tmp, vs, vo);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                tmp = vminq_s8(va, vmaxq_s8(vb, vin));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a54c0b3b26b7e2588af93ac27f7724279">vmlaq_qasymm8_signed</a>(tmp, vs, vo);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[2])))),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[3])))),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                };</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], vb_f32))),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], vb_f32))),</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                };</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[0], const_3_f32))))),</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[1], const_3_f32))))),</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[2], const_3_f32))))),</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[3], const_3_f32))))),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">const</span> uint32x4x4_t pos_mask =</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        wrapper::vcgtz(vin_deq.val[0]),</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        wrapper::vcgtz(vin_deq.val[1]),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        wrapper::vcgtz(vin_deq.val[2]),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        wrapper::vcgtz(vin_deq.val[3]),</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                };</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keyword">const</span> uint32x4x4_t pos_mask =</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[0], vconst_0_f32),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[1], vconst_0_f32),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[2], vconst_0_f32),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[3], vconst_0_f32),</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> float32x4x4_t tmp_dep =</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[0], vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[0])),</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[1], vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[1])),</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[2], vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[2])),</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[3], vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[3])),</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> tmp = 0;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::RELU)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                tmp = std::max(const_0, in);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(tmp * s + o);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                tmp = std::min(a, std::max(const_0, in));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(tmp * s + o);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                tmp = std::min(a, std::max(b, in));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(tmp * s + o);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                tmp_f       = tmp_f * ((std::min(std::max((tmp_f + 3), 0.0f), 6.0f)) * 0.166666667f);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                tmp_f       = tmp_f &gt; 0 ? tmp_f : tmp_f * a_f32;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            *(output_ptr + x) = tmp;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    },</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acbccd6a89f4cdd679773ce30f7959db0"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">arm_compute::wrapper::vtanh</a></div><div class="ttdeci">float32x4_t vtanh(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="tanh_8h_source.xhtml#l00040">tanh.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a3dc07539dda26f6cd2dcdc08a222292d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(char input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from signed 8-bit asymmetric to floating-point. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00075">helpers_asymm.h:75</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a54c0b3b26b7e2588af93ac27f7724279"><div class="ttname"><a href="namespacearm__compute.xhtml#a54c0b3b26b7e2588af93ac27f7724279">arm_compute::vmlaq_qasymm8_signed</a></div><div class="ttdeci">int8x16_t vmlaq_qasymm8_signed(qasymm8x16_signed_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00059">NEAsymm.inl:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af486d5eb4935eb5601d9c5fcc42be220"><div class="ttname"><a href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">arm_compute::qasymm8_signed_t</a></div><div class="ttdeci">int8_t qasymm8_signed_t</div><div class="ttdoc">8 bit signed quantized asymmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00038">QuantizationInfo.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00630">NEAsymm.h:630</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00043">NEAsymm.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5afa676c133f2bd00b896680e5176cd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5afa676c133f2bd00b896680e5176cd4">&#9670;&nbsp;</a></span>qasymm8_signed_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_signed_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>(policy == InterpolationPolicy::BILINEAR)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        qasymm8_signed_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        nearest_neon_scale&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af5cb7e1932ee8b3b7b5ead9bc94cc5d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5cb7e1932ee8b3b7b5ead9bc94cc5d0">&#9670;&nbsp;</a></span>qasymm8_signed_sve_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::qasymm8_signed_sve_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a068eb822f12700b2c9c7eb235695fc72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a068eb822f12700b2c9c7eb235695fc72">&#9670;&nbsp;</a></span>qasymm8_signed_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::qasymm8_signed_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a77b7df133c8039ed288a49af809ae31a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77b7df133c8039ed288a49af809ae31a">&#9670;&nbsp;</a></span>qasymm8_sve_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::qasymm8_sve_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0561f47ad19e4129d2fe9a9ad9add75f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0561f47ad19e4129d2fe9a9ad9add75f">&#9670;&nbsp;</a></span>qasymm8_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::qasymm8_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a941992df37d7e4d488a8561e03a3c3e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a941992df37d7e4d488a8561e03a3c3e4">&#9670;&nbsp;</a></span>qsymm16_neon_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qsymm16_neon_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2neon_2qsymm16_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="activation_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01515">ActivationLayerInfo::a()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01510">ActivationLayerInfo::activation()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01520">ActivationLayerInfo::b()</a>, <a class="el" href="_window_8inl_source.xhtml#l00068">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00461">arm_compute::dequantize_qsymm16()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00447">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="_n_e_symm_8h_source.xhtml#l00135">arm_compute::vdequantize_int16()</a>, <a class="el" href="div_8h_source.xhtml#l00058">arm_compute::wrapper::vdiv()</a>, <a class="el" href="exp_8h_source.xhtml#l00047">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_symm_8h_source.xhtml#l00155">arm_compute::vquantize_int16()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00040">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 8;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> ActivationLayerInfo::ActivationFunction act            = act_info.activation();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = vdupq_n_f32(1.f);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t             va_f32   = vdupq_n_f32(act_info.a());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t             vb_f32   = vdupq_n_f32(act_info.b());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   a_f32    = act_info.a();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   b_f32    = act_info.b();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win_collapsed, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        wrapper::traits::neon_bitvector_t&lt;qsymm16_t, wrapper::traits::BitWidth::W128&gt; tmp;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tmp);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a>(vin, qi_in.scale);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> float32x4x2_t tmp_dep =</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                };</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a>(tmp_dep, qi_out.scale);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="comment">// De-quantize</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a>(vin, qi_in.scale);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// Perform activation</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">const</span> float32x4x2_t tmp_dep =</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                };</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a>(tmp_dep, qi_out.scale);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> tmp = 0;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(in, qi_in.scale);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(tmp_f, qi_out);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(act == ActivationLayerInfo::ActivationFunction::TANH)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordtype">float</span> tmp_f = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(in, qi_in.scale);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                tmp         = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(tmp_f, qi_out);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            *(output_ptr + x) = tmp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    },</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00447">QuantizationInfo.h:447</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acbccd6a89f4cdd679773ce30f7959db0"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">arm_compute::wrapper::vtanh</a></div><div class="ttdeci">float32x4_t vtanh(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="tanh_8h_source.xhtml#l00040">tanh.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa9985607399e329fcb371a92c84a6acd"><div class="ttname"><a href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">arm_compute::vdequantize_int16</a></div><div class="ttdeci">float32x4x2_t vdequantize_int16(const int16x8_t &amp;qv, float scale)</div><div class="ttdoc">Dequantize a neon vector holding 8 16-bit quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00135">NESymm.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac5986edc0dbcd0c071107cafb98cbc39"><div class="ttname"><a href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">arm_compute::vquantize_int16</a></div><div class="ttdeci">int16x8_t vquantize_int16(const float32x4x2_t &amp;qv, float scale)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00155">NESymm.h:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aae8583b382eaea109164f2f3e16380b1"><div class="ttname"><a href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">arm_compute::dequantize_qsymm16</a></div><div class="ttdeci">float dequantize_qsymm16(int16_t value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 16-bit symmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00461">QuantizationInfo.h:461</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33d1899b4ff31e4a36f93fa618978196"><div class="ttname"><a href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">arm_compute::qsymm16_t</a></div><div class="ttdeci">int16_t qsymm16_t</div><div class="ttdoc">16 bit quantized symmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00040">QuantizationInfo.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00047">exp.h:47</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a46e55899baa7d08e92da7c155fd4acb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46e55899baa7d08e92da7c155fd4acb0">&#9670;&nbsp;</a></span>qsymm16_sve_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::qsymm16_sve_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a00984b854f02b4e2430ef1945b87587c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00984b854f02b4e2430ef1945b87587c">&#9670;&nbsp;</a></span>quantize() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_same&lt;T, int8_t&gt;::value, int8_t&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a> arm_compute::cpu::quantize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00041">41</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00317">arm_compute::quantize_qasymm8_signed()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00227">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_quantization_info_8h_source.xhtml#l00240">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::quantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(val, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7e15a349e3cf9291c7c41ce9cf442db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7e15a349e3cf9291c7c41ce9cf442db">&#9670;&nbsp;</a></span>quantize() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_same&lt;T, uint8_t&gt;::value, uint8_t&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a> arm_compute::cpu::quantize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00048">48</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>, and <a class="el" href="quantized_8h_source.xhtml#l00057">vcvtq_q32_f32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(val, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="ttc" id="helpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c3701a2b4b4aab6e84bdf870666451b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c3701a2b4b4aab6e84bdf870666451b">&#9670;&nbsp;</a></span>s16_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::s16_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2integer_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, and <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span>(policy == InterpolationPolicy::BILINEAR)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        s16_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        s16_neon_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a879e0c97797db99ad23964097232f62a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a879e0c97797db99ad23964097232f62a">&#9670;&nbsp;</a></span>s16_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::s16_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a981cf35141a952f493df0398da0b3d99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a981cf35141a952f493df0398da0b3d99">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">63</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00199">elementwise_arithm_op_quantized_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00163">elementwise_arithm_op_quantized_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00266">elementwise_comp_op_quantized_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00230">elementwise_comp_op_quantized_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00283">elementwise_comp_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00248">elementwise_comp_op_quantized_signed_loop()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[0]), vqmovn_u32(out.val[1])));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[2]), vqmovn_u32(out.val[3])));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0460ff15e5977217b8fae5cf6abed0b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0460ff15e5977217b8fae5cf6abed0b1">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00070">70</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a83e9db0e07a3f67c702e65cc54fa9119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e9db0e07a3f67c702e65cc54fa9119">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>rf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>invscale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">77</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00063">store_quantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    int32x4x4_t out =</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[0], invscale)),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[1], invscale)),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[2], invscale)),</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[3], invscale)),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    };</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a>(output_ptr, out);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a83e9db0e07a3f67c702e65cc54fa9119"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00077">elementwise_quantized_list.h:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aac9f2850a80f033f33e04660ac3bbd08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac9f2850a80f033f33e04660ac3bbd08">&#9670;&nbsp;</a></span>store_quantized_signed() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00091">91</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00214">elementwise_arithm_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00181">elementwise_arithm_op_quantized_singed_loop()</a>, and <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00098">store_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    vst1q_s8(output_ptr, vcombine_s8(pa, pb));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af77016f5946f5a276e68576bb1b68877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af77016f5946f5a276e68576bb1b68877">&#9670;&nbsp;</a></span>store_quantized_signed() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>rf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>invscale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00098">98</a> of file <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml">elementwise_quantized_list.h</a>.</p>

<p class="reference">References <a class="el" href="neon_2elementwise__quantized__list_8h_source.xhtml#l00091">store_quantized_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    int32x4x4_t out =</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[0], invscale)),</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[1], invscale)),</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[2], invscale)),</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[3], invscale)),</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    };</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr, out);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_af77016f5946f5a276e68576bb1b68877"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">arm_compute::cpu::store_quantized_signed</a></div><div class="ttdeci">void store_quantized_signed(int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="neon_2elementwise__quantized__list_8h_source.xhtml#l00098">elementwise_quantized_list.h:98</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acee71620d39960df76ed85d99151f255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee71620d39960df76ed85d99151f255">&#9670;&nbsp;</a></span>sub_qasymm8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="reinterpret_8h_source.xhtml#l00044">arm_compute::wrapper::vreinterpret()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(oq_info.offset);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> float32x4_t             vscale1              = is_broadcast_input_2 ? vdupq_n_f32(iq1_info.scale) : vdupq_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> float32x4_t             vscale2              = is_broadcast_input_2 ? vdupq_n_f32(iq2_info.scale) : vdupq_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> int32x4_t               voffset1             = is_broadcast_input_2 ? vdupq_n_s32(iq1_info.offset) : vdupq_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> int32x4_t               voffset2             = is_broadcast_input_2 ? vdupq_n_s32(iq2_info.offset) : vdupq_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;uint8_t&gt;(broadcast_value), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> float32x4x4_t bf =</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> float32x4x4_t af =</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#ifdef __aarch64_</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[2], af.val[2]) : vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[3], af.val[3]) : vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[2], af.val[2]) : vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[3], af.val[3]) : vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(pa, pb));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x) - non_broadcast_qinfo.offset) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value - broadcast_qinfo.offset) * broadcast_qinfo.scale;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                *(output_ptr + x) = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(is_broadcast_input_2 ? afs - bfs : bfs - afs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        },</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(iq1_info.offset);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(iq2_info.offset);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keyword">const</span> float32x4x4_t af =</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                };</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">const</span> float32x4x4_t bf =</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                };</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(pa, pb));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x)) - iq1_info.offset) * iq1_info.scale;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> = static_cast&lt;int32_t&gt;((*(input2_ptr + x)) - iq2_info.offset) * iq2_info.scale;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                *(output_ptr + x) = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>((afs - <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        },</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="helpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric. </div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8acc2922a77f7c97eb724c61d30440fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8acc2922a77f7c97eb724c61d30440fc">&#9670;&nbsp;</a></span>sub_qasymm8_signed_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_signed_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00067">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00317">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="reinterpret_8h_source.xhtml#l00044">arm_compute::wrapper::vreinterpret()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(oq_info.offset);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> float32x4_t             vscale1              = is_broadcast_input_2 ? vdupq_n_f32(iq1_info.scale) : vdupq_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> float32x4_t             vscale2              = is_broadcast_input_2 ? vdupq_n_f32(iq2_info.scale) : vdupq_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> int32x4_t               voffset1             = is_broadcast_input_2 ? vdupq_n_s32(iq1_info.offset) : vdupq_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> int32x4_t               voffset2             = is_broadcast_input_2 ? vdupq_n_s32(iq2_info.offset) : vdupq_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;int8_t&gt;(broadcast_value), wrapper::traits::vector_128_tag{});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> float32x4x4_t bf =</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(broadcast_value_vec))))), voffset2)), vscale2),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> float32x4x4_t af =</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#ifdef __aarch64_</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[2], af.val[2]) : vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[3], af.val[3]) : vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[2], af.val[2]) : vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, !is_broadcast_input_2 ? vsubq_f32(bf.val[3], af.val[3]) : vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(pa, pb));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x) - non_broadcast_qinfo.offset) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value - broadcast_qinfo.offset) * broadcast_qinfo.scale;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(is_broadcast_input_2 ? afs - bfs : bfs - afs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        },</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(iq1_info.offset);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(iq2_info.offset);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keyword">const</span> float32x4x4_t af =</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a))))), voffset1)), vscale1),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                };</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">const</span> float32x4x4_t bf =</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vsubq_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))))), voffset2)), vscale2),</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                };</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        vcvtnq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[2], bf.val[2]), invvscaleo)),</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        vcvtq_s32_f32(vmlaq_f32(voffseto, vsubq_f32(af.val[3], bf.val[3]), invvscaleo)),</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1])));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf.val[2]), vqmovn_s32(rf.val[3])));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(pa, pb));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x)) - iq1_info.offset) * iq1_info.scale;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> = static_cast&lt;int32_t&gt;((*(input2_ptr + x)) - iq2_info.offset) * iq2_info.scale;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>((afs - <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        },</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00861">helpers.h:861</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00274">Scale.cpp:274</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe75050a14b59a82245e5ed873bdf1ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe75050a14b59a82245e5ed873bdf1ab">&#9670;&nbsp;</a></span>sub_qsymm16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qsymm16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00447">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 8;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4_t vscale1    = vdupq_n_f32(iq1_info.scale);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4_t vscale2    = vdupq_n_f32(iq2_info.scale);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo  = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> int16_t   broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> int16x8_t broadcast_value_vec = vdupq_n_s16(broadcast_value);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keyword">const</span> float32x4x2_t bf =</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(broadcast_value_vec))), vscale2),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(broadcast_value_vec))), vscale2),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            };</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value) * broadcast_qinfo.scale;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keyword">const</span> int16x8_t     a = vld1q_s16(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keyword">const</span> float32x4x2_t af =</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1),</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1),</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> int32x4x4_t rf =</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        vcvtq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0]) : vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        vcvtq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1]) : vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                };</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1]));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                vst1q_s16(output_ptr + x, pa);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x)) * non_broadcast_qinfo.scale;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(is_broadcast_input_2 ? (bfs - afs) : (afs - <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), oq_info);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        },</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keyword">const</span> int16x8_t a = vld1q_s16(input1_ptr + x);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keyword">const</span> int16x8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s16(input2_ptr + x);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keyword">const</span> float32x4x2_t af =</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                };</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> float32x4x2_t bf =</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(b))), vscale2),</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(b))), vscale2),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                };</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> int32x4x2_t rf =</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        vcvtq_s32_f32(vmulq_f32(vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        vcvtq_s32_f32(vmulq_f32(vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                };</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1]));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                vst1q_s16(output_ptr + x, pa);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x))) * iq1_info.scale;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> bfs   = static_cast&lt;int32_t&gt;((*(input2_ptr + x))) * iq2_info.scale;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs - bfs), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        },</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00447">QuantizationInfo.h:447</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a42caf294cb15e85fa40a9bcc63c8b513"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42caf294cb15e85fa40a9bcc63c8b513">&#9670;&nbsp;</a></span>sub_same_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sub_same_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type. </p>

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2sub_2neon_2list_8h_source.xhtml#l00045">45</a> of file <a class="el" href="cpu_2kernels_2sub_2neon_2list_8h_source.xhtml">list.h</a>.</p>

<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00120">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00099">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00139">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00094">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00104">Window::Dimension::step()</a>, <a class="el" href="scalar_2sub_8h_source.xhtml#l00033">arm_compute::wrapper::sub_sat()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00074">arm_compute::wrapper::vqsub()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00087">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00145">Window::x()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">bool</span> is_sat = policy == ConvertPolicy::SATURATE;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Window win = window;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16 / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    Iterator input1(src0, window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape()));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    Iterator input2(src1, window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape()));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> T    broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keyword">auto</span>       res             = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(broadcast_value_vec, non_broadcast_v) : wrapper::<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">vsub</a>(broadcast_value_vec, non_broadcast_v);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">if</span>(is_broadcast_input_2)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(res, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(-1), ExactTagType{}));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keyword">auto</span>       res             = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">wrapper::sub_sat</a>(broadcast_value, non_broadcast_v) : broadcast_value - non_broadcast_v;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keywordflow">if</span>(is_broadcast_input_2)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(-1) * res;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                *(output_ptr + x) = res;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        },</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        Iterator input1(src0, input1_win);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        Iterator input2(src1, input2_win);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input1.ptr());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input2.ptr());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> res  = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(val1, val2) : wrapper::<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">vsub</a>(val1, val2);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// Compute left-over elements</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val1   = *(input1_ptr + x);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> val2   = *(input2_ptr + x);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                *(output_ptr + x) = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">wrapper::sub_sat</a>(val1, val2) : val1 - val2;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        },</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a5e5f2a88728fcb05b92a1291fa7fd7ea"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">arm_compute::wrapper::vqsub</a></div><div class="ttdeci">uint8x8_t vqsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00074">sub.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1737829276757f7640dd77e6b6c8d1f5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">arm_compute::wrapper::sub_sat</a></div><div class="ttdeci">uint8_t sub_sat(const uint8_t &amp;a, const uint8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="scalar_2sub_8h_source.xhtml#l00033">sub.h:33</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a55d3bb9ab04b4aec0b3f32abf5a4e672"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55d3bb9ab04b4aec0b3f32abf5a4e672">&#9670;&nbsp;</a></span>u8_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::u8_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="neon_2integer_8cpp_source.xhtml#l00265">265</a> of file <a class="el" href="neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, and <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">if</span>(policy == InterpolationPolicy::BILINEAR)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        u8_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        u8_neon_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a501c9f7380e820f32191939e99c98334"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501c9f7380e820f32191939e99c98334">&#9670;&nbsp;</a></span>u8_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::u8_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae73b6f90bda75f35f8ea1f6ca8520551"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae73b6f90bda75f35f8ea1f6ca8520551">&#9670;&nbsp;</a></span>vcvtq_f32_q32() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::vcvtq_f32_q32 </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00182">poolingMxN_q8_neon_nhwc()</a>, and <a class="el" href="quantized_8h_source.xhtml#l00063">vcvtq_q32_f32()</a>.</p>

</div>
</div>
<a id="a0742c64894b8b3b17525fb7d6cd33bb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0742c64894b8b3b17525fb7d6cd33bb1">&#9670;&nbsp;</a></span>vcvtq_f32_q32() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::vcvtq_f32_q32 </td>
          <td>(</td>
          <td class="paramtype">uint32x4_t&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00072">72</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_u32(values);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6902110788dc823846d923f666950736"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6902110788dc823846d923f666950736">&#9670;&nbsp;</a></span>vcvtq_f32_q32() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::vcvtq_f32_q32 </td>
          <td>(</td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00078">78</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="quantized_8h_source.xhtml#l00087">vrequantize_pooling_with_scale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_s32(values);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a74b03fff4207990f991dabb49bf922bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74b03fff4207990f991dabb49bf922bf">&#9670;&nbsp;</a></span>vcvtq_q32_f32() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::cpu::vcvtq_q32_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00057">57</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae73b6f90bda75f35f8ea1f6ca8520551">vcvtq_f32_q32()</a>.</p>

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00048">quantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> vcvtq_u32_f32(values);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af149abce9fb73b4e642934e2a9342a66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af149abce9fb73b4e642934e2a9342a66">&#9670;&nbsp;</a></span>vcvtq_q32_f32() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32x4_t arm_compute::cpu::vcvtq_q32_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00057">57</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> vcvtq_u32_f32(values);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7e17bacc5eaed2caf54f3903e614852c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e17bacc5eaed2caf54f3903e614852c">&#9670;&nbsp;</a></span>vcvtq_q32_f32() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t arm_compute::cpu::vcvtq_q32_f32 </td>
          <td>(</td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>values</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00063">63</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae73b6f90bda75f35f8ea1f6ca8520551">vcvtq_f32_q32()</a>.</p>

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00048">quantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> vcvtq_s32_f32(values);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acab4c6ee4cc99b007557d8fa26fdab2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acab4c6ee4cc99b007557d8fa26fdab2b">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Tout arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">Tin&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Tin&#160;</td>
          <td class="paramname"><em>vec2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00119">vrequantize_pooling()</a>, and <a class="el" href="quantized_8h_source.xhtml#l00094">vrequantize_pooling_with_scale()</a>.</p>

</div>
</div>
<a id="acd79be17a73378e502a73b4e3849bbce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd79be17a73378e502a73b4e3849bbce">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x16_t arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">uint8x8_t&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8x8_t&#160;</td>
          <td class="paramname"><em>vec2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00104">104</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00602">arm_compute::vquantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> float32x4x4_t acc =</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8((vec1))))),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_high_u16(vmovl_u8((vec1))))),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8((vec2))))),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_high_u16(vmovl_u8((vec2))))),</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    };</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(acc, requant_qinfo);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00602">NEAsymm.h:602</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2677ee316925288812d62d13e941457"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2677ee316925288812d62d13e941457">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">int8x8_t&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8x8_t&#160;</td>
          <td class="paramname"><em>vec2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00119">119</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00630">arm_compute::vquantize_signed()</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acab4c6ee4cc99b007557d8fa26fdab2b">vrequantize_pooling()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> float32x4x4_t acc =</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8((vec1))))),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8((vec1))))),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8((vec2))))),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8((vec2))))),</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(acc, requant_qinfo);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00630">NEAsymm.h:630</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2ee331fa53dc98687628d3695792df0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ee331fa53dc98687628d3695792df0d">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f259068e99852ed65826e411d9e5b0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f259068e99852ed65826e411d9e5b0f">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x8_t arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">uint8x8_t &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00137">137</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00602">arm_compute::vquantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> float32x4x2_t acc =</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8((vec))))),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            vcvtq_f32_u32(vmovl_u16(vget_high_u16(vmovl_u8((vec))))),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(acc, requant_qinfo);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00602">NEAsymm.h:602</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad2867ec14eb4b02e606c92af1d94e11e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2867ec14eb4b02e606c92af1d94e11e">&#9670;&nbsp;</a></span>vrequantize_pooling() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x8_t arm_compute::cpu::vrequantize_pooling </td>
          <td>(</td>
          <td class="paramtype">int8x8_t &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>requant_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00150">150</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00630">arm_compute::vquantize_signed()</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> float32x4x2_t acc =</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_low_s16(vmovl_s8((vec))))),</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            vcvtq_f32_s32(vmovl_s16(vget_high_s16(vmovl_s8((vec))))),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(acc, requant_qinfo);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00630">NEAsymm.h:630</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7531bec491de11f9d361e9504e485853"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7531bec491de11f9d361e9504e485853">&#9670;&nbsp;</a></span>vrequantize_pooling_with_scale() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Tout arm_compute::cpu::vrequantize_pooling_with_scale </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>acc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>quant_rescale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>scale_pooling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t&#160;</td>
          <td class="paramname"><em>new_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00087">87</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00602">arm_compute::vquantize()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00630">arm_compute::vquantize_signed()</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acab4c6ee4cc99b007557d8fa26fdab2b">vrequantize_pooling()</a>.</p>

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00078">vcvtq_f32_q32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale = quant_rescale / scale_pooling;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(acc, UniformQuantizationInfo(new_scale, new_offset));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00602">NEAsymm.h:602</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3394b07fc0ede0148b28866c1b80ade8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3394b07fc0ede0148b28866c1b80ade8">&#9670;&nbsp;</a></span>vrequantize_pooling_with_scale() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8x16_t arm_compute::cpu::vrequantize_pooling_with_scale </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>acc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>quant_rescale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>scale_pooling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t&#160;</td>
          <td class="paramname"><em>new_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00087">87</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00602">arm_compute::vquantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale = quant_rescale / scale_pooling;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(acc, UniformQuantizationInfo(new_scale, new_offset));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00602">NEAsymm.h:602</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ade4357d389daf9a5b940ed834cae78ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade4357d389daf9a5b940ed834cae78ad">&#9670;&nbsp;</a></span>vrequantize_pooling_with_scale() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8x16_t arm_compute::cpu::vrequantize_pooling_with_scale </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>acc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>quant_rescale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>scale_pooling</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t&#160;</td>
          <td class="paramname"><em>new_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quantized_8h_source.xhtml#l00094">94</a> of file <a class="el" href="quantized_8h_source.xhtml">quantized.h</a>.</p>

<p class="reference">References <a class="el" href="_n_e_asymm_8h_source.xhtml#l00630">arm_compute::vquantize_signed()</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acab4c6ee4cc99b007557d8fa26fdab2b">vrequantize_pooling()</a>.</p>

<p class="reference">Referenced by <a class="el" href="quantized_8h_source.xhtml#l00078">vcvtq_f32_q32()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale = quant_rescale / scale_pooling;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(acc, UniformQuantizationInfo(new_scale, new_offset));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00630">NEAsymm.h:630</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a05c10bc9018179245c50d45b330a1c6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05c10bc9018179245c50d45b330a1c6a">&#9670;&nbsp;</a></span>step</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr int step = 4</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_8inl_source.xhtml#l00068">Window::collapse_if_possible()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00118">NERangeKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00041">arm_compute::convert_window_coord_to_position()</a>, <a class="el" href="_c_l_2_range_8cpp_source.xhtml#l00061">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00032">arm_compute::enqueue()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00041">arm_compute::error_on_invalid_subwindow()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00026">arm_compute::error_on_mismatching_windows()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00080">arm_compute::error_on_window_dimensions_gte()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00037">fp32_neon_floor()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00108">Dimensions&lt; size_t &gt;::increment()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00078">RangeDataset&lt; T &gt;::iterator::iterator()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00152">arm_compute::test::framework::dataset::make()</a>, <a class="el" href="_n_e_range_kernel_8h_source.xhtml#l00042">NERangeKernel::name()</a>, <a class="el" href="quantized_8h_source.xhtml#l00182">poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="reference_2_range_8cpp_source.xhtml#l00057">arm_compute::test::validation::reference::range()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00058">RangeDataset&lt; T &gt;::RangeDataset()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00583">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_window_8inl_source.xhtml#l00284">Window::shape()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00144">TensorShape::shift_right()</a>, <a class="el" href="_window_8inl_source.xhtml#l00189">Window::split_window()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00173">Window::validate()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></li>
    <li class="footer">Generated on Fri Aug 20 2021 08:56:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
