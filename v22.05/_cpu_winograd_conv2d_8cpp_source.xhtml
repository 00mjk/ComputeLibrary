<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/operators/CpuWinogradConv2d.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cpu_winograd_conv2d_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuWinogradConv2d.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_winograd_conv2d_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_winograd_conv2d_8h.xhtml">src/cpu/operators/CpuWinogradConv2d.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_function_descriptors_8h.xhtml">arm_compute/runtime/FunctionDescriptors.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_scheduler_8h.xhtml">arm_compute/runtime/NEON/NEScheduler.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2common_2utils_2_log_8h.xhtml">src/common/utils/Log.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;src/core/NEON/kernels/convolution/common/utils.hpp&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;src/core/NEON/kernels/convolution/winograd/winograd.hpp&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_helpers_8h.xhtml">src/core/helpers/MemoryHelpers.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_winograd_conv2d_kernel_8h.xhtml">src/cpu/kernels/CpuWinogradConv2dKernel.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_activation_8h.xhtml">src/cpu/operators/CpuActivation.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_permute_8h.xhtml">src/cpu/operators/CpuPermute.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_winograd_conv2d_8h.xhtml">src/cpu/operators/CpuWinogradConv2d.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_aux_tensor_handler_8h.xhtml">src/cpu/utils/CpuAuxTensorHandler.h</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1experimental.xhtml">arm_compute::experimental</a>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> arm_gemm_activation_from_acl_activation(<span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">switch</span>(act_info.activation())</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a>(<a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a>, act_info.a(), act_info.b());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a>(<a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a>, act_info.a(), act_info.b());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a>(<a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754">arm_gemm::Activation::Type::None</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">inline</span> Status validate_kernel_3x3(<span class="keyword">const</span> Size2D input_dims, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(src);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span>(src-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">if</span>(input_dims.width &gt; 4 &amp;&amp; input_dims.height &gt; 4)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 4, 4, 3, 3&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 4, 4, 3, 3&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 4, 4, 3, 3&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 2, 2, 3, 3&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 2, 2, 3, 3&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 2, 2, 3, 3&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(src-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;__fp16, 4, 4, 3, 3&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;__fp16, 4, 4, 3, 3&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;__fp16, 4, 4, 3, 3&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword">inline</span> Status validate_kernel_5x5(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 2, 2, 5, 5&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 2, 2, 5, 5&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 2, 2, 5, 5&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">inline</span> Status validate_kernel_3x1(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 1, 6, 1, 3&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 1, 6, 1, 3&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 1, 6, 1, 3&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">inline</span> Status validate_kernel_1x3(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 6, 1, 3, 1&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 6, 1, 3, 1&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 6, 1, 3, 1&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">inline</span> Status validate_kernel_5x1(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 1, 4, 1, 5&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 1, 4, 1, 5&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 1, 4, 1, 5&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">inline</span> Status validate_kernel_1x5(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 4, 1, 5, 1&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 4, 1, 5, 1&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 4, 1, 5, 1&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">inline</span> Status validate_kernel_7x1(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 1, 2, 1, 7&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 1, 2, 1, 7&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 1, 2, 1, 7&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">inline</span> Status validate_kernel_1x7(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> TensorInfo *input0, <span class="keyword">const</span> TensorInfo *input1, <span class="keyword">const</span> TensorInfo *batched_mm_output,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                  <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> WinogradInfo &amp;winograd_info, <span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformInputKernel&lt;float, 2, 1, 7, 1&gt;::validate</a>(src, input0, winograd_info)));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">CpuWinogradConv2dTransformWeightsKernel&lt;float, 2, 1, 7, 1&gt;::validate</a>(weights, input1, winograd_info)));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>((<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">CpuWinogradConv2dTransformOutputKernel&lt;float, 2, 1, 7, 1&gt;::validate</a>(batched_mm_output, biases, dst, winograd_info)));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">if</span>(act_info.enabled())</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CpuActivation::validate</a>(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">inline</span> Tensor4DShape internal_get_input_shape(<span class="keyword">const</span> ITensorInfo *src)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = src-&gt;data_layout();</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        in_width    = src-&gt;dimension(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        in_height   = src-&gt;dimension(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>));</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        in_channels = src-&gt;dimension(<a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        in_batches  = src-&gt;dimension(3);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> Tensor4DShape{ in_batches, in_height, in_width, in_channels };</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;Status <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dst);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(src);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.stride().first != 1 || conv_info.stride().second != 1, <span class="stringliteral">&quot;Winograd layer only supports unit strides.&quot;</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">if</span>(biases != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(src, biases);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(biases-&gt;num_dimensions() &gt; 1);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a8b4165c2e7c5c983b930a0f5f4df6acf">ICpuWinogradConv2dTransformWeightsKernel::validate</a>(src, weights);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;Size2D winograd_output_tile(<span class="keyword">const</span> Size2D &amp;input_dims, <span class="keyword">const</span> Size2D &amp;kernel_dims, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    Size2D output_tile = Size2D{};</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span>(kernel_dims == Size2D(3U, 3U))</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        output_tile = (input_dims.width &lt;= 4 || input_dims.height &lt;= 4) ? Size2D(2U, 2U) : Size2D(4U, 4U);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">if</span>(data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            output_tile = Size2D(4U, 4U);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(5U, 5U))</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        output_tile = Size2D(2U, 2U);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(1U, 3U))</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        output_tile = Size2D(1U, 6U);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(3U, 1U))</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        output_tile = Size2D(6U, 1U);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(1U, 5U))</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        output_tile = Size2D(1U, 4U);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(5U, 1U))</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        output_tile = Size2D(4U, 1U);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(7U, 1U))</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        output_tile = Size2D(2U, 1U);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_dims == Size2D(1U, 7U))</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        output_tile = Size2D(1U, 2U);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> output_tile;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordtype">bool</span> check_support_fast_math(<span class="keyword">const</span> Size2D &amp;output_tile, <span class="keyword">const</span> Size2D &amp;kernel_size, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">// Check if we want to configure a Winograd configuration which requires fast math</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">using</span> WinogradConfiguration = std::pair&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;&gt;;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> std::vector&lt;WinogradConfiguration&gt; fast_math_winograd_f16 =</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(3, 3))</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    };</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> std::vector&lt;WinogradConfiguration&gt; fast_math_winograd_f32 =</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(2, 2), std::pair&lt;int, int&gt;(5, 5)),</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        WinogradConfiguration(std::pair&lt;int, int&gt;(4, 4), std::pair&lt;int, int&gt;(5, 5))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">auto</span> p = std::make_pair(std::pair&lt;int, int&gt;(output_tile.width, output_tile.height),</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            std::pair&lt;int, int&gt;(kernel_size.width, kernel_size.height));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">switch</span>(data_type)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keywordflow">return</span> std::find(fast_math_winograd_f16.begin(), fast_math_winograd_f16.end(), p) != fast_math_winograd_f16.end();</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">return</span> std::find(fast_math_winograd_f32.begin(), fast_math_winograd_f32.end(), p) != fast_math_winograd_f32.end();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> fuse_function_supported(<span class="keyword">const</span> ActivationLayerInfo &amp;act_info)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> act_info.activation() == <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a> || act_info.activation() == <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a93fe9a4d12bd95e7726266cc94113c24">  313</a></span>&#160;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a93fe9a4d12bd95e7726266cc94113c24">CpuWinogradConv2d::CpuWinogradConv2d</a>()</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    : _gemm_function(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml">CpuGemm</a>&gt;()),</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;      _activation_func(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml">CpuActivation</a>&gt;()),</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      _permute_input(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">CpuPermute</a>&gt;()),</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      _permute_output(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">CpuPermute</a>&gt;()),</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      _permute_weights(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">CpuPermute</a>&gt;()),</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      _transform_input_kernel(nullptr),</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      _transform_weights_kernel(nullptr),</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      _transform_output_kernel(nullptr),</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;      _data_layout(),</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      _aux_mem(AuxTensorIdx::Count),</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      _input_nhwc(),</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      _output_nhwc(),</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      _input_workspace(),</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      _kernel_storage(),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;      _output_workspace(),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      _input_transformed(),</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      _output_transformed(),</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      _weights_hwio(),</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      _run_activation(false),</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      _is_prepared(false)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a59dee59b4754d976f3f9bf66412b951d">CpuWinogradConv2d::~CpuWinogradConv2d</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#ac8aac2100a877e4cef4bae4682507a9b">  339</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#ac8aac2100a877e4cef4bae4682507a9b">CpuWinogradConv2d::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, <span class="keywordtype">bool</span> enable_fast_math)</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;{</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src, weights, dst);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src, weights, biases, dst, conv_info));</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(src, weights, biases, dst, conv_info, act_info, enable_fast_math);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Get indices for the width and height</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    _data_layout                   = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>();</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   input_dims  = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(width_idx), src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(height_idx));</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   kernel_size = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(width_idx), weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(height_idx));</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type   = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>();</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   output_tile = winograd_output_tile(input_dims, kernel_size, data_type);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// Check if the Winograd configuration requires fast math</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">if</span>(!enable_fast_math)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(check_support_fast_math(output_tile, kernel_size, data_type),</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                 <span class="stringliteral">&quot;This Winograd configuration requires enable_fast_math=true&quot;</span>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    _is_prepared = <span class="keyword">false</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::unique_ptr&lt;ICpuWinogradConv2dTransformInputKernel&gt;   transform_input_kernel;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    std::unique_ptr&lt;ICpuWinogradConv2dTransformWeightsKernel&gt; transform_weights_kernel;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    std::unique_ptr&lt;ICpuWinogradConv2dTransformOutputKernel&gt;  transform_output_kernel;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordtype">int</span> n_gemms = 1;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordtype">int</span> N_BLOCK = 1; <span class="comment">// Size of block used by GEMM.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">if</span>(data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(3, 3))</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="keywordflow">if</span>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(width_idx) &gt; 4 &amp;&amp; src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(height_idx) &gt; 4)</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 4, 4, 3, 3&gt;</a>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 2, 2, 3, 3&gt;</a>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(5, 5))</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 2, 2, 5, 5&gt;</a>;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        }</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 3))</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 6, 1, 3, 1&gt;</a>;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(3, 1))</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 1, 6, 1, 3&gt;</a>;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 5))</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 4, 1, 5, 1&gt;</a>;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(5, 1))</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 1, 4, 1, 5&gt;</a>;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 7))</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 2, 1, 7, 1&gt;</a>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(7, 1))</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;float, float, 1, 2, 1, 7&gt;</a>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        }</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported.&quot;</span>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        }</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(3, 3))</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="keyword">using</span> config             = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">CpuWinogradConv2dConfiguration&lt;__fp16, __fp16, 4, 4, 3, 3&gt;</a>;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            transform_input_kernel   = std::make_unique&lt;config::TransformInputKernel&gt;();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            transform_weights_kernel = std::make_unique&lt;config::TransformWeightsKernel&gt;();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            transform_output_kernel  = std::make_unique&lt;config::TransformOutputKernel&gt;();</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            n_gemms                  = config::WinogradBase::N_GEMMS;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            N_BLOCK                  = config::WinogradConv::N_BLOCK;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported.&quot;</span>);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="preprocessor">#endif // __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported.&quot;</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keyword">const</span> PaddingType use_padding_type = (conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u || conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0) ? PADDING_SAME : PADDING_VALID;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>        use_same_padding = use_padding_type == PADDING_SAME;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="comment">// Get convolved dimensions</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_channels  = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(channel_idx);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_channels = dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(channel_idx);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">const</span> Tensor4DShape in_shape(internal_get_input_shape(src));</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>        data_type_size = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>();</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="comment">// Get the memory required to instantiate a new Winograd operator.</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    constexpr <span class="keywordtype">size_t</span> storage_alignment = 64;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Kernel Storage</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> kernel_storage_size = transform_weights_kernel-&gt;get_weight_storage_size(out_channels, in_channels) * data_type_size;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="comment">// Input storage</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> input_storage_size = transform_input_kernel-&gt;get_input_storage_size(in_shape.n_batches, in_shape.n_channels, in_shape.n_rows, in_shape.n_cols, use_same_padding) * data_type_size;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// Output storage</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> output_storage_size  = transform_output_kernel-&gt;get_output_storage_size(in_shape.n_batches, in_shape.n_rows, in_shape.n_cols, out_channels) * data_type_size;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    kernel_matrix_stride = transform_weights_kernel-&gt;get_matrix_stride(out_channels, in_channels);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    output_matrix_stride = transform_output_kernel-&gt;get_matrix_stride(in_shape.n_batches, in_shape.n_rows, in_shape.n_cols, out_channels);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>         = transform_output_kernel-&gt;get_output_shape(in_shape.n_rows, in_shape.n_cols, use_padding_type == PADDING_SAME);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    input_matrix_stride  = transform_input_kernel-&gt;get_matrix_stride(in_shape.n_batches, in_channels, in_shape.n_rows, in_shape.n_cols, use_padding_type == PADDING_SAME);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="comment">// Configure GEMM</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> tile_rows                = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.first, output_tile.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> tile_cols                = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.second, output_tile.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>                        = in_shape.n_batches * tile_rows * tile_cols;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>                        = in_shape.n_channels;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>                        = out_channels;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_matrix_row_stride = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(out_channels, N_BLOCK);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> output_matrix_row_stride = kernel_matrix_row_stride;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> a_shape(k, m, 1, n_gemms);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>     a_strides(data_type_size);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    a_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, a_strides[0] * k);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="comment">//a_strides.set(2, data_type_size * input_matrix_stride / n_gemms); FIXME: This is the real batch size, but RSH&#39;s code crashes if it&#39;s not 0.</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    a_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(2, 0);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    a_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(3, data_type_size * input_matrix_stride);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> b_shape(n, k, n_gemms);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>     b_strides(data_type_size);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    b_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, data_type_size * kernel_matrix_row_stride);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    b_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(2, data_type_size * kernel_matrix_stride);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> d_shape(n, m, 1, n_gemms);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>     d_strides(data_type_size);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    d_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, data_type_size * output_matrix_row_stride);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">//d_strides.set(2, data_type_size * output_matrix_stride / n_gemms); FIXME: This is the real batch size, but RSH&#39;s code crashes if it&#39;s not 0.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    d_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(2, 0);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    d_strides.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(3, data_type_size * output_matrix_stride);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> a_info{};</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> b_info{};</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> d_info{};</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    a_info.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(a_shape, 1, data_type, a_strides, 0, input_storage_size);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    b_info.init(b_shape, 1, data_type, b_strides, 0, kernel_storage_size);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    d_info.init(d_shape, 1, data_type, d_strides, 0, output_storage_size);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    _input_transformed  = a_info;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    _kernel_storage     = b_info;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    _output_transformed = d_info;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_use  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>       *output_to_use = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <a class="code" href="classarm__compute_1_1_strides.xhtml">PermutationVector</a>  weights_permutation_vector(3<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// Configure the kernel to transform the input tensor from NCHW -&gt; NHWC</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordflow">if</span>(_data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        _permute_input-&gt;configure(src, &amp;_input_nhwc, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        input_to_use               = &amp;_input_nhwc;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        weights_permutation_vector = <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(3<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    }</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="comment">// Configure input transform kernel</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    transform_input_kernel-&gt;configure(input_to_use, in_shape.n_batches, in_shape.n_rows, in_shape.n_cols, in_shape.n_channels, use_padding_type,</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                      &amp;_input_transformed, input_matrix_stride, &amp;_input_workspace);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> input_workspace_size = transform_input_kernel-&gt;get_working_space_size(max_num_threads);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>   input_workspace_info(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(input_workspace_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    _input_workspace = input_workspace_info;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="comment">// Re-order a weight tensor from [Output feature map x Input feature map x Height x Width] to [Height x Width x Input feature map x Output feature map]</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    _permute_weights-&gt;configure(weights, &amp;_weights_hwio, weights_permutation_vector);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    transform_weights_kernel-&gt;configure(&amp;_weights_hwio, &amp;_kernel_storage, kernel_matrix_stride, out_channels, in_channels);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="comment">// Configure GEMM function</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    _gemm_function-&gt;configure(&amp;_input_transformed, &amp;_kernel_storage, <span class="keyword">nullptr</span>, &amp;_output_transformed, 1.0f, 0.f);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// Configure output transform function</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="comment">// The biases tensor has not been allocated at this point in time, the output transform will add the biases to the final result in the run() method</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">if</span>(_data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    {</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="comment">// configure and allocate dst tensor to be used to convert from winograd domain to spatial domain when calling to reshape_output()</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2), dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0),</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                    dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(3)),</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                        1, dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>());</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        _output_nhwc  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        output_to_use = &amp;_output_nhwc;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> activation = arm_gemm_activation_from_acl_activation(act_info);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    transform_output_kernel-&gt;configure(biases,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                                       &amp;_output_transformed,</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                                       output_matrix_stride,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                       output_to_use,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                       in_shape.n_batches,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.first,</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.second,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                       out_channels,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                       &amp;_output_workspace,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                       activation);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> output_workspace_size = transform_output_kernel-&gt;get_working_space_size(max_num_threads);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>   output_workspace_info(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(output_workspace_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    _output_workspace = output_workspace_info;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="comment">// Reorder the convoluted output to ACL&#39;s ordering NCHW</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">if</span>(_data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        _permute_output-&gt;configure(&amp;_output_nhwc, dst, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    _transform_input_kernel   = std::move(transform_input_kernel);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    _transform_weights_kernel = std::move(transform_weights_kernel);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    _transform_output_kernel  = std::move(transform_output_kernel);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="comment">//Configure Activation Layer</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    _run_activation = act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">enabled</a>() &amp;&amp; !fuse_function_supported(act_info);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">if</span>(_run_activation)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        _activation_func-&gt;configure(dst, <span class="keyword">nullptr</span>, act_info);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    }</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">auto</span> asm_mem_req         = _gemm_function-&gt;workspace();</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    _aux_mem[GemmWorkspace]  = asm_mem_req[GemmWorkspace];</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    _aux_mem[Pretranspose]   = asm_mem_req[Pretranspose];</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    _aux_mem[InterleavedLHS] = asm_mem_req[InterleavedLHS];</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    _aux_mem[TransposedRHS]  = asm_mem_req[TransposedRHS];</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    _aux_mem[TempResult]     = asm_mem_req[TempResult];</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="comment">// Request temporary memory. Overlap memory needed for Input/Output transformations as they run on different non-overlapping time-steps.</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    _aux_mem[TransformedInput]   = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedInput), MemoryLifetime::Temporary, input_storage_size, storage_alignment);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    _aux_mem[TransformedOutput]  = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedOutput), MemoryLifetime::Temporary, output_storage_size, storage_alignment);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    _aux_mem[WorkspaceIO]        = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(WorkspaceIO), MemoryLifetime::Temporary, std::max(input_workspace_size, output_workspace_size));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    _aux_mem[PermutedWeights]    = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedWeights), <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">MemoryLifetime::Prepare</a>, _weights_hwio.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>());</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    _aux_mem[TransformedWeights] = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedWeights), MemoryLifetime::Persistent, kernel_storage_size, storage_alignment);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">if</span>(_data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    {</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        _aux_mem[PermutedInput].<a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml#aeb84c062d563cac4ecb427e141b0d7d1">merge</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedInput), src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>());</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        _aux_mem[PermutedOutput].<a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml#aeb84c062d563cac4ecb427e141b0d7d1">merge</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedOutput), dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>());</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    }</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a3ee2324ec4d335b54cb7db85bb0505df">  642</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a3ee2324ec4d335b54cb7db85bb0505df">CpuWinogradConv2d::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, <span class="keywordtype">bool</span> enable_fast_math)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;{</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(src, weights, dst);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src, weights, biases, dst, conv_info));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="comment">// Get indices for the width and height</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>(), <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="comment">// Input shape, kernel size and output tile</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   input_dims  = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_width), src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_height));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   kernel_size = <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_width), weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(idx_height));</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type   = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>();</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>   output_tile = winograd_output_tile(input_dims, kernel_size, data_type);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// Check if the Winograd configuration requires fast math</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">if</span>(!enable_fast_math)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    {</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(check_support_fast_math(output_tile, kernel_size, data_type),</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                        <span class="stringliteral">&quot;This Winograd configuration requires enable_fast_math=true&quot;</span>);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a> winograd_info = <a class="code" href="structarm__compute_1_1_winograd_info.xhtml">WinogradInfo</a>(output_tile,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                                    kernel_size,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                                    input_dims,</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                                                    conv_info,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                                    src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>());</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="comment">// Validate input transform</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input0_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">misc::shape_calculator::compute_winograd_input_transform_shape</a>(*src, winograd_info);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>  input0       = src-&gt;<a class="code" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a>()-&gt;set_tensor_shape(input0_shape);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// Validate filter transform</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> input1_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">misc::shape_calculator::compute_winograd_filter_transform_shape</a>(*weights, winograd_info);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>  input1       = weights-&gt;<a class="code" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a>()-&gt;set_tensor_shape(input1_shape);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="comment">// Validate batched matrix multiply</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> batched_mm_output_shape = input0.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>();</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    batched_mm_output_shape[0]          = input1.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()[0];</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> batched_mm_output  = input0.<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#afbc359bde9be72a6edab175978e56662">clone</a>()-&gt;set_tensor_shape(batched_mm_output_shape);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(3, 3))</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <span class="keywordflow">return</span> validate_kernel_3x3(input_dims, src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(5, 5))</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>(), <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">return</span> validate_kernel_5x5(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    }</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(3, 1))</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keywordflow">return</span> validate_kernel_3x1(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    }</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 3))</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    {</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 1, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">return</span> validate_kernel_1x3(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    }</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(5, 1))</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    {</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordflow">return</span> validate_kernel_5x1(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 5))</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    {</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 2, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        <span class="keywordflow">return</span> validate_kernel_1x5(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(7, 1))</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 3, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 3, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <span class="keywordflow">return</span> validate_kernel_7x1(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    }</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(kernel_size == <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>(1, 7))</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    {</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>() != 3, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>() != 3, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>() != 0u &amp;&amp; conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>() != 0, <span class="stringliteral">&quot;Only SAME or VALID padding supported&quot;</span>);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordflow">return</span> validate_kernel_1x7(src, &amp;input0, &amp;input1, &amp;batched_mm_output, weights, biases, dst, winograd_info, act_info);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;Kernel shape not supported&quot;</span>);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    }</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;}</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a684a54d1fb1634a348a585c6b5e76df0">  752</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a684a54d1fb1634a348a585c6b5e76df0">CpuWinogradConv2d::run</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;{</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#aff8f5e4223fd2a3020c8b252c8982d3a">prepare</a>(tensors);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keyword">auto</span> a = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keyword">auto</span> c = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a>);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keyword">auto</span> d = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> input_nhwc(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedInput), _input_nhwc, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> input_transformed(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedInput), _input_transformed, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> input_workspace(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(WorkspaceIO), _input_workspace, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_nchw = _data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keywordflow">if</span>(is_nchw)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="comment">//Bring channels to the front as Winograd code expects the tensor to be in the format NHWC</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, a }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, input_nhwc.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() } };</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        _permute_input-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="comment">// Transform input tensor to the winograd domain</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> transform_input_pack{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, is_nchw ? input_nhwc.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() : a }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, input_transformed.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">ACL_INT</a>, input_workspace.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() } };</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a>(_transform_input_kernel.get(), <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, _transform_input_kernel-&gt;window(), transform_input_pack);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> output_transformed(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedOutput), _output_transformed, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> weights_transformed(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedWeights), _kernel_storage, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="comment">// Run 16 GEMMs in multiple threads, each kernel runs one or more GEMMs</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> gemm_pack = tensors;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    gemm_pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#aa23dcee239e241566abce6dfceac704d">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, input_transformed.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>());</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    gemm_pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#aa23dcee239e241566abce6dfceac704d">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, weights_transformed.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>());</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    gemm_pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#aa23dcee239e241566abce6dfceac704d">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785">ACL_BIAS</a>, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    gemm_pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, output_transformed.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>());</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    _gemm_function-&gt;run(gemm_pack);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="comment">// Transform output tensor to the spatial domain</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> output_workspace(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(WorkspaceIO), _output_workspace, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> output_nhwc(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedOutput), _output_nhwc, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a>         transform_output_pack{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, c }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, output_transformed.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, is_nchw ? output_nhwc.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() : d }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">ACL_INT</a>, output_workspace.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() } };</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a>(_transform_output_kernel.get(), <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, _transform_output_kernel-&gt;window(), transform_output_pack);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">if</span>(is_nchw)</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    {</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="comment">// Reorder the convoluted output to ACL&#39;s ordering NCHW</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, output_nhwc.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, d } };</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        _permute_output-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keywordflow">if</span>(_run_activation)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, d }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, d } };</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        _activation_func-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    }</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;}</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#aff8f5e4223fd2a3020c8b252c8982d3a">  807</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#aff8f5e4223fd2a3020c8b252c8982d3a">CpuWinogradConv2d::prepare</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;{</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    {</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="comment">// Permute weights</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights     = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *weights_aux = <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a9eeb4390c7aab75d31ccc9ddc8d93975">utils::cast::polymorphic_cast</a>&lt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&gt;(tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(PermutedWeights)));</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(weights, weights_aux);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> permuted_weights(_weights_hwio, *weights_aux);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a>         permute_tensors{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, weights }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, permuted_weights.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() } };</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        _permute_weights-&gt;run(permute_tensors);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="comment">// Transform weights</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights_transf = <a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a9eeb4390c7aab75d31ccc9ddc8d93975">utils::cast::polymorphic_cast</a>&lt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&gt;(tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(TransformedWeights)));</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(weights_transf);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> transformed_weights(_kernel_storage, *weights_transf);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a>         transform_tensors{ { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">ACL_SRC</a>, permuted_weights.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() }, { <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">ACL_DST</a>, transformed_weights.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>() } };</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a>(_transform_weights_kernel.get(), <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, _transform_weights_kernel-&gt;window(), transform_tensors);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> gemm_pack = tensors;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        gemm_pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#aa23dcee239e241566abce6dfceac704d">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, transformed_weights.<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a>());</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        _gemm_function-&gt;prepare(gemm_pack);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;}</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00836"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a74ae0d6e96f38fecd38471431786b870">  836</a></span>&#160;<a class="code" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a74ae0d6e96f38fecd38471431786b870">CpuWinogradConv2d::workspace</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">return</span> _aux_mem;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;}</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754">arm_gemm::Activation::Type::None</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00076">Dimensions.h:76</a></div></div>
<div class="ttc" id="_cpu_aux_tensor_handler_8h_xhtml"><div class="ttname"><a href="_cpu_aux_tensor_handler_8h.xhtml">CpuAuxTensorHandler.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_activation_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml">arm_compute::cpu::CpuActivation</a></div><div class="ttdoc">Basic function to run kernels::CpuActivationKernel. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_activation_8h_source.xhtml#l00034">CpuActivation.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00403">ConvolutionLayer.cpp:403</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a04249f91ec2964d21a91bb7038821000"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a04249f91ec2964d21a91bb7038821000">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape</a></div><div class="ttdeci">TensorShape compute_winograd_input_transform_shape(const ITensorInfo &amp;input, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Calculate the winograd input transform shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00641">ShapeCalculator.h:641</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel_xhtml_a6d3d1d4d66f89908455bc5f05e259ce9"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">arm_compute::cpu::CpuWinogradConv2dTransformWeightsKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuWinogradConv2dTransfo...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00263">CpuWinogradConv2dKernel.cpp:263</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_afbc359bde9be72a6edab175978e56662"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#afbc359bde9be72a6edab175978e56662">arm_compute::TensorInfo::clone</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorInfo &gt; clone() const override</div><div class="ttdoc">Provide a clone of the current object of class T. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00282">TensorInfo.cpp:282</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_memory_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">arm_compute::experimental::MemoryInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00096">Types.h:96</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00115">Validate.h:115</a></div></div>
<div class="ttc" id="_memory_helpers_8h_xhtml"><div class="ttname"><a href="_memory_helpers_8h.xhtml">MemoryHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_af5a8385102f8f8dd6c5957eac08b04c2"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af5a8385102f8f8dd6c5957eac08b04c2">arm_compute::ActivationLayerInfo::enabled</a></div><div class="ttdeci">bool enabled() const</div><div class="ttdoc">Check if initialised. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01675">Types.h:1675</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_aa23dcee239e241566abce6dfceac704d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#aa23dcee239e241566abce6dfceac704d">arm_compute::ITensorPack::add_const_tensor</a></div><div class="ttdeci">void add_const_tensor(int id, const ITensor *tensor)</div><div class="ttdoc">Add const tensor to the pack. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00049">ITensorPack.cpp:49</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_memory_info_xhtml_aeb84c062d563cac4ecb427e141b0d7d1"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_memory_info.xhtml#aeb84c062d563cac4ecb427e141b0d7d1">arm_compute::experimental::MemoryInfo::merge</a></div><div class="ttdeci">bool merge(int slot, size_t new_size, size_t new_alignment=0) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00115">Types.h:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">arm_compute::ActivationLayerInfo::ActivationFunction::RELU</a></div><div class="ttdoc">Rectifier (  ) </div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a059864283c54386b639427bc8a01e785">arm_compute::ACL_BIAS</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00074">Types.h:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1_winograd_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_winograd_info.xhtml">arm_compute::WinogradInfo</a></div><div class="ttdoc">Winograd information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02328">Types.h:2328</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml">arm_compute::utils::cast</a></div><div class="ttdef"><b>Definition:</b> <a href="_cast_8h_source.xhtml#l00033">Cast.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00404">ConvolutionLayer.cpp:404</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a15103352886ec83d9c250a7f5d5c630f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">arm_compute::IScheduler::schedule_op</a></div><div class="ttdeci">virtual void schedule_op(ICPPKernel *kernel, const Hints &amp;hints, const Window &amp;window, ITensorPack &amp;tensors)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously. </div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_a74ae0d6e96f38fecd38471431786b870"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a74ae0d6e96f38fecd38471431786b870">arm_compute::cpu::CpuWinogradConv2d::workspace</a></div><div class="ttdeci">experimental::MemoryRequirements workspace() const override</div><div class="ttdoc">Return the memory requirements required by the workspace. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00836">CpuWinogradConv2d.cpp:836</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_ac8aac2100a877e4cef4bae4682507a9b"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#ac8aac2100a877e4cef4bae4682507a9b">arm_compute::cpu::CpuWinogradConv2d::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *biases, ITensorInfo *dst, const PadStrideInfo &amp;conv_info, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo(), bool enable_fast_math=false)</div><div class="ttdoc">Set the input and output tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00339">CpuWinogradConv2d.cpp:339</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_a684a54d1fb1634a348a585c6b5e76df0"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a684a54d1fb1634a348a585c6b5e76df0">arm_compute::cpu::CpuWinogradConv2d::run</a></div><div class="ttdeci">void run(ITensorPack &amp;tensors) override</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00752">CpuWinogradConv2d.cpp:752</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3fea0ce4e6eeee7bf3a511c31b51d44f"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">arm_compute::PadStrideInfo::pad_top</a></div><div class="ttdeci">unsigned int pad_top() const</div><div class="ttdoc">Get the top padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00753">Types.h:753</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">CpuDirectConv2dKernel.cpp:60</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01625">Types.h:1625</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00091">Size2D.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_aa93a4d93eb22ef5445cd567ef22ca67c"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">arm_compute::experimental::MemoryRequirements</a></div><div class="ttdeci">std::vector&lt; MemoryInfo &gt; MemoryRequirements</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a000c70e9839ed364ab7343de880a4d35"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">arm_compute::ITensorPack::get_const_tensor</a></div><div class="ttdeci">const ITensor * get_const_tensor(int id) const</div><div class="ttdoc">Get constant tensor of a given id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00054">ITensorPack.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_a93fe9a4d12bd95e7726266cc94113c24"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a93fe9a4d12bd95e7726266cc94113c24">arm_compute::cpu::CpuWinogradConv2d::CpuWinogradConv2d</a></div><div class="ttdeci">CpuWinogradConv2d()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00313">CpuWinogradConv2d.cpp:313</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_weights_kernel_xhtml_a8b4165c2e7c5c983b930a0f5f4df6acf"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_i_cpu_winograd_conv2d_transform_weights_kernel.xhtml#a8b4165c2e7c5c983b930a0f5f4df6acf">arm_compute::cpu::ICpuWinogradConv2dTransformWeightsKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *weights)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuWinogradConv2dTransfo...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00180">CpuWinogradConv2dKernel.cpp:180</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ad7c283fecb76082a11732869a241d0fc">arm_compute::ACL_INT</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00062">Types.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">const auto output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00408">ConvolutionLayer.cpp:408</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel_xhtml_a6d3d1d4d66f89908455bc5f05e259ce9"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a6d3d1d4d66f89908455bc5f05e259ce9">arm_compute::cpu::CpuWinogradConv2dTransformInputKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuWinogradConv2dTransfo...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00399">CpuWinogradConv2dKernel.cpp:399</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00266">Scale.cpp:266</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler_xhtml_a07a5753fe338458e235f3107133299b6"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">arm_compute::cpu::CpuAuxTensorHandler::get</a></div><div class="ttdeci">ITensor * get()</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_aux_tensor_handler_8h_source.xhtml#l00094">CpuAuxTensorHandler.h:94</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00250">TensorInfo.h:250</a></div></div>
<div class="ttc" id="_cpu_winograd_conv2d_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_winograd_conv2d_kernel_8h.xhtml">CpuWinogradConv2dKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_permute_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">arm_compute::cpu::CpuPermute</a></div><div class="ttdoc">Basic function to run kernels::CpuPermuteKernel. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_8h_source.xhtml#l00034">CpuPermute.h:34</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1misc_1_1_i_cloneable_xhtml_a4d10e5012a872e7f78f2b539b673049d"><div class="ttname"><a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">arm_compute::misc::ICloneable::clone</a></div><div class="ttdeci">virtual std::unique_ptr&lt; T &gt; clone() const =0</div><div class="ttdoc">Provide a clone of the current object of class T. </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">arm_compute::cpu::CpuAuxTensorHandler</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_aux_tensor_handler_8h_source.xhtml#l00039">CpuAuxTensorHandler.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3860caeeaa259d59ccf69c3aea23f549"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">arm_compute::PadStrideInfo::pad_right</a></div><div class="ttdeci">unsigned int pad_right() const</div><div class="ttdoc">Get the right padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00748">Types.h:748</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00669">Types.h:669</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::ITensorInfo::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Element size in bytes calculated as data_size() * num_channels() </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml">arm_compute::cpu::CpuGemm</a></div><div class="ttdoc">Basic function to execute GEMM. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_8h_source.xhtml#l00062">CpuGemm.h:62</a></div></div>
<div class="ttc" id="_n_e_scheduler_8h_xhtml"><div class="ttname"><a href="_n_e_scheduler_8h.xhtml">NEScheduler.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a25e3751f07d4b2771a05d8d01a7f7620"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a25e3751f07d4b2771a05d8d01a7f7620">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape</a></div><div class="ttdeci">TensorShape compute_winograd_filter_transform_shape(const ITensorInfo &amp;input, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Calculate the winograd filter transform shape. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00618">ShapeCalculator.h:618</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="_cpu_winograd_conv2d_8h_xhtml"><div class="ttname"><a href="_cpu_winograd_conv2d_8h.xhtml">CpuWinogradConv2d.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_aff8f5e4223fd2a3020c8b252c8982d3a"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#aff8f5e4223fd2a3020c8b252c8982d3a">arm_compute::cpu::CpuWinogradConv2d::prepare</a></div><div class="ttdeci">void prepare(ITensorPack &amp;constants) override</div><div class="ttdoc">Prepare the function for executing. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00807">CpuWinogradConv2d.cpp:807</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a73aa59d7b088082ec257a1c65edbf1d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">arm_compute::test::validation::k</a></div><div class="ttdeci">const unsigned int k</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00361">GEMMMatrixMultiplyNative.cpp:361</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ad6b64f33be1e66dcf7612483ffb8fd63"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">arm_compute::TensorInfo::init</a></div><div class="ttdeci">void init(Format format)</div><div class="ttdoc">Initialize the tensor info with just a format. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00103">TensorInfo.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00037">Strides.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel_xhtml_a9ede996037a6406aca5217f9ad5e2f28"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a9ede996037a6406aca5217f9ad5e2f28">arm_compute::cpu::CpuWinogradConv2dTransformOutputKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, const WinogradInfo &amp;winograd_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuWinogradConv2dTransfo...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00527">CpuWinogradConv2dKernel.cpp:527</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_a3ee2324ec4d335b54cb7db85bb0505df"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a3ee2324ec4d335b54cb7db85bb0505df">arm_compute::cpu::CpuWinogradConv2d::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo(), bool enable_fast_math=false)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CpuWinogradConv2d. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00642">CpuWinogradConv2d.cpp:642</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00064">ITensorPack.cpp:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_configuration.xhtml">arm_compute::cpu::CpuWinogradConv2dConfiguration</a></div><div class="ttdoc">Kernel to perform Winograd. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_winograd_conv2d_kernel_8h_source.xhtml#l00559">CpuWinogradConv2dKernel.h:559</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a9561091f3566e78ad3aa39259bc4126a"><div class="ttname"><a href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_MSG(...)</div><div class="ttdoc">An error is returned with the given description. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00194">Error.h:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">arm_compute::ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a></div><div class="ttdoc">Upper Bounded Rectifier (  ) </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_activation_xhtml_aa37e2d0b4cd4f835bfa2a2df4a0bdd2c"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">arm_compute::cpu::CpuActivation::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_activation_8cpp_source.xhtml#l00044">CpuActivation.cpp:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a9eeb4390c7aab75d31ccc9ddc8d93975"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a9eeb4390c7aab75d31ccc9ddc8d93975">arm_compute::utils::cast::polymorphic_cast</a></div><div class="ttdeci">Target polymorphic_cast(Source *v)</div><div class="ttdoc">Polymorphic cast between two types. </div><div class="ttdef"><b>Definition:</b> <a href="_cast_8h_source.xhtml#l00047">Cast.h:47</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00090">Size2D.h:90</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::MemoryLifetime::Prepare</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00193">Helpers.inl:193</a></div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">Validate.h:541</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="_cpu_permute_8h_xhtml"><div class="ttname"><a href="_cpu_permute_8h.xhtml">CpuPermute.h</a></div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a324d709e8fb5568ada56ba4999dfb2f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">arm_compute::offset_int_vec</a></div><div class="ttdeci">int offset_int_vec(int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_helpers_8h_source.xhtml#l00038">MemoryHelpers.h:38</a></div></div>
<div class="ttc" id="_function_descriptors_8h_xhtml"><div class="ttname"><a href="_function_descriptors_8h.xhtml">FunctionDescriptors.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool. </div></div>
<div class="ttc" id="_cpu_activation_8h_xhtml"><div class="ttname"><a href="_cpu_activation_8h.xhtml">CpuActivation.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="_asymm_helpers_8h_xhtml"><div class="ttname"><a href="_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ac49df0924d183da42cffc04cf9aba1f8"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">arm_compute::PadStrideInfo::pad_bottom</a></div><div class="ttdeci">unsigned int pad_bottom() const</div><div class="ttdoc">Get the bottom padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00758">Types.h:758</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00234">TensorInfo.h:234</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a7144874ab401f5c4e249a1115dfb5166"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">arm_compute::PadStrideInfo::pad_left</a></div><div class="ttdeci">unsigned int pad_left() const</div><div class="ttdoc">Get the left padding. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00743">Types.h:743</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml">arm_compute::experimental</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00039">ClWorkload.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a6d8078b635739e84400cf8240a2993e7"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">arm_compute::ITensorPack::add_tensor</a></div><div class="ttdeci">void add_tensor(int id, ITensor *tensor)</div><div class="ttdoc">Add tensor to the pack. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00039">ITensorPack.cpp:39</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00082">arm_gemm.hpp:82</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00094">Scheduler.cpp:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_xhtml_a59dee59b4754d976f3f9bf66412b951d"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml#a59dee59b4754d976f3f9bf66412b951d">arm_compute::cpu::CpuWinogradConv2d::~CpuWinogradConv2d</a></div><div class="ttdeci">~CpuWinogradConv2d()</div><div class="ttdoc">Destructor. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_e639157fd988cab7c102f16994a5c7d6.xhtml">operators</a></li><li class="navelem"><a class="el" href="_cpu_winograd_conv2d_8cpp.xhtml">CpuWinogradConv2d.cpp</a></li>
    <li class="footer">Generated on Wed May 18 2022 13:42:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
