<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/elementwise_binary/generic/sve/impl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('elementwise__binary_2generic_2sve_2impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">impl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">src/cpu/kernels/elementwise_binary/generic/sve/impl.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_s_v_e_math_8h_source.xhtml">src/core/NEON/SVEMath.h</a>&quot;</code><br />
<code>#include &lt;arm_sve.h&gt;</code><br />
</div>
<p><a href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2022 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">arm_compute::cpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ade91c9736ad8c92ac036a9fff6d2c526"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType , typename OperatorType &gt; </td></tr>
<tr class="memitem:ade91c9736ad8c92ac036a9fff6d2c526"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade91c9736ad8c92ac036a9fff6d2c526">LoopFuncType</a> = void(*)(svbool_t, const LoopArguments&lt; InputScalarType, OutputScalarType, OperatorType &gt; &amp;)</td></tr>
<tr class="separator:ade91c9736ad8c92ac036a9fff6d2c526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a594793ba5a56a978b6a003bbb935aaa4"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType , typename OperatorType &gt; </td></tr>
<tr class="memitem:a594793ba5a56a978b6a003bbb935aaa4"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a594793ba5a56a978b6a003bbb935aaa4">BroadcastLoopFuncType</a> = void(*)(svbool_t, const BroadcastLoopArguments&lt; InputScalarType, OutputScalarType, OperatorType &gt; &amp;)</td></tr>
<tr class="separator:a594793ba5a56a978b6a003bbb935aaa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae3a7cec9842fc821135b4ca6940de60d"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:ae3a7cec9842fc821135b4ca6940de60d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae3a7cec9842fc821135b4ca6940de60d">arithmetic_op_loop</a> (svbool_t pg, const LoopArguments&lt; InputScalarType, OutputScalarType, ArithmeticOperation &gt; &amp;args)</td></tr>
<tr class="separator:ae3a7cec9842fc821135b4ca6940de60d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa42359a53de4fd004b664624b288a8de"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:aa42359a53de4fd004b664624b288a8de"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa42359a53de4fd004b664624b288a8de">arithmetic_op_broadcast_loop</a> (svbool_t pg, const BroadcastLoopArguments&lt; InputScalarType, OutputScalarType, ArithmeticOperation &gt; &amp;args)</td></tr>
<tr class="separator:aa42359a53de4fd004b664624b288a8de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5234d5e3c0e43a7c290d10541da16b00"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:a5234d5e3c0e43a7c290d10541da16b00"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5234d5e3c0e43a7c290d10541da16b00">comparison_op_loop</a> (svbool_t pg, const LoopArguments&lt; InputScalarType, OutputScalarType, ComparisonOperation &gt; &amp;args)</td></tr>
<tr class="separator:a5234d5e3c0e43a7c290d10541da16b00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5771a19b0abaab2ec7ac2ae9233d9320"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:a5771a19b0abaab2ec7ac2ae9233d9320"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5771a19b0abaab2ec7ac2ae9233d9320">comparison_op_broadcast_loop</a> (svbool_t pg, const BroadcastLoopArguments&lt; InputScalarType, OutputScalarType, ComparisonOperation &gt; &amp;args)</td></tr>
<tr class="separator:a5771a19b0abaab2ec7ac2ae9233d9320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacfa441f6bd70345a4dc145adba2ca3c"><td class="memTemplParams" colspan="2">template&lt;typename InputVectorType , typename OutputVectorType , typename OperatorType , typename InputScalarType  = typename sve_scalar&lt;InputVectorType&gt;::type, typename OutputScalarType  = typename sve_scalar&lt;OutputVectorType&gt;::type&gt; </td></tr>
<tr class="memitem:aacfa441f6bd70345a4dc145adba2ca3c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aacfa441f6bd70345a4dc145adba2ca3c">elementwise_op</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, OperatorType op, LoopFuncType&lt; InputScalarType, OutputScalarType, OperatorType &gt; func, BroadcastLoopFuncType&lt; InputScalarType, OutputScalarType, OperatorType &gt; broadcast_func)</td></tr>
<tr class="separator:aacfa441f6bd70345a4dc145adba2ca3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af09d9893836bbc2f0ac1e6f616a83a3c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType &gt; </td></tr>
<tr class="memitem:af09d9893836bbc2f0ac1e6f616a83a3c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af09d9893836bbc2f0ac1e6f616a83a3c">elementwise_arithmetic_op</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af09d9893836bbc2f0ac1e6f616a83a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e921ab1be2cc7bb250c0e278fb0c799"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7e921ab1be2cc7bb250c0e278fb0c799">elementwise_arithmetic_op&lt; ArithmeticOperation::ADD, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a7e921ab1be2cc7bb250c0e278fb0c799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b36dbe4954ee75aaf974e51da22ecc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77b36dbe4954ee75aaf974e51da22ecc">elementwise_arithmetic_op&lt; ArithmeticOperation::SUB, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a77b36dbe4954ee75aaf974e51da22ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4debea940173bb9a1f111f9ee2510eeb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4debea940173bb9a1f111f9ee2510eeb">elementwise_arithmetic_op&lt; ArithmeticOperation::DIV, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4debea940173bb9a1f111f9ee2510eeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a9041c860e8bea79cdf87d09411d5ad"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2a9041c860e8bea79cdf87d09411d5ad">elementwise_arithmetic_op&lt; ArithmeticOperation::MIN, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2a9041c860e8bea79cdf87d09411d5ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d3c9c40851f984c46a0875868bd7a9a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d3c9c40851f984c46a0875868bd7a9a">elementwise_arithmetic_op&lt; ArithmeticOperation::MAX, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a1d3c9c40851f984c46a0875868bd7a9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d7edd3449ada0d2731839d31715b46"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a06d7edd3449ada0d2731839d31715b46">elementwise_arithmetic_op&lt; ArithmeticOperation::SQUARED_DIFF, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a06d7edd3449ada0d2731839d31715b46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44ec99552f6d3fc72ca94c1065bfce2f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a44ec99552f6d3fc72ca94c1065bfce2f">elementwise_arithmetic_op&lt; ArithmeticOperation::POWER, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a44ec99552f6d3fc72ca94c1065bfce2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1a56c72d51897bbe1256dbadd31f93"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6d1a56c72d51897bbe1256dbadd31f93">elementwise_arithmetic_op&lt; ArithmeticOperation::PRELU, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6d1a56c72d51897bbe1256dbadd31f93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a402b98da4db5e32c8187fe2b3568d6ae"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a402b98da4db5e32c8187fe2b3568d6ae">elementwise_arithmetic_op&lt; ArithmeticOperation::ADD, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a402b98da4db5e32c8187fe2b3568d6ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d1315e080da2e472f9782125a18fee"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a26d1315e080da2e472f9782125a18fee">elementwise_arithmetic_op&lt; ArithmeticOperation::SUB, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a26d1315e080da2e472f9782125a18fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cea9d62523db99e36135af2f00344f4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2cea9d62523db99e36135af2f00344f4">elementwise_arithmetic_op&lt; ArithmeticOperation::DIV, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2cea9d62523db99e36135af2f00344f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af227cdf1c5d53aa34fa3aa116ffb5801"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af227cdf1c5d53aa34fa3aa116ffb5801">elementwise_arithmetic_op&lt; ArithmeticOperation::MIN, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af227cdf1c5d53aa34fa3aa116ffb5801"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b4d4ec6f0e8d8c18ba1eaeeacd7d053"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3b4d4ec6f0e8d8c18ba1eaeeacd7d053">elementwise_arithmetic_op&lt; ArithmeticOperation::MAX, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3b4d4ec6f0e8d8c18ba1eaeeacd7d053"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a986815b2bbe7ad9099abf0feddea1474"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a986815b2bbe7ad9099abf0feddea1474">elementwise_arithmetic_op&lt; ArithmeticOperation::SQUARED_DIFF, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a986815b2bbe7ad9099abf0feddea1474"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2078d8fce6a005b0b1aa3965cdcaa73c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2078d8fce6a005b0b1aa3965cdcaa73c">elementwise_arithmetic_op&lt; ArithmeticOperation::POWER, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2078d8fce6a005b0b1aa3965cdcaa73c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9475454ed5cdf94fb2b4e2be97a8d5b9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9475454ed5cdf94fb2b4e2be97a8d5b9">elementwise_arithmetic_op&lt; ArithmeticOperation::PRELU, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a9475454ed5cdf94fb2b4e2be97a8d5b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7ba94e9229e070909b296d7cdd270f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6d7ba94e9229e070909b296d7cdd270f">elementwise_arithmetic_op&lt; ArithmeticOperation::ADD, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6d7ba94e9229e070909b296d7cdd270f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a411cdb21623ab39a2ff6f14fddd05829"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a411cdb21623ab39a2ff6f14fddd05829">elementwise_arithmetic_op&lt; ArithmeticOperation::SUB, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a411cdb21623ab39a2ff6f14fddd05829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad525aba00d930be5ee38926c81ae80a3"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad525aba00d930be5ee38926c81ae80a3">elementwise_arithmetic_op&lt; ArithmeticOperation::DIV, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad525aba00d930be5ee38926c81ae80a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39366ffd58bd7517b804d1c11c53171"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab39366ffd58bd7517b804d1c11c53171">elementwise_arithmetic_op&lt; ArithmeticOperation::MIN, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ab39366ffd58bd7517b804d1c11c53171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1d8661e9e215eb992faf3912a2dcd0c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af1d8661e9e215eb992faf3912a2dcd0c">elementwise_arithmetic_op&lt; ArithmeticOperation::MAX, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af1d8661e9e215eb992faf3912a2dcd0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bcc770a2544047bb25b01b2eb25b3ed"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1bcc770a2544047bb25b01b2eb25b3ed">elementwise_arithmetic_op&lt; ArithmeticOperation::SQUARED_DIFF, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a1bcc770a2544047bb25b01b2eb25b3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97dcf2484b8bf673e0be2b1be38d9fa3"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a97dcf2484b8bf673e0be2b1be38d9fa3">elementwise_arithmetic_op&lt; ArithmeticOperation::POWER, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a97dcf2484b8bf673e0be2b1be38d9fa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00865d3104440804c65486781f2e5a55"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a00865d3104440804c65486781f2e5a55">elementwise_arithmetic_op&lt; ArithmeticOperation::PRELU, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a00865d3104440804c65486781f2e5a55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4592c4e1c3cf367ca095cfbc6cb02316"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4592c4e1c3cf367ca095cfbc6cb02316">elementwise_arithmetic_op&lt; ArithmeticOperation::ADD, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4592c4e1c3cf367ca095cfbc6cb02316"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58534dc151e624185cb8697e2fa4e5a9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a58534dc151e624185cb8697e2fa4e5a9">elementwise_arithmetic_op&lt; ArithmeticOperation::SUB, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a58534dc151e624185cb8697e2fa4e5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac5d8a562aa2571cba0953615381342f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac5d8a562aa2571cba0953615381342f">elementwise_arithmetic_op&lt; ArithmeticOperation::DIV, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aac5d8a562aa2571cba0953615381342f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2f12bb56e953c1544addfc1f4a9331a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f12bb56e953c1544addfc1f4a9331a">elementwise_arithmetic_op&lt; ArithmeticOperation::MIN, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af2f12bb56e953c1544addfc1f4a9331a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a975f603f7a46d7ca72ed3124dbc70647"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a975f603f7a46d7ca72ed3124dbc70647">elementwise_arithmetic_op&lt; ArithmeticOperation::MAX, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a975f603f7a46d7ca72ed3124dbc70647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af78c608e98af467368c6df48a65f3705"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af78c608e98af467368c6df48a65f3705">elementwise_arithmetic_op&lt; ArithmeticOperation::SQUARED_DIFF, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af78c608e98af467368c6df48a65f3705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d323d3cc59073b8024609046468be5e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4d323d3cc59073b8024609046468be5e">elementwise_arithmetic_op&lt; ArithmeticOperation::POWER, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4d323d3cc59073b8024609046468be5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8fc60e4d4f680eea271b7b7662cca07"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa8fc60e4d4f680eea271b7b7662cca07">elementwise_arithmetic_op&lt; ArithmeticOperation::PRELU, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa8fc60e4d4f680eea271b7b7662cca07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22ae6d7460478da2c0774307c2cc52c9"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:a22ae6d7460478da2c0774307c2cc52c9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a22ae6d7460478da2c0774307c2cc52c9">elementwise_comparison_op</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a22ae6d7460478da2c0774307c2cc52c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21cfedfe137e05e339065019511eb176"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a21cfedfe137e05e339065019511eb176">elementwise_comparison_op&lt; ComparisonOperation::Equal, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a21cfedfe137e05e339065019511eb176"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20b47a754c9585bcf27d83483517ce2b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a20b47a754c9585bcf27d83483517ce2b">elementwise_comparison_op&lt; ComparisonOperation::NotEqual, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a20b47a754c9585bcf27d83483517ce2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1760a906551cc4a8b96188258b0b91c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac1760a906551cc4a8b96188258b0b91c">elementwise_comparison_op&lt; ComparisonOperation::Greater, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac1760a906551cc4a8b96188258b0b91c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad31651ad5403c169dcdf5bab74111efa"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad31651ad5403c169dcdf5bab74111efa">elementwise_comparison_op&lt; ComparisonOperation::GreaterEqual, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad31651ad5403c169dcdf5bab74111efa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48478568ca1fc92cb3ed8938b8c7f0f6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a48478568ca1fc92cb3ed8938b8c7f0f6">elementwise_comparison_op&lt; ComparisonOperation::Less, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a48478568ca1fc92cb3ed8938b8c7f0f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c67b6e2403a23b13b7514b2b4f0bdcb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c67b6e2403a23b13b7514b2b4f0bdcb">elementwise_comparison_op&lt; ComparisonOperation::LessEqual, float32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3c67b6e2403a23b13b7514b2b4f0bdcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac063781f3aa7101f9ffea17baf30d48"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac063781f3aa7101f9ffea17baf30d48">elementwise_comparison_op&lt; ComparisonOperation::Equal, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aac063781f3aa7101f9ffea17baf30d48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1953caae5c9c2c04dff027b968997e10"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1953caae5c9c2c04dff027b968997e10">elementwise_comparison_op&lt; ComparisonOperation::NotEqual, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a1953caae5c9c2c04dff027b968997e10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af592eb6c9fd46505be3412d0807ba1cd"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af592eb6c9fd46505be3412d0807ba1cd">elementwise_comparison_op&lt; ComparisonOperation::Greater, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af592eb6c9fd46505be3412d0807ba1cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbd761b06562ddfd5efd1d42b2710691"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adbd761b06562ddfd5efd1d42b2710691">elementwise_comparison_op&lt; ComparisonOperation::GreaterEqual, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:adbd761b06562ddfd5efd1d42b2710691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a728c36c3d15d2b304f601cd2fe374cee"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a728c36c3d15d2b304f601cd2fe374cee">elementwise_comparison_op&lt; ComparisonOperation::Less, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a728c36c3d15d2b304f601cd2fe374cee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a382f47a00a3ecd466e64d18e96f6bf98"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a382f47a00a3ecd466e64d18e96f6bf98">elementwise_comparison_op&lt; ComparisonOperation::LessEqual, float16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a382f47a00a3ecd466e64d18e96f6bf98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9ab88f190528dc081524370ed1dfdc8"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac9ab88f190528dc081524370ed1dfdc8">elementwise_comparison_op&lt; ComparisonOperation::Equal, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac9ab88f190528dc081524370ed1dfdc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a4335f94e3543cb2e256ca0f7c00704"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a4335f94e3543cb2e256ca0f7c00704">elementwise_comparison_op&lt; ComparisonOperation::NotEqual, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6a4335f94e3543cb2e256ca0f7c00704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f4c29c049663ad0458d766f460f0220"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4f4c29c049663ad0458d766f460f0220">elementwise_comparison_op&lt; ComparisonOperation::Greater, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4f4c29c049663ad0458d766f460f0220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac684eac317568c4b5fa0eb137848037d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac684eac317568c4b5fa0eb137848037d">elementwise_comparison_op&lt; ComparisonOperation::GreaterEqual, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac684eac317568c4b5fa0eb137848037d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ec740ce81662deb36a3d22563e117d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac2ec740ce81662deb36a3d22563e117d">elementwise_comparison_op&lt; ComparisonOperation::Less, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac2ec740ce81662deb36a3d22563e117d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aacf44b5af3004ea1c232ae8cee2499"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3aacf44b5af3004ea1c232ae8cee2499">elementwise_comparison_op&lt; ComparisonOperation::LessEqual, uint8_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3aacf44b5af3004ea1c232ae8cee2499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e0431772774dc9e72803e812664565"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a79e0431772774dc9e72803e812664565">elementwise_comparison_op&lt; ComparisonOperation::Equal, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a79e0431772774dc9e72803e812664565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63931711cf29673515209eff118f4ed3"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a63931711cf29673515209eff118f4ed3">elementwise_comparison_op&lt; ComparisonOperation::NotEqual, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a63931711cf29673515209eff118f4ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad64bc3b93b7c649fdc006d56ac67c22f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad64bc3b93b7c649fdc006d56ac67c22f">elementwise_comparison_op&lt; ComparisonOperation::Greater, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ad64bc3b93b7c649fdc006d56ac67c22f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ab376553aaa64728a043c257c0666e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a46ab376553aaa64728a043c257c0666e">elementwise_comparison_op&lt; ComparisonOperation::GreaterEqual, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a46ab376553aaa64728a043c257c0666e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db40e3f7e4e95dcee3cea6e74d2a3ba"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7db40e3f7e4e95dcee3cea6e74d2a3ba">elementwise_comparison_op&lt; ComparisonOperation::Less, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a7db40e3f7e4e95dcee3cea6e74d2a3ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba57da81ec9e1442226e98f1ee9107c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2ba57da81ec9e1442226e98f1ee9107c">elementwise_comparison_op&lt; ComparisonOperation::LessEqual, int16_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2ba57da81ec9e1442226e98f1ee9107c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae887fd2d6d5bc69a439e136ab974c69b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae887fd2d6d5bc69a439e136ab974c69b">elementwise_comparison_op&lt; ComparisonOperation::Equal, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ae887fd2d6d5bc69a439e136ab974c69b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25380ab7a7f0b859add6244e51831371"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a25380ab7a7f0b859add6244e51831371">elementwise_comparison_op&lt; ComparisonOperation::NotEqual, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a25380ab7a7f0b859add6244e51831371"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf7caf2e794b016fde6408a1c00f1bd5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaf7caf2e794b016fde6408a1c00f1bd5">elementwise_comparison_op&lt; ComparisonOperation::Greater, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aaf7caf2e794b016fde6408a1c00f1bd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd37bb1b5f11717c0306a87b8fb02960"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd37bb1b5f11717c0306a87b8fb02960">elementwise_comparison_op&lt; ComparisonOperation::GreaterEqual, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:abd37bb1b5f11717c0306a87b8fb02960"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99b60517e5966d7150a6a2343f8c3e20"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a99b60517e5966d7150a6a2343f8c3e20">elementwise_comparison_op&lt; ComparisonOperation::Less, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a99b60517e5966d7150a6a2343f8c3e20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03f8d27a55330154a1074cb2999a4d1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa03f8d27a55330154a1074cb2999a4d1">elementwise_comparison_op&lt; ComparisonOperation::LessEqual, int32_t &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa03f8d27a55330154a1074cb2999a4d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memTemplItemLeft" align="right" valign="top">svint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab4c7cdb5bf40eec637c642649299bb9d">elementwise_pow&lt; svint32_t &gt;</a> (svbool_t &amp;pg, const svint32_t &amp;a, const svint32_t &amp;b)</td></tr>
<tr class="separator:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memTemplItemLeft" align="right" valign="top">svint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a87b3d208f9167d096a67f50c55c5b4ab">elementwise_div&lt; svint32_t &gt;</a> (svbool_t &amp;pg, const svint32_t &amp;a, const svint32_t &amp;b)</td></tr>
<tr class="separator:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75678e7da692b3e871e40af6c8ab394e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a75678e7da692b3e871e40af6c8ab394e"><td class="memTemplItemLeft" align="right" valign="top">svint16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a75678e7da692b3e871e40af6c8ab394e">elementwise_div&lt; svint16_t &gt;</a> (svbool_t &amp;pg, const svint16_t &amp;a, const svint16_t &amp;b)</td></tr>
<tr class="separator:a75678e7da692b3e871e40af6c8ab394e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_66520ab4814343cef4d99a57e61c0978.xhtml">elementwise_binary</a></li><li class="navelem"><a class="el" href="dir_8009c81bd03a5456d0f628033db7357f.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_a1dbdf61f57a1531ff253117d44bbf21.xhtml">sve</a></li><li class="navelem"><a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp.xhtml">impl.cpp</a></li>
    <li class="footer">Generated on Wed May 18 2022 13:42:28 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
