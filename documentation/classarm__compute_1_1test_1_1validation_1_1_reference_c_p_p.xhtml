<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ReferenceCPP Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ReferenceCPP Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>C++ reference implementation.  
 <a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_reference_c_p_p_8h_source.xhtml">ReferenceCPP.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ReferenceCPP:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p__coll__graph.svg" width="122" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a600c009e5d449079fed05eb741e2e943"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">integral_image</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a600c009e5d449079fed05eb741e2e943"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the integral image of a tensor.  <a href="#a600c009e5d449079fed05eb741e2e943">More...</a><br /></td></tr>
<tr class="separator:a600c009e5d449079fed05eb741e2e943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15536b2ec56dc51d7dc9ac09bd6a5d76"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">absolute_difference</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a15536b2ec56dc51d7dc9ac09bd6a5d76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the absolute difference between two tensors.  <a href="#a15536b2ec56dc51d7dc9ac09bd6a5d76">More...</a><br /></td></tr>
<tr class="separator:a15536b2ec56dc51d7dc9ac09bd6a5d76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0aa8da1953b7cb44b1b75aec737adb48"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">accumulate</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a0aa8da1953b7cb44b1b75aec737adb48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to accumulate an input tensor into an output tensor.  <a href="#a0aa8da1953b7cb44b1b75aec737adb48">More...</a><br /></td></tr>
<tr class="separator:a0aa8da1953b7cb44b1b75aec737adb48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dec321c30d2695ac8f9c20e8928543a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">accumulate_squared</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint32_t shift)</td></tr>
<tr class="memdesc:a0dec321c30d2695ac8f9c20e8928543a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to accumulate a squared value from an input tensor to an output tensor.  <a href="#a0dec321c30d2695ac8f9c20e8928543a">More...</a><br /></td></tr>
<tr class="separator:a0dec321c30d2695ac8f9c20e8928543a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a110ef9b03fb51be2f000391a300d1a2a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">accumulate_weighted</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, float alpha)</td></tr>
<tr class="memdesc:a110ef9b03fb51be2f000391a300d1a2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to accumulate a weighted value from an input tensor to an output tensor.  <a href="#a110ef9b03fb51be2f000391a300d1a2a">More...</a><br /></td></tr>
<tr class="separator:a110ef9b03fb51be2f000391a300d1a2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae87f25d124d6c66c839ac929702aee11"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">arithmetic_addition</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="memdesc:ae87f25d124d6c66c839ac929702aee11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arithmetic addition of <code>src1</code> and <code>src2</code>.  <a href="#ae87f25d124d6c66c839ac929702aee11">More...</a><br /></td></tr>
<tr class="separator:ae87f25d124d6c66c839ac929702aee11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab09b1a280817a388ed7bed899088ba0b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">arithmetic_subtraction</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="memdesc:ab09b1a280817a388ed7bed899088ba0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arithmetic subtraction of <code>src2</code> from <code>src1</code>.  <a href="#ab09b1a280817a388ed7bed899088ba0b">More...</a><br /></td></tr>
<tr class="separator:ab09b1a280817a388ed7bed899088ba0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf10dbf9017acc5b941ca80879ed3650"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">bitwise_and</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:abf10dbf9017acc5b941ca80879ed3650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the bitwise and between two tensors.  <a href="#abf10dbf9017acc5b941ca80879ed3650">More...</a><br /></td></tr>
<tr class="separator:abf10dbf9017acc5b941ca80879ed3650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9c7e06a7125cdef72a0d0b8cd5c9440"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">bitwise_or</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:ad9c7e06a7125cdef72a0d0b8cd5c9440"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the bitwise or between two tensors.  <a href="#ad9c7e06a7125cdef72a0d0b8cd5c9440">More...</a><br /></td></tr>
<tr class="separator:ad9c7e06a7125cdef72a0d0b8cd5c9440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1292bec01869fc5efd1e39d3496dc3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">bitwise_xor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a6d1292bec01869fc5efd1e39d3496dc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the bitwise xor between two tensors.  <a href="#a6d1292bec01869fc5efd1e39d3496dc3">More...</a><br /></td></tr>
<tr class="separator:a6d1292bec01869fc5efd1e39d3496dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3242afdd5be299ca6260c2dcce581f75"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">bitwise_not</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a3242afdd5be299ca6260c2dcce581f75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute the bitwise not of a tensor.  <a href="#a3242afdd5be299ca6260c2dcce581f75">More...</a><br /></td></tr>
<tr class="separator:a3242afdd5be299ca6260c2dcce581f75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7b729e6ded963c8bf9ead4012f17e02"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">box3x3</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:af7b729e6ded963c8bf9ead4012f17e02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compute 3-by-3 box filtered result tensor.  <a href="#af7b729e6ded963c8bf9ead4012f17e02">More...</a><br /></td></tr>
<tr class="separator:af7b729e6ded963c8bf9ead4012f17e02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1d31eb9d1ad6273e35c0b012c9b2cd1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">depth_convert</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="memdesc:ae1d31eb9d1ad6273e35c0b012c9b2cd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Depth conversion from <code>src</code> to <code>dst</code>.  <a href="#ae1d31eb9d1ad6273e35c0b012c9b2cd1">More...</a><br /></td></tr>
<tr class="separator:ae1d31eb9d1ad6273e35c0b012c9b2cd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99422cae0054f3a9d4b6eb87402d8f11"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">gemm</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src3, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, float alpha, float beta)</td></tr>
<tr class="memdesc:a99422cae0054f3a9d4b6eb87402d8f11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute GEMM function.  <a href="#a99422cae0054f3a9d4b6eb87402d8f11">More...</a><br /></td></tr>
<tr class="separator:a99422cae0054f3a9d4b6eb87402d8f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2265d2e4d72f0095de962e5d9c5f9dc2"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:a2265d2e4d72f0095de962e5d9c5f9dc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element-wise multiplication of <code>src1</code>, <code>src2</code> and <code>scale</code>.  <a href="#a2265d2e4d72f0095de962e5d9c5f9dc2">More...</a><br /></td></tr>
<tr class="separator:a2265d2e4d72f0095de962e5d9c5f9dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa07ff8d0956d3fb1a0ff2223d8ab7a93"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">fixed_point_pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:aa07ff8d0956d3fb1a0ff2223d8ab7a93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fixed-point Pixel-wise multiplication of <code>src1</code> by <code>src2</code>.  <a href="#aa07ff8d0956d3fb1a0ff2223d8ab7a93">More...</a><br /></td></tr>
<tr class="separator:aa07ff8d0956d3fb1a0ff2223d8ab7a93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dbabc9ed277607491fa75e1b8096132"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">threshold</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint8_t threshold, uint8_t false_value, uint8_t true_value, <a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</td></tr>
<tr class="memdesc:a0dbabc9ed277607491fa75e1b8096132"><td class="mdescLeft">&#160;</td><td class="mdescRight">Threshold of<code>src</code> to <code>dst</code>.  <a href="#a0dbabc9ed277607491fa75e1b8096132">More...</a><br /></td></tr>
<tr class="separator:a0dbabc9ed277607491fa75e1b8096132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c0f65e0e83ad40fe5ec3abfd16d7b9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">activation_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;input, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;output, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="memdesc:a56c0f65e0e83ad40fe5ec3abfd16d7b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activation layer of <code>src</code> base on information from <code>act_info</code>.  <a href="#a56c0f65e0e83ad40fe5ec3abfd16d7b9">More...</a><br /></td></tr>
<tr class="separator:a56c0f65e0e83ad40fe5ec3abfd16d7b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9fec1f76f1b3b4cae3b7feb19e397c3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">batch_normalization_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;mean, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;var, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;beta, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;gamma, float epsilon, int fixed_point_position=0)</td></tr>
<tr class="memdesc:ac9fec1f76f1b3b4cae3b7feb19e397c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Batch Normalization of <code>src</code> based on the information from <code>norm_info</code>.  <a href="#ac9fec1f76f1b3b4cae3b7feb19e397c3">More...</a><br /></td></tr>
<tr class="separator:ac9fec1f76f1b3b4cae3b7feb19e397c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28b261146dafd6effae75dfbfe411b29"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">convolution_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="memdesc:a28b261146dafd6effae75dfbfe411b29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution layer function.  <a href="#a28b261146dafd6effae75dfbfe411b29">More...</a><br /></td></tr>
<tr class="separator:a28b261146dafd6effae75dfbfe411b29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69eb15dea2a0579d8c33e2b9e07a2fb1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">fully_connected_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:a69eb15dea2a0579d8c33e2b9e07a2fb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fully connected layer function.  <a href="#a69eb15dea2a0579d8c33e2b9e07a2fb1">More...</a><br /></td></tr>
<tr class="separator:a69eb15dea2a0579d8c33e2b9e07a2fb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7552cc54ae47676e4ea4842233d79587"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">normalization_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</td></tr>
<tr class="memdesc:a7552cc54ae47676e4ea4842233d79587"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalization of <code>src</code> based on the information from <code>norm_info</code>.  <a href="#a7552cc54ae47676e4ea4842233d79587">More...</a><br /></td></tr>
<tr class="separator:a7552cc54ae47676e4ea4842233d79587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae158c03947db37d706260574866586e8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">pooling_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, int fixed_point_position=0)</td></tr>
<tr class="memdesc:ae158c03947db37d706260574866586e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pooling layer of <code>src</code> based on the information from <code>norm_info</code>.  <a href="#ae158c03947db37d706260574866586e8">More...</a><br /></td></tr>
<tr class="separator:ae158c03947db37d706260574866586e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3379b88d6d53ab3c1d89b3df4f0dd4a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">softmax_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</td></tr>
<tr class="memdesc:aa3379b88d6d53ab3c1d89b3df4f0dd4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Softmax Layer of <code>src</code>.  <a href="#aa3379b88d6d53ab3c1d89b3df4f0dd4a">More...</a><br /></td></tr>
<tr class="separator:aa3379b88d6d53ab3c1d89b3df4f0dd4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa72a69edbdb11aaa12f83881e038f1d5"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">fixed_point_operation</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op)</td></tr>
<tr class="memdesc:aa72a69edbdb11aaa12f83881e038f1d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fixed point operations of <code>src</code>.  <a href="#aa72a69edbdb11aaa12f83881e038f1d5">More...</a><br /></td></tr>
<tr class="separator:aa72a69edbdb11aaa12f83881e038f1d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml">Reference</a></td></tr>
<tr class="memitem:a3d1df250d5d15f22e84e7282bd471405 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a3d1df250d5d15f22e84e7282bd471405">compute_reference_integral_image</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a3d1df250d5d15f22e84e7282bd471405 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference integral image.  <a href="#a3d1df250d5d15f22e84e7282bd471405">More...</a><br /></td></tr>
<tr class="separator:a3d1df250d5d15f22e84e7282bd471405 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3248d61de6fcfdd30f404267a1e4083 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ad3248d61de6fcfdd30f404267a1e4083">compute_reference_absolute_difference</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in0, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out)</td></tr>
<tr class="memdesc:ad3248d61de6fcfdd30f404267a1e4083 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference absolute difference.  <a href="#ad3248d61de6fcfdd30f404267a1e4083">More...</a><br /></td></tr>
<tr class="separator:ad3248d61de6fcfdd30f404267a1e4083 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a205f1eb20b9c13265aff28de739c3c10 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a205f1eb20b9c13265aff28de739c3c10">compute_reference_accumulate</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a205f1eb20b9c13265aff28de739c3c10 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference accumulate.  <a href="#a205f1eb20b9c13265aff28de739c3c10">More...</a><br /></td></tr>
<tr class="separator:a205f1eb20b9c13265aff28de739c3c10 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ec8f59456aaa8ffd8d09eb3919bd67f inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a3ec8f59456aaa8ffd8d09eb3919bd67f">compute_reference_accumulate_squared</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, uint32_t shift)</td></tr>
<tr class="memdesc:a3ec8f59456aaa8ffd8d09eb3919bd67f inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference accumulate.  <a href="#a3ec8f59456aaa8ffd8d09eb3919bd67f">More...</a><br /></td></tr>
<tr class="separator:a3ec8f59456aaa8ffd8d09eb3919bd67f inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf28f4a955e131ec74a3baa8bc5ade1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#aacf28f4a955e131ec74a3baa8bc5ade1">compute_reference_accumulate_weighted</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, float alpha)</td></tr>
<tr class="memdesc:aacf28f4a955e131ec74a3baa8bc5ade1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference accumulate.  <a href="#aacf28f4a955e131ec74a3baa8bc5ade1">More...</a><br /></td></tr>
<tr class="separator:aacf28f4a955e131ec74a3baa8bc5ade1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6924a9d2a83fbc410748d8a06fbca51 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ae6924a9d2a83fbc410748d8a06fbca51">compute_reference_arithmetic_addition</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in0, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="memdesc:ae6924a9d2a83fbc410748d8a06fbca51 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference arithmetic addition.  <a href="#ae6924a9d2a83fbc410748d8a06fbca51">More...</a><br /></td></tr>
<tr class="separator:ae6924a9d2a83fbc410748d8a06fbca51 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae46c0e47feca74d5aef1ede0c433fcf1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ae46c0e47feca74d5aef1ede0c433fcf1">compute_reference_arithmetic_subtraction</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in0, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="memdesc:ae46c0e47feca74d5aef1ede0c433fcf1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference arithmetic subtraction.  <a href="#ae46c0e47feca74d5aef1ede0c433fcf1">More...</a><br /></td></tr>
<tr class="separator:ae46c0e47feca74d5aef1ede0c433fcf1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2bf16b19af4bdfd5abee6d05792c320 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ad2bf16b19af4bdfd5abee6d05792c320">compute_reference_bitwise_and</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:ad2bf16b19af4bdfd5abee6d05792c320 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference bitwise and.  <a href="#ad2bf16b19af4bdfd5abee6d05792c320">More...</a><br /></td></tr>
<tr class="separator:ad2bf16b19af4bdfd5abee6d05792c320 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a541f369d7d288cc118bb058d51e29782 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a541f369d7d288cc118bb058d51e29782">compute_reference_bitwise_or</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a541f369d7d288cc118bb058d51e29782 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference bitwise or.  <a href="#a541f369d7d288cc118bb058d51e29782">More...</a><br /></td></tr>
<tr class="separator:a541f369d7d288cc118bb058d51e29782 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdd81b30b87766f79dc62a575b0beebc inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#afdd81b30b87766f79dc62a575b0beebc">compute_reference_bitwise_xor</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:afdd81b30b87766f79dc62a575b0beebc inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference bitwise xor.  <a href="#afdd81b30b87766f79dc62a575b0beebc">More...</a><br /></td></tr>
<tr class="separator:afdd81b30b87766f79dc62a575b0beebc inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd4179146d726e3fa6e196fa23f3c5d4 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#abd4179146d726e3fa6e196fa23f3c5d4">compute_reference_bitwise_not</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:abd4179146d726e3fa6e196fa23f3c5d4 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference bitwise not.  <a href="#abd4179146d726e3fa6e196fa23f3c5d4">More...</a><br /></td></tr>
<tr class="separator:abd4179146d726e3fa6e196fa23f3c5d4 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7d18cb004ae29dfea24ec952e6faa78 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ac7d18cb004ae29dfea24ec952e6faa78">compute_reference_box3x3</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:ac7d18cb004ae29dfea24ec952e6faa78 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference 3-by-3 box filter.  <a href="#ac7d18cb004ae29dfea24ec952e6faa78">More...</a><br /></td></tr>
<tr class="separator:ac7d18cb004ae29dfea24ec952e6faa78 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2927e68b74c690e2b7c2780fd32ee5b inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ae2927e68b74c690e2b7c2780fd32ee5b">compute_reference_depth_convert</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift, uint32_t fixed_point_position)</td></tr>
<tr class="memdesc:ae2927e68b74c690e2b7c2780fd32ee5b inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference depth convert.  <a href="#ae2927e68b74c690e2b7c2780fd32ee5b">More...</a><br /></td></tr>
<tr class="separator:ae2927e68b74c690e2b7c2780fd32ee5b inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c09c503cb3e94e4475502f4b005a69 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ab3c09c503cb3e94e4475502f4b005a69">compute_reference_gemm</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;src_shape1, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;src_shape2, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;src_shape3, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape, float alpha, float beta, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, int fixed_point_position=0)</td></tr>
<tr class="memdesc:ab3c09c503cb3e94e4475502f4b005a69 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute matrix multiply function.  <a href="#ab3c09c503cb3e94e4475502f4b005a69">More...</a><br /></td></tr>
<tr class="separator:ab3c09c503cb3e94e4475502f4b005a69 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94a052a7a342ed76c16bedc97befa87 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ab94a052a7a342ed76c16bedc97befa87">compute_reference_pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in0, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:ab94a052a7a342ed76c16bedc97befa87 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference pixel-wise multiplication.  <a href="#ab94a052a7a342ed76c16bedc97befa87">More...</a><br /></td></tr>
<tr class="separator:ab94a052a7a342ed76c16bedc97befa87 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa783291c0d23cb22ffc494298eef307 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#afa783291c0d23cb22ffc494298eef307">compute_reference_fixed_point_pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in0, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, float scale, int fixed_point_position, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="memdesc:afa783291c0d23cb22ffc494298eef307 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference pixel-wise multiplication.  <a href="#afa783291c0d23cb22ffc494298eef307">More...</a><br /></td></tr>
<tr class="separator:afa783291c0d23cb22ffc494298eef307 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac58967d13dc282d5ebf11f54e5605b8e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ac58967d13dc282d5ebf11f54e5605b8e">compute_reference_threshold</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, uint8_t threshold, uint8_t false_value, uint8_t true_value, <a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</td></tr>
<tr class="memdesc:ac58967d13dc282d5ebf11f54e5605b8e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference threshold.  <a href="#ac58967d13dc282d5ebf11f54e5605b8e">More...</a><br /></td></tr>
<tr class="separator:ac58967d13dc282d5ebf11f54e5605b8e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c6cd80f8097cee0613209b6181bd63c inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a0c6cd80f8097cee0613209b6181bd63c">compute_reference_activation_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info, int fixed_point_position=0)</td></tr>
<tr class="memdesc:a0c6cd80f8097cee0613209b6181bd63c inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference activation layer.  <a href="#a0c6cd80f8097cee0613209b6181bd63c">More...</a><br /></td></tr>
<tr class="separator:a0c6cd80f8097cee0613209b6181bd63c inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e1a0e84b89f37a11b2efda846e8abe inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a29e1a0e84b89f37a11b2efda846e8abe">compute_reference_batch_normalization_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape0, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, float epsilon, int fixed_point_position=0)</td></tr>
<tr class="memdesc:a29e1a0e84b89f37a11b2efda846e8abe inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference batch normalization layer.  <a href="#a29e1a0e84b89f37a11b2efda846e8abe">More...</a><br /></td></tr>
<tr class="separator:a29e1a0e84b89f37a11b2efda846e8abe inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f299846fadd4b523b875efa44300af1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a3f299846fadd4b523b875efa44300af1">compute_reference_convolution_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;bias_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;output_shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, int fixed_point_position)</td></tr>
<tr class="memdesc:a3f299846fadd4b523b875efa44300af1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference pixel-wise multiplication.  <a href="#a3f299846fadd4b523b875efa44300af1">More...</a><br /></td></tr>
<tr class="separator:a3f299846fadd4b523b875efa44300af1 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf41e10f4ca31603d86ad230c2334a7 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#afdf41e10f4ca31603d86ad230c2334a7">compute_reference_fully_connected_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;input_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;bias_shape, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;output_shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, bool transpose_weights, int fixed_point_position)</td></tr>
<tr class="memdesc:afdf41e10f4ca31603d86ad230c2334a7 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference for fully connected layer function.  <a href="#afdf41e10f4ca31603d86ad230c2334a7">More...</a><br /></td></tr>
<tr class="separator:afdf41e10f4ca31603d86ad230c2334a7 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5608631245f2553eff505acf4c18b5c8 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a5608631245f2553eff505acf4c18b5c8">compute_reference_normalization_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info, int fixed_point_position=0)</td></tr>
<tr class="memdesc:a5608631245f2553eff505acf4c18b5c8 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference normalization layer.  <a href="#a5608631245f2553eff505acf4c18b5c8">More...</a><br /></td></tr>
<tr class="separator:a5608631245f2553eff505acf4c18b5c8 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab40feee52f91c245e51c1ad9f6bf0b43 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ab40feee52f91c245e51c1ad9f6bf0b43">compute_reference_pooling_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape_in, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape_out, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, <a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, int fixed_point_position=0)</td></tr>
<tr class="memdesc:ab40feee52f91c245e51c1ad9f6bf0b43 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference pooling layer.  <a href="#ab40feee52f91c245e51c1ad9f6bf0b43">More...</a><br /></td></tr>
<tr class="separator:ab40feee52f91c245e51c1ad9f6bf0b43 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae50cb3ee700120b699894d9a3ae9405e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#ae50cb3ee700120b699894d9a3ae9405e">compute_reference_softmax_layer</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, int fixed_point_position=0)</td></tr>
<tr class="memdesc:ae50cb3ee700120b699894d9a3ae9405e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference softmax layer.  <a href="#ae50cb3ee700120b699894d9a3ae9405e">More...</a><br /></td></tr>
<tr class="separator:ae50cb3ee700120b699894d9a3ae9405e inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09919b3cef9a55a68c13f44ec381c368 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#a09919b3cef9a55a68c13f44ec381c368">compute_reference_fixed_point_operation</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op, int fixed_point_position)</td></tr>
<tr class="memdesc:a09919b3cef9a55a68c13f44ec381c368 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute reference fixed point operation.  <a href="#a09919b3cef9a55a68c13f44ec381c368">More...</a><br /></td></tr>
<tr class="separator:a09919b3cef9a55a68c13f44ec381c368 inherit pub_static_methods_classarm__compute_1_1test_1_1validation_1_1_reference"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>C++ reference implementation. </p>

<p>Definition at line <a class="el" href="_reference_c_p_p_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_reference_c_p_p_8h_source.xhtml">ReferenceCPP.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a15536b2ec56dc51d7dc9ac09bd6a5d76"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void absolute_difference </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the absolute difference between two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">absolute_difference_visitor</a>(), s1, s2, d);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">arm_compute::test::validation::tensor_visitors::absolute_difference_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00044">TensorVisitors.h:44</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0aa8da1953b7cb44b1b75aec737adb48"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void accumulate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to accumulate an input tensor into an output tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_operations_8h_source.xhtml#l00283">arm_compute::test::validation::tensor_operations::accumulate()</a>, <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    Tensor&lt;int16_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">tensor_operations::accumulate</a>(s, d);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_af995ccfae7ea6d83f47d1212c3c7af28"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">arm_compute::test::validation::tensor_operations::accumulate</a></div><div class="ttdeci">void accumulate(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00283">TensorOperations.h:283</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0dec321c30d2695ac8f9c20e8928543a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void accumulate_squared </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to accumulate a squared value from an input tensor to an output tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift</td><td>A uint32_t value within the range of [0, 15] </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_operations_8h_source.xhtml#l00296">arm_compute::test::validation::tensor_operations::accumulate_squared()</a>, <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    Tensor&lt;int16_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">tensor_operations::accumulate_squared</a>(s, d, shift);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a53a4d082f0a3ae1523d728a4f1a5f22b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">arm_compute::test::validation::tensor_operations::accumulate_squared</a></div><div class="ttdeci">void accumulate_squared(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00296">TensorOperations.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a110ef9b03fb51be2f000391a300d1a2a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void accumulate_weighted </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to accumulate a weighted value from an input tensor to an output tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>A float value within the range of [0, 1] </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_operations_8h_source.xhtml#l00314">arm_compute::test::validation::tensor_operations::accumulate_weighted()</a>, <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">tensor_operations::accumulate_weighted</a>(s, d, alpha);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_afabf1ef7194a0156c90b3393e2a90cfa"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">arm_compute::test::validation::tensor_operations::accumulate_weighted</a></div><div class="ttdeci">void accumulate_weighted(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00314">TensorOperations.h:314</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a56c0f65e0e83ad40fe5ec3abfd16d7b9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void activation_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Activation layer of <code>src</code> base on information from <code>act_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">act_info</td><td>Activation layer information. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00208">208</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(input);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(output);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    boost::apply_visitor(tensor_visitors::activation_layer_visitor(s, act_info), d);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae87f25d124d6c66c839ac929702aee11"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arithmetic_addition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Arithmetic addition of <code>src1</code> and <code>src2</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convert_policy</td><td>Overflow policy. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arithmetic_addition_visitor</a>(convert_policy), s1, s2, d);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_addition_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00054">TensorVisitors.h:54</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab09b1a280817a388ed7bed899088ba0b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arithmetic_subtraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Arithmetic subtraction of <code>src2</code> from <code>src1</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convert_policy</td><td>Overflow policy. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00104">104</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arithmetic_subtraction_visitor</a>(convert_policy), s1, s2, d);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_subtraction_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00072">TensorVisitors.h:72</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac9fec1f76f1b3b4cae3b7feb19e397c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void batch_normalization_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Batch Normalization of <code>src</code> based on the information from <code>norm_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">mean</td><td>Mean vector tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">var</td><td>Var vector tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">beta</td><td>Beta vector tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">gamma</td><td>Gamma vector tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>Small value to avoid division with zero. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>Fixed point position. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00216">216</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> m = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(mean);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> v = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(var);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(beta);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> g = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(gamma);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    boost::apply_visitor(tensor_visitors::batch_normalization_layer_visitor(s, m, v, b, g, epsilon, fixed_point_position), d);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abf10dbf9017acc5b941ca80879ed3650"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void bitwise_and </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the bitwise and between two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">113</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00357">arm_compute::test::validation::tensor_operations::bitwise_and()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s1(src1.shape(), src1.data_type(), src1.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.data()));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s2(src2.shape(), src2.data_type(), src2.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.data()));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">tensor_operations::bitwise_and</a>(s1, s2, d);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a6e865331e6ad22ab8c6a47c836068eae"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">arm_compute::test::validation::tensor_operations::bitwise_and</a></div><div class="ttdeci">void bitwise_and(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00357">TensorOperations.h:357</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3242afdd5be299ca6260c2dcce581f75"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void bitwise_not </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the bitwise not of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00387">arm_compute::test::validation::tensor_operations::bitwise_not()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">tensor_operations::bitwise_not</a>(s, d);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a9629af50ada3b5dca5f23a639f6c8045"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">arm_compute::test::validation::tensor_operations::bitwise_not</a></div><div class="ttdeci">void bitwise_not(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00387">TensorOperations.h:387</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad9c7e06a7125cdef72a0d0b8cd5c9440"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void bitwise_or </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the bitwise or between two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">123</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00367">arm_compute::test::validation::tensor_operations::bitwise_or()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s1(src1.shape(), src1.data_type(), src1.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.data()));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s2(src2.shape(), src2.data_type(), src2.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.data()));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">tensor_operations::bitwise_or</a>(s1, s2, d);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a524e781138b8143ce949f16aca47632d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">arm_compute::test::validation::tensor_operations::bitwise_or</a></div><div class="ttdeci">void bitwise_or(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00367">TensorOperations.h:367</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6d1292bec01869fc5efd1e39d3496dc3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void bitwise_xor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the bitwise xor between two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00377">arm_compute::test::validation::tensor_operations::bitwise_xor()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s1(src1.shape(), src1.data_type(), src1.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.data()));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s2(src2.shape(), src2.data_type(), src2.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.data()));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">tensor_operations::bitwise_xor</a>(s1, s2, d);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aeef005a6d652352fd78acf84fd8fdb0e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">arm_compute::test::validation::tensor_operations::bitwise_xor</a></div><div class="ttdeci">void bitwise_xor(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00377">TensorOperations.h:377</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af7b729e6ded963c8bf9ead4012f17e02"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void box3x3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute 3-by-3 box filtered result tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00397">arm_compute::test::validation::tensor_operations::box3x3()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">tensor_operations::box3x3</a>(s, d);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a934ba47d23b89b5868c6fad054e5a59d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">arm_compute::test::validation::tensor_operations::box3x3</a></div><div class="ttdeci">void box3x3(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00397">TensorOperations.h:397</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a28b261146dafd6effae75dfbfe411b29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void convolution_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convolution layer function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>Bias tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Pads and strides information for the convolution layer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00229">229</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> w = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(weights);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(bias);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    boost::apply_visitor(tensor_visitors::convolution_layer_visitor(s, w, b, conv_info), d);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae1d31eb9d1ad6273e35c0b012c9b2cd1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void depth_convert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Depth conversion from <code>src</code> to <code>dst</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Overflow policy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift</td><td>Value for down/up conversions. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    boost::apply_visitor(tensor_visitors::depth_convert_visitor(policy, shift), s, d);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa72a69edbdb11aaa12f83881e038f1d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fixed_point_operation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fixed point operations of <code>src</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Fixed point operation to perform. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00273">273</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    boost::apply_visitor(tensor_visitors::fixed_point_operation_visitor(s, op), d);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa07ff8d0956d3fb1a0ff2223d8ab7a93"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fixed_point_pixel_wise_multiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fixed-point Pixel-wise multiplication of <code>src1</code> by <code>src2</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>A non-negative float multiplied to each product. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convert_policy</td><td>Overflow policy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00190">190</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    boost::apply_visitor(tensor_visitors::fixed_point_pixel_wise_multiplication_visitor(s1, s2, scale, convert_policy, rounding_policy), d);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a69eb15dea2a0579d8c33e2b9e07a2fb1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fully_connected_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fully connected layer function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>Bias tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00239">239</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> w = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(weights);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(bias);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    boost::apply_visitor(tensor_visitors::fully_connected_layer_visitor(s, w, b), d);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a99422cae0054f3a9d4b6eb87402d8f11"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void gemm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute GEMM function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second input tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src3</td><td>Third input tensor </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Output tensr </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of the third matrix </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s3 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src3);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    boost::apply_visitor(tensor_visitors::gemm_visitor(s1, s2, s3, alpha, beta), d);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a600c009e5d449079fed05eb741e2e943"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void integral_image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to compute the integral image of a tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_tensor_operations_8h_source.xhtml#l00225">arm_compute::test::validation::tensor_operations::integral_image()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    Tensor&lt;uint32_t&gt;      d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">tensor_operations::integral_image</a>(s, d);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a068d9be2e13dddcb8c8ab9f91e934a75"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">arm_compute::test::validation::tensor_operations::integral_image</a></div><div class="ttdeci">void integral_image(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00225">TensorOperations.h:225</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7552cc54ae47676e4ea4842233d79587"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void normalization_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>norm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalization of <code>src</code> based on the information from <code>norm_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_info</td><td>Normalization Layer information. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00249">249</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    boost::apply_visitor(tensor_visitors::normalization_layer_visitor(s, norm_info), d);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2265d2e4d72f0095de962e5d9c5f9dc2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pixel_wise_multiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element-wise multiplication of <code>src1</code>, <code>src2</code> and <code>scale</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src1</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">src2</td><td>Second tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>A non-negative float multiplied to each product. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">convert_policy</td><td>Overflow policy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">pixel_wise_multiplication_visitor</a>(scale, convert_policy, rounding_policy), s1, s2, d);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">arm_compute::test::validation::tensor_visitors::pixel_wise_multiplication_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00132">TensorVisitors.h:132</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae158c03947db37d706260574866586e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pooling_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pooling layer of <code>src</code> based on the information from <code>norm_info</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Pooling Layer information. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>Fixed point position. (Optional) </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00257">257</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    boost::apply_visitor(tensor_visitors::pooling_layer_visitor(s, pool_info, fixed_point_position), d);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa3379b88d6d53ab3c1d89b3df4f0dd4a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void softmax_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Softmax Layer of <code>src</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Input tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00265">265</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory::get_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    boost::apply_visitor(tensor_visitors::softmax_layer_visitor(s), d);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0dbabc9ed277607491fa75e1b8096132"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void threshold </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>threshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>false_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>true_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>upper</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Threshold of<code>src</code> to <code>dst</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>First tensor. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">dst</td><td>Result tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">threshold</td><td>Threshold. When the threhold type is RANGE, this is used as the lower threshold. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">false_value</td><td>value to set when the condition is not respected. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">true_value</td><td>value to set when the condition is respected. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type</td><td>Thresholding type. Either RANGE or BINARY. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper</td><td>Upper threshold. Only used when the thresholding type is RANGE. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00199">199</a> of file <a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor::fixed_point_position()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>, <a class="el" href="_tensor_visitors_8h_source.xhtml#l00181">arm_compute::test::validation::tensor_visitors::threshold_operation()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>
<div class="fragment"><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> Tensor&lt;uint8_t&gt; s(src.shape(), src.data_type(), src.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.data()));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    Tensor&lt;uint8_t&gt;       d(dst.shape(), dst.data_type(), dst.fixed_point_position(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.data()));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">threshold_operation</a>(s, d, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">threshold</a>, false_value, true_value, type, upper);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors_xhtml_aea53d6aea9b7f639b49ace8a16f267f8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">arm_compute::test::validation::tensor_visitors::threshold_operation</a></div><div class="ttdeci">void threshold_operation(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00181">TensorVisitors.h:181</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0dbabc9ed277607491fa75e1b8096132"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">arm_compute::test::validation::ReferenceCPP::threshold</a></div><div class="ttdeci">static void threshold(const RawTensor &amp;src, RawTensor &amp;dst, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdoc">Threshold ofsrc to dst. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP.cpp:199</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/validation/<a class="el" href="_reference_c_p_p_8h_source.xhtml">ReferenceCPP.h</a></li>
<li>tests/validation/<a class="el" href="_reference_c_p_p_8cpp_source.xhtml">ReferenceCPP.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">validation</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">ReferenceCPP</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
