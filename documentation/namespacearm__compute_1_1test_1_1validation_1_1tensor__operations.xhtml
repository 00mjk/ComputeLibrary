<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::test::validation::tensor_operations Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::test::validation::tensor_operations Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a068d9be2e13dddcb8c8ab9f91e934a75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">integral_image</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint32_t &gt; &amp;out)</td></tr>
<tr class="separator:a068d9be2e13dddcb8c8ab9f91e934a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab508d3cd11ab140d782c716debfcb25f"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:ab508d3cd11ab140d782c716debfcb25f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">absolute_difference</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;out)</td></tr>
<tr class="separator:ab508d3cd11ab140d782c716debfcb25f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">accumulate</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;out)</td></tr>
<tr class="separator:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">accumulate_squared</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;out, uint32_t shift)</td></tr>
<tr class="separator:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">accumulate_weighted</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, float alpha)</td></tr>
<tr class="separator:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">arithmetic_addition</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="separator:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135ce9546985c784175156c32fa014af"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:a135ce9546985c784175156c32fa014af"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">arithmetic_subtraction</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</td></tr>
<tr class="separator:a135ce9546985c784175156c32fa014af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e865331e6ad22ab8c6a47c836068eae"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a6e865331e6ad22ab8c6a47c836068eae"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">bitwise_and</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a6e865331e6ad22ab8c6a47c836068eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a524e781138b8143ce949f16aca47632d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a524e781138b8143ce949f16aca47632d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">bitwise_or</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a524e781138b8143ce949f16aca47632d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">bitwise_xor</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9629af50ada3b5dca5f23a639f6c8045"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a9629af50ada3b5dca5f23a639f6c8045"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">bitwise_not</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a9629af50ada3b5dca5f23a639f6c8045"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a934ba47d23b89b5868c6fad054e5a59d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a934ba47d23b89b5868c6fad054e5a59d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">box3x3</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a934ba47d23b89b5868c6fad054e5a59d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4485bbf8646087afcb6d724e613da68f"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a4485bbf8646087afcb6d724e613da68f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">depth_convert</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a4485bbf8646087afcb6d724e613da68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963f96bc7caff7e733ba2bfed26e453b"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a963f96bc7caff7e733ba2bfed26e453b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a963f96bc7caff7e733ba2bfed26e453b">depth_convert&lt; int8_t, float &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int8_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; float &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a963f96bc7caff7e733ba2bfed26e453b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531358310cc70fdd4f59637db7ce1b3e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a531358310cc70fdd4f59637db7ce1b3e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a531358310cc70fdd4f59637db7ce1b3e">depth_convert&lt; float, int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; float &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int8_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a531358310cc70fdd4f59637db7ce1b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a09a0ab9b11ba12a3d4230bb07198a06d">depth_convert&lt; uint8_t, uint16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e91470444d96ed45eae0bac5b7c6042"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a0e91470444d96ed45eae0bac5b7c6042"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0e91470444d96ed45eae0bac5b7c6042">depth_convert&lt; uint8_t, int16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a0e91470444d96ed45eae0bac5b7c6042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6b46cf712c2bf1e96eef20c6b1b816f5">depth_convert&lt; uint8_t, int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int32_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a34b3b2d8ce85841a51f517bf38d3d3b3">depth_convert&lt; uint16_t, uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79219b20a374800b7da7222a70db89b2"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a79219b20a374800b7da7222a70db89b2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a79219b20a374800b7da7222a70db89b2">depth_convert&lt; uint16_t, uint32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint32_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a79219b20a374800b7da7222a70db89b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a447ea0d3749644c6eb970d78ff7e11db"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a447ea0d3749644c6eb970d78ff7e11db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a447ea0d3749644c6eb970d78ff7e11db">depth_convert&lt; int16_t, uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:a447ea0d3749644c6eb970d78ff7e11db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0098bc6f892a87934f223210dbfd6a9"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ac0098bc6f892a87934f223210dbfd6a9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac0098bc6f892a87934f223210dbfd6a9">depth_convert&lt; int16_t, int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int32_t &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</td></tr>
<tr class="separator:ac0098bc6f892a87934f223210dbfd6a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1385f622ea543d14bdd997a2bcebcf"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:aca1385f622ea543d14bdd997a2bcebcf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">gemm</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in2, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in3, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, float alpha, float beta)</td></tr>
<tr class="separator:aca1385f622ea543d14bdd997a2bcebcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;out, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="separator:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">fixed_point_pixel_wise_multiplication</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in1, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in2, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, int scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</td></tr>
<tr class="separator:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, <a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</td></tr>
<tr class="separator:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">activation_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_integral&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">batch_normalization_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;mean, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;var, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;beta, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;gamma, float epsilon, int fixed_point_position)</td></tr>
<tr class="separator:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae19ece6824a2bc089edcc619124d95d3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae19ece6824a2bc089edcc619124d95d3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">convolution_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;weights, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;bias, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:ae19ece6824a2bc089edcc619124d95d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a590f86899d2cdff14487c16ce361d2a9"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a590f86899d2cdff14487c16ce361d2a9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">fully_connected_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;weights, const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;bias, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a590f86899d2cdff14487c16ce361d2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">normalization_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</td></tr>
<tr class="separator:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e93dde24e9dfb46feaec452e192977c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8e93dde24e9dfb46feaec452e192977c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">pooling_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, <a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, int fixed_point_position)</td></tr>
<tr class="separator:a8e93dde24e9dfb46feaec452e192977c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">softmax_layer</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeffa8efd0492f825570507bc628e2968"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aeffa8efd0492f825570507bc628e2968"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">fixed_point_operation</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;out, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op)</td></tr>
<tr class="separator:aeffa8efd0492f825570507bc628e2968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a10dcdb4134d755119468d8464d7604"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4a10dcdb4134d755119468d8464d7604"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">print</a> (const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;in, std::ostream &amp;out)</td></tr>
<tr class="separator:a4a10dcdb4134d755119468d8464d7604"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ab508d3cd11ab140d782c716debfcb25f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::absolute_difference </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00270">270</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">arm_compute::test::fixed_point_arithmetic::detail::abs()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00581">arm_compute::test::saturate_cast()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00056">Reference::compute_reference_absolute_difference()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00048">absolute_difference_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        intermediate_type val = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;intermediate_type&gt;(in1[i]) - static_cast&lt;intermediate_type&gt;(in2[i]));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T3&gt;(val);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00581">Utils.h:581</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af995ccfae7ea6d83f47d1212c3c7af28"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::accumulate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00283">283</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00581">arm_compute::test::saturate_cast()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP::accumulate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2&gt;::intermediate_type;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + static_cast&lt;intermediate_type&gt;(in[i]);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T2&gt;(val);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00581">Utils.h:581</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a53a4d082f0a3ae1523d728a4f1a5f22b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::accumulate_squared </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00296">296</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00581">arm_compute::test::saturate_cast()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP::accumulate_squared()</a>.</p>
<div class="fragment"><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">if</span>(shift &gt; 15)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Shift in accumulate_squared must be within the range [0, 15]&quot;</span>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2&gt;::intermediate_type;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    intermediate_type denom = 1 &lt;&lt; shift;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + (static_cast&lt;intermediate_type&gt;(in[i]) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in[i]) / denom);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T2&gt;(val);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00581">Utils.h:581</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afabf1ef7194a0156c90b3393e2a90cfa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::accumulate_weighted </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00314">314</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, and <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP::accumulate_weighted()</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">if</span>(alpha &lt; 0.f || alpha &gt; 1.f)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Weight (alpha) specified in accumulate_weighted must be within the range [0, 1]&quot;</span>);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T&gt;::intermediate_type;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordtype">double</span> val = (1. - <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(alpha)) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + static_cast&lt;double&gt;(alpha) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in[i]);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        out[i]     = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac41b6c35f336e0a97f9b8823ff7fcd05"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void activation_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00686">686</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00490">ActivationLayerInfo::a()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ActivationLayerInfo::ABS</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">arm_compute::test::fixed_point_arithmetic::detail::abs()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00486">ActivationLayerInfo::activation()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00885">arm_compute::test::fixed_point_arithmetic::detail::add()</a>, <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00494">ActivationLayerInfo::b()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::BOUNDED_RELU</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">arm_compute::test::fixed_point_arithmetic::detail::exp()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">ActivationLayerInfo::LINEAR</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">arm_compute::test::fixed_point_arithmetic::detail::log()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">arm_compute::test::fixed_point_arithmetic::detail::max()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">arm_compute::test::fixed_point_arithmetic::detail::min()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00895">arm_compute::test::fixed_point_arithmetic::detail::mul()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::SOFT_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::SQRT</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">ActivationLayerInfo::SQUARE</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, and <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00930">arm_compute::test::fixed_point_arithmetic::detail::tanh()</a>.</p>

<p>Referenced by <a class="el" href="_tensor_visitors_8h_source.xhtml#l00195">activation_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> T a = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(act_info.a());</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">const</span> T b = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(act_info.b());</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        T x = in[i];</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">switch</span>(act_info.activation())</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(x);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                out[i] = std::min&lt;T&gt;(a, std::max&lt;T&gt;(0, x));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                out[i] = a * x + b;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                out[i] = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) / (static_cast&lt;T&gt;(1) + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(-x));</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                out[i] = std::max&lt;T&gt;(0, x);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">std::log</a>(static_cast&lt;T&gt;(1) + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(x));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                out[i] = std::sqrt(x);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                out[i] = x * x;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                out[i] = a * <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a6854479935f66029852441b051e1a3e0">std::tanh</a>(b * x);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Activation function not recognised&quot;</span>);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8c8ce35c61b4f71cccec28d18161eaa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">arm_compute::test::fixed_point_arithmetic::detail::log</a></div><div class="ttdeci">fixed_point&lt; T &gt; log(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">FixedPoint.h:920</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a6854479935f66029852441b051e1a3e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a6854479935f66029852441b051e1a3e0">arm_compute::test::fixed_point_arithmetic::detail::tanh</a></div><div class="ttdeci">fixed_point&lt; T &gt; tanh(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00930">FixedPoint.h:930</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0500e22e76099c68d3e41b46e0cdd54c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::arithmetic_addition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00331">331</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00122">Reference::compute_reference_arithmetic_addition()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00063">arithmetic_addition_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) + static_cast&lt;intermediate_type&gt;(in2[i]);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        out[i]                = (convert_policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;T3&gt;(val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a135ce9546985c784175156c32fa014af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::arithmetic_subtraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00344">344</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00139">Reference::compute_reference_arithmetic_subtraction()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00081">arithmetic_subtraction_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) - static_cast&lt;intermediate_type&gt;(in2[i]);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        out[i]                = (convert_policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;T3&gt;(val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab8680238fafb5a48dc1ebe47217f54e0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void batch_normalization_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00783">783</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt()</a>, and <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00361">Reference::compute_reference_batch_normalization_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00216">batch_normalization_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[0]);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[1]);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[2]);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.shape().total_size() / (cols * rows * depth);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    {</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; depth; ++i)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; rows; ++k)</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            {</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; cols; ++l)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span>                              pos = l + k * cols + i * rows * cols + r * cols * rows * depth;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; in_qs8(in[pos], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; var_qs8(var[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; mean_qs8(mean[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; beta_qs8(beta[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; gamma_qs8(gamma[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    fixed_point_arithmetic::fixed_point&lt;T&gt; epsilon_qs8(epsilon, fixed_point_position);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                    <span class="keyword">auto</span> denominator = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">fixed_point_arithmetic::inv_sqrt</a>(var_qs8 + epsilon_qs8);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                    <span class="keyword">auto</span> numerator   = in_qs8 - mean_qs8;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    <span class="keyword">auto</span> x_bar       = numerator * denominator;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                    x_bar            = beta_qs8 + x_bar * gamma_qs8;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                    out[pos]         = x_bar.raw();</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        }</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    }</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a2b7623d9dd3fde1d0a3bbe034967cff5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt</a></div><div class="ttdeci">fixed_point&lt; T &gt; inv_sqrt(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">FixedPoint.h:925</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6e865331e6ad22ab8c6a47c836068eae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::bitwise_and </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00357">357</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP::bitwise_and()</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        out[i] = in1[i] &amp; in2[i];</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9629af50ada3b5dca5f23a639f6c8045"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::bitwise_not </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00387">387</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP::bitwise_not()</a>.</p>
<div class="fragment"><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        out[i] = ~in[i];</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a524e781138b8143ce949f16aca47632d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::bitwise_or </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00367">367</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP::bitwise_or()</a>.</p>
<div class="fragment"><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        out[i] = in1[i] | in2[i];</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aeef005a6d652352fd78acf84fd8fdb0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::bitwise_xor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00377">377</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP::bitwise_xor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        out[i] = in1[i] ^ in2[i];</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a934ba47d23b89b5868c6fad054e5a59d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::box3x3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00397">397</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00611">arm_compute::test::index2coord()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00658">arm_compute::test::is_in_valid_region()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00466">arm_compute::test::shape_to_valid_region_undefined_border()</a>, and <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::U</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP::box3x3()</a>, and <a class="el" href="_reference_8cpp_source.xhtml#l00222">Reference::compute_reference_box3x3()</a>.</p>
<div class="fragment"><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> std::array&lt;T, 9&gt; filter{ { 1, 1, 1, 1, 1, 1, 1, 1, 1 } };</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordtype">float</span>             scale        = 1.f / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(filter.size());</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keyword">const</span> ValidRegion valid_region = <a class="code" href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">shape_to_valid_region_undefined_border</a>(in.shape(), BorderSize(1));</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; in.num_elements(); ++element_idx)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">const</span> Coordinates <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(in.shape(), element_idx);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">is_in_valid_region</a>(valid_region, <span class="keywordtype">id</span>))</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            apply_2d_spatial_filter(<span class="keywordtype">id</span>, in, out, TensorShape(3U, 3U), filter.data(), scale);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a6b97d7bba7b5cee833eb5c2282e8d246"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">arm_compute::test::shape_to_valid_region_undefined_border</a></div><div class="ttdeci">ValidRegion shape_to_valid_region_undefined_border(TensorShape shape, BorderSize border_size)</div><div class="ttdoc">Create a valid region covering the tensor shape with UNDEFINED border mode and specified border size...</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00466">Utils.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a58ee979a599b3b6a2587964106b1910c"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, const Coordinates &amp;coord)</div><div class="ttdoc">Check if a coordinate is within a valid region. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00658">Utils.h:658</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae19ece6824a2bc089edcc619124d95d3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::convolution_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00847">847</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00086">Tensor&lt; T &gt;::data()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">arm_compute::test::fixed_point_arithmetic::detail::min()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00409">PadStrideInfo::pad()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00405">PadStrideInfo::stride()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00405">Reference::compute_reference_convolution_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00241">convolution_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;{</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_in       = in.shape().x();</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_in      = in.shape().y();</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_in       = in.shape().z();</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_out      = out.shape().x();</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_out     = out.shape().y();</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_out      = out.shape().z();</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_weights  = weights.shape().x();</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_weights = weights.shape().y();</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_weights  = weights.shape().z();</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_xi         = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(static_cast&lt;int&gt;(conv_info.pad().first), width_weights / 2);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_yi         = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(static_cast&lt;int&gt;(conv_info.pad().second), height_weights / 2);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_xi       = width_weights / 2 - pad_xi;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_yi       = height_weights / 2 - pad_yi;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_xi         = width_in - start_xi;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_yi         = height_in - start_yi;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_xi      = conv_info.stride().first;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_yi      = conv_info.stride().second;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches    = in.shape().total_size() / (width_in * height_in * depth_in);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; num_batches; ++r)</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    {</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> yi = start_yi; yi &lt; end_yi; yi += stride_yi)</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        {</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> xi = start_xi; xi &lt; end_xi; xi += stride_xi)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            {</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ofm = 0; ofm &lt; depth_out; ++ofm)</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                {</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    <span class="comment">// Compute input and output offsets</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_in  = r * width_in * height_in * depth_in;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xo         = (xi - start_xi) / stride_xi;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> yo         = (yi - start_yi) / stride_yi;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_out = xo + yo * width_out + ofm * width_out * height_out + r * width_out * height_out * depth_out;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    <span class="comment">// Compute 3D convolution</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    convolution3d(in.data() + offset_in,</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                                  weights.data() + ofm * width_weights * height_weights * depth_weights,</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                                  bias.data() + ofm,</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                                  out.data() + offset_out,</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                                  xi, yi,</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                                  width_in, height_in, depth_in,</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                  width_weights, height_weights,</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                  <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.fixed_point_position()));</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                }</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        }</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    }</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">FixedPoint.h:875</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4485bbf8646087afcb6d724e613da68f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::depth_convert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00414">414</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00237">Reference::compute_reference_depth_convert()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00099">depth_convert_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;{</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;The conversion is not supported&quot;</span>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a531358310cc70fdd4f59637db7ce1b3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; float, int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00430">430</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>
<div class="fragment"><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> int8_t fixed_point_position = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.fixed_point_position());</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordtype">float</span> val = in[i] * (1 &lt;&lt; fixed_point_position) + 0.5f;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        out[i]    = ((policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;int8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac0098bc6f892a87934f223210dbfd6a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; int16_t, int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00496">496</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a447ea0d3749644c6eb970d78ff7e11db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; int16_t, uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00487">487</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        int16_t val = in[i] &gt;&gt; shift;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        out[i]      = ((policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;uint8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a963f96bc7caff7e733ba2bfed26e453b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; int8_t, float &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00420">420</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;{</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">const</span> int8_t fixed_point_position = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.fixed_point_position());</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(in[i]) * (1.0f / (1 &lt;&lt; fixed_point_position));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a79219b20a374800b7da7222a70db89b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; uint16_t, uint32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00478">478</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a34b3b2d8ce85841a51f517bf38d3d3b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; uint16_t, uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00468">468</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>
<div class="fragment"><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        uint16_t val = in[i] &gt;&gt; shift;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        out[i]       = ((policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;uint8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0e91470444d96ed45eae0bac5b7c6042"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; uint8_t, int16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00450">450</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6b46cf712c2bf1e96eef20c6b1b816f5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; uint8_t, int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00459">459</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a09a0ab9b11ba12a3d4230bb07198a06d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a>&lt; uint8_t, uint16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00441">441</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aeffa8efd0492f825570507bc628e2968"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::fixed_point_operation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l01319">1319</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00900">arm_compute::test::fixed_point_arithmetic::detail::div()</a>, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">arm_compute::test::fixed_point_arithmetic::detail::exp()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca59c58364795af22cad54630be156712b">arm_compute::INV_SQRT</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt()</a>, <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">arm_compute::test::fixed_point_arithmetic::detail::log()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4d98346f3d5cc5fa5666f0715abf25b1">arm_compute::RECIPROCAL</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00555">Reference::compute_reference_fixed_point_operation()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00348">fixed_point_operation_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;{</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <span class="keywordtype">int</span> p = in.fixed_point_position();</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    {</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        <span class="keywordflow">case</span> FixedPointOp::EXP:</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;            {</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">fixed_point_arithmetic::exp</a>(fixed_point_arithmetic::fixed_point&lt;T&gt;(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;            }</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <span class="keywordflow">case</span> FixedPointOp::LOG:</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;            {</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">fixed_point_arithmetic::log</a>(fixed_point_arithmetic::fixed_point&lt;T&gt;(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;            }</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        <span class="keywordflow">case</span> FixedPointOp::INV_SQRT:</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            {</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">fixed_point_arithmetic::inv_sqrt</a>(fixed_point_arithmetic::fixed_point&lt;T&gt;(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            }</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        <span class="keywordflow">case</span> FixedPointOp::RECIPROCAL:</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;            {</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">fixed_point_arithmetic::div</a>(fixed_point_arithmetic::fixed_point&lt;T&gt;(1, p), fixed_point_arithmetic::fixed_point&lt;T&gt;(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;            }</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Fixed point operation not supported&quot;</span>);</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    }</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8c8ce35c61b4f71cccec28d18161eaa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">arm_compute::test::fixed_point_arithmetic::detail::log</a></div><div class="ttdeci">fixed_point&lt; T &gt; log(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">FixedPoint.h:920</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a2b7623d9dd3fde1d0a3bbe034967cff5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt</a></div><div class="ttdeci">fixed_point&lt; T &gt; inv_sqrt(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">FixedPoint.h:925</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a9d53af9692ab2f7ae6fc0017faeb46f0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">arm_compute::test::fixed_point_arithmetic::detail::div</a></div><div class="ttdeci">fixed_point&lt; T &gt; div(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00900">FixedPoint.h:900</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af8ba83a7ab2a51404613c27f4bf1b502"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::fixed_point_pixel_wise_multiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00617">617</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00115">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00076">Tensor&lt; T &gt;::data_type()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">arm_compute::QS16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">arm_compute::QS8</a>, and <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00298">Reference::compute_reference_fixed_point_pixel_wise_multiplication()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00161">fixed_point_pixel_wise_multiplication_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> fixed_point_position = in1.fixed_point_position();</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(in1.data_type() != in2.data_type() || in1.data_type() != out.data_type(),</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                             <span class="stringliteral">&quot;Tensors must all have the same DataType&quot;</span>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(fixed_point_position != in2.fixed_point_position() || fixed_point_position != out.fixed_point_position(),</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                             <span class="stringliteral">&quot;Fixed-point position must be the same for both inputs and outputs&quot;</span>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Validate fixed_point_position</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((in1.data_type() == DataType::QS8) &amp;&amp; (fixed_point_position == 0 || fixed_point_position &gt; 7));</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((in1.data_type() == DataType::QS16) &amp;&amp; (fixed_point_position == 0 || fixed_point_position &gt; 15));</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    fixed_point&lt;T&gt; fp_scale(scale, fixed_point_position);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_sat     = convert_policy == ConvertPolicy::SATURATE;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     do_scaling = scale != 1;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        fixed_point&lt;T&gt; val1(in1[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        fixed_point&lt;T&gt; val2(in2[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        fixed_point&lt;T&gt; res = (is_sat) ? val1 * val2 : mul&lt;OverflowPolicy::WRAP&gt;(val1, val2);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="keywordflow">if</span>(do_scaling)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            res = (is_sat) ? res * fp_scale : mul&lt;OverflowPolicy::WRAP&gt;(res, fp_scale);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        }</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        out[i] = res.raw();</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00115">Error.h:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a590f86899d2cdff14487c16ce361d2a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::fully_connected_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00899">899</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00124">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00086">Tensor&lt; T &gt;::data()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, and <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00435">Reference::compute_reference_fully_connected_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00264">fully_connected_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;{</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights.shape().x() != out.shape().x());</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights.shape().y() != in.shape().x() * in.shape().y() * in.shape().z());</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_weights = weights.shape().x();</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_weights = weights.shape().y();</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches  = in.shape().total_size() / rows_weights;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; num_batches; ++k)</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    {</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        vector_matrix_multiply&lt;T&gt;(in.data() + k * rows_weights,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                  weights.data(),</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                  bias.data(),</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                  out.data() + k * cols_weights,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                  cols_weights,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                  rows_weights,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                  in.fixed_point_position());</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aca1385f622ea543d14bdd997a2bcebcf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void gemm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00506">506</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, and <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00251">Reference::compute_reference_gemm()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00118">gemm_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> M = out.shape().y();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> N = out.shape().x();</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> K = in1.shape().x();</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; M; ++r)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; N; ++c)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            T acc = 0.0f;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; K; ++k)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="keyword">const</span> T a0 = in1[r * K + k];</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keyword">const</span> T b0 = in2[k * N + c];</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                acc += a0 * b0;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="comment">// Finalize the result: A * B * alpha + C * beta</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keyword">const</span> T c0     = in3[c + r * N];</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            out[c + r * N] = alpha * acc + beta * c0;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a068d9be2e13dddcb8c8ab9f91e934a75"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::integral_image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00225">225</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00042">Reference::compute_reference_integral_image()</a>, and <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP::integral_image()</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Length of dimensions</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> width  = in.shape().x();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> height = in.shape().y();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> depth  = in.shape().z() * in.shape()[3] * in.shape()[4] * in.shape()[5];</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_size = width * height;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> z = 0; z &lt; depth; ++z)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordtype">size_t</span> current_image = z * image_size;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">//First element of each image</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        out[current_image] = in[current_image];</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// First row of each image (add only pixel on the left)</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> x = 1; x &lt; width; ++x)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            out[current_image + x] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_image + x]) + out[current_image + x - 1];</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// Subsequent rows</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> y = 1; y &lt; height; ++y)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordtype">size_t</span> current_row = current_image + (width * y);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="comment">// First element of each row (add only pixel up)</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            out[current_row] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_row]) + out[current_row - width];</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="comment">// Following row elements</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> x = 1; x &lt; width; ++x)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordtype">size_t</span> current_pixel = current_row + x;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="comment">// out = in + up(out) + left(out) - up_left(out)</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                out[current_pixel] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_pixel]) + out[current_pixel - 1]</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                     + out[current_pixel - width] - out[current_pixel - width - 1];</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a31ecd095dd99ad3b8527bb4736c79f4d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void normalization_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>norm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00921">921</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00885">arm_compute::test::fixed_point_arithmetic::detail::add()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00533">NormalizationLayerInfo::beta()</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::CROSS_MAP</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00900">arm_compute::test::fixed_point_arithmetic::detail::div()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">arm_compute::test::fixed_point_arithmetic::detail::exp()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::IN_MAP_2D</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00537">NormalizationLayerInfo::kappa()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">arm_compute::test::fixed_point_arithmetic::detail::log()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00895">arm_compute::test::fixed_point_arithmetic::detail::mul()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00525">NormalizationLayerInfo::norm_size()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00935">arm_compute::test::fixed_point_arithmetic::detail::pow()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00548">NormalizationLayerInfo::scale_coeff()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00521">NormalizationLayerInfo::type()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00475">Reference::compute_reference_normalization_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00288">normalization_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;{</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">const</span> uint32_t norm_size = norm_info.norm_size();</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a>       type      = norm_info.type();</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordtype">float</span>          beta      = norm_info.beta();</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    uint32_t       kappa     = norm_info.kappa();</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[0]);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[1]);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[2]);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.shape().total_size() / (cols * rows);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordtype">float</span> coeff       = norm_info.scale_coeff();</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordtype">int</span>   radius_cols = norm_size / 2;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="comment">// IN_MAP_1D and CROSS_MAP normalize over a single axis only</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordtype">int</span> radius_rows = (NormType::IN_MAP_2D == type) ? norm_size / 2 : 0;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keywordflow">if</span>(type == NormType::CROSS_MAP)</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    {</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="comment">// Remove also depth from upper dimensions since it is the axes we want</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <span class="comment">// to use for normalization</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        upper_dims /= depth;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        {</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            {</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                {</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; depth; ++l)</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                    {</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        <span class="keywordtype">float</span> accumulated_scale = 0.f;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_cols; j &lt;= radius_cols; ++j)</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                        {</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> z = l + j;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                            <span class="keywordflow">if</span>(z &gt;= 0 &amp;&amp; z &lt; depth)</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                            {</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                <span class="keyword">const</span> T value = in[k + i * cols + z * rows * cols + r * cols * rows * depth];</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                accumulated_scale += value * value;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                            }</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                        }</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                        out[k + i * cols + l * rows * cols + r * cols * rows * depth] = kappa + accumulated_scale * coeff;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    }</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                }</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            }</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        }</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    {</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        {</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            {</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                {</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                    <span class="keywordtype">float</span> accumulated_scale = 0.f;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_rows; j &lt;= radius_rows; ++j)</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                    {</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> y = i + j;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = -radius_cols; l &lt;= radius_cols; ++l)</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                        {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> x = k + l;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                            <span class="keywordflow">if</span>((x &gt;= 0 &amp;&amp; y &gt;= 0) &amp;&amp; (x &lt; cols &amp;&amp; y &lt; rows))</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                            {</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                <span class="keyword">const</span> T value = in[x + y * cols + r * cols * rows];</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                accumulated_scale += value * value;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                            }</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                        }</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                    }</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                    out[k + i * cols + r * cols * rows] = kappa + accumulated_scale * coeff;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                }</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            }</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        }</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    }</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keywordflow">if</span>(beta == 1.f)</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    {</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.num_elements(); ++i)</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        {</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            out[i] = in[i] / out[i];</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        }</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    }</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(beta == 0.5f)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    {</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.num_elements(); ++i)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        {</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            out[i] = in[i] / std::sqrt(out[i]);</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        }</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    }</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    {</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.num_elements(); ++i)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        {</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            out[i] = in[i] * <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">std::log</a>(out[i]) * -beta);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        }</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    }</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8c8ce35c61b4f71cccec28d18161eaa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">arm_compute::test::fixed_point_arithmetic::detail::log</a></div><div class="ttdeci">fixed_point&lt; T &gt; log(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">FixedPoint.h:920</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59ca"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">arm_compute::NormType</a></div><div class="ttdeci">NormType</div><div class="ttdoc">The normalization type used for the normalization layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00338">Types.h:338</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="acee95d0eabaf4dc59612123c1fbbffb1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::pixel_wise_multiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T1 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>convert_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00579">579</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00289">arm_compute::test::cpp11::round_half_even()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00276">arm_compute::test::cpp11::round_half_up()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::TO_NEAREST_EVEN</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::TO_NEAREST_UP</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::TO_ZERO</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00247">arm_compute::test::cpp11::trunc()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00280">Reference::compute_reference_pixel_wise_multiplication()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00141">pixel_wise_multiplication_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">if</span>(scale &lt; 0)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.num_elements(); ++i)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordtype">double</span> val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) * static_cast&lt;intermediate_type&gt;(in2[i]) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(scale);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keywordflow">if</span>(std::is_floating_point&lt;T3&gt;::value)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            out[i] = val;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        }</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keywordtype">double</span> rounded_val = 0;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keywordflow">switch</span>(rounding_policy)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">case</span>(RoundingPolicy::TO_ZERO):</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">cpp11::trunc</a>(val);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                <span class="keywordflow">case</span>(RoundingPolicy::TO_NEAREST_UP):</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">cpp11::round_half_up</a>(val);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                <span class="keywordflow">case</span>(RoundingPolicy::TO_NEAREST_EVEN):</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">cpp11::round_half_even</a>(val);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                    <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding policy&quot;</span>);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            out[i] = (convert_policy == ConvertPolicy::SATURATE) ? saturate_cast&lt;T3&gt;(rounded_val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(rounded_val);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ad473ea84f8bab197d5e32d7693f3f121"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">arm_compute::test::cpp11::round_half_up</a></div><div class="ttdeci">T round_half_up(T value)</div><div class="ttdoc">Round floating-point value with half value rounding to positive infinity. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00276">Utils.h:276</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ae8ee44ec85e2dd519488bfccf91db2dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">arm_compute::test::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00247">Utils.h:247</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_aac60e291929bd45df7800bb860f7bf4f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">arm_compute::test::cpp11::round_half_even</a></div><div class="ttdeci">T round_half_even(T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</div><div class="ttdoc">Round floating-point value with half value rounding to nearest even. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00289">Utils.h:289</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8e93dde24e9dfb46feaec452e192977c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::pooling_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l01123">1123</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">arm_compute::test::fixed_point_arithmetic::detail::max()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">arm_compute::test::fixed_point_arithmetic::detail::min()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00409">PadStrideInfo::pad()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00446">PoolingLayerInfo::pad_stride_info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00442">PoolingLayerInfo::pool_size()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00438">PoolingLayerInfo::pool_type()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>, <a class="el" href="_fixed_point_8inl_source.xhtml#l00063">arm_compute::sqadd_qs8()</a>, <a class="el" href="_fixed_point_8inl_source.xhtml#l00107">arm_compute::sqmul_qs8()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00405">PadStrideInfo::stride()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00499">Reference::compute_reference_pooling_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00308">pooling_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;{</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   pool_size     = pool_info.pool_size();</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> type          = pool_info.pool_type();</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="keywordtype">int</span>         pool_stride_x = 0;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keywordtype">int</span>         pool_stride_y = 0;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="keywordtype">int</span>         pad_x         = 0;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <span class="keywordtype">int</span>         pad_y         = 0;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info().stride();</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    std::tie(pad_x, pad_y)                 = pool_info.pad_stride_info().pad();</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_in = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[0]);</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_in = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[1]);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out.shape()[0]);</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out.shape()[1]);</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keywordtype">int</span> upper_dims = in.shape().total_size() / (cols_in * rows_in);</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="keywordtype">int</span> pooled_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(static_cast&lt;float&gt;(rows_in + 2 * pad_x - pool_size) / pool_stride_x)) + 1;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordtype">int</span> pooled_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(static_cast&lt;float&gt;(cols_in + 2 * pad_y - pool_size) / pool_stride_y)) + 1;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keywordflow">if</span>((pooled_height - 1) * pool_stride_x &gt;= rows_in + pad_x)</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    {</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        --pooled_height;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    }</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    <span class="keywordflow">if</span>((pooled_width - 1) * pool_stride_y &gt;= cols_in + pad_y)</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    {</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        --pooled_width;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    }</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordflow">if</span>(type == PoolingType::MAX)</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    {</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        {</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; pooled_height; ++i)</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            {</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; pooled_width; ++k)</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                {</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                    <span class="keywordtype">int</span> hstart = i * pool_stride_x - pad_x;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                    <span class="keywordtype">int</span> wstart = k * pool_stride_y - pad_y;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                    <span class="keywordtype">int</span> hend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hstart + pool_size, rows_in);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                    <span class="keywordtype">int</span> wend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wstart + pool_size, cols_in);</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                    hstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(hstart, 0);</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                    wstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(wstart, 0);</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                    T max_val = std::numeric_limits&lt;T&gt;::lowest();</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                    {</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                        {</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                            T val = in[r * cols_in * rows_in + y * cols_in + x];</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                            <span class="keywordflow">if</span>(val &gt; max_val)</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                            {</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                max_val = val;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                            }</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                        }</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                    }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                    out[r * rows_out * cols_out + i * pooled_width + k] = max_val;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                }</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            }</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        }</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    }</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// Average pooling</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    {</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        {</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; pooled_height; ++i)</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;            {</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; pooled_width; ++k)</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                {</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                    T avg_val = 0;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                    <span class="keywordtype">int</span> hstart = i * pool_stride_x - pad_x;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;                    <span class="keywordtype">int</span> wstart = k * pool_stride_y - pad_y;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                    <span class="keywordtype">int</span> hend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hstart + pool_size, cols_in + pad_x);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                    <span class="keywordtype">int</span> wend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wstart + pool_size, rows_in + pad_y);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                    <span class="keywordtype">int</span> pool   = (hend - hstart) * (wend - wstart);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                    hstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(hstart, 0);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                    wstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(wstart, 0);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                    hend       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hend, rows_in);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                    wend       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wend, cols_in);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                    <span class="keywordflow">if</span>(std::is_floating_point&lt;T&gt;::value)</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                    {</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                        {</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                            {</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                                avg_val += in[r * cols_in * rows_in + y * cols_in + x];</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                            }</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                        }</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                        out[r * rows_out * cols_out + i * pooled_width + k] = avg_val / pool;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                    }</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                    {</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                        <span class="keyword">static</span> std::array&lt;qint8_t, 10&gt; scale_values_q8 =</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                        { { 0x0, 0x0, 0x40, 0x2A, 0x20, 0x19, 0x15, 0x12, 0x10, 0xE } };</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                        {</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                            {</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                                avg_val = <a class="code" href="namespacearm__compute.xhtml#a532d90e007d0cb6f3d43107229c40c32">sqadd_qs8</a>(avg_val, in[r * cols_in * rows_in + y * cols_in + x]);</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                            }</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                        }</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                        out[r * rows_out * cols_out + i * pooled_width + k] = <a class="code" href="namespacearm__compute.xhtml#af0b73b0c4980a551d7cd4edec43ffd92">sqmul_qs8</a>(avg_val, (scale_values_q8[pool] &gt;&gt; (7 - fixed_point_position)), fixed_point_position);</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                    }</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                }</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            }</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        }</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    }</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">FixedPoint.h:875</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00379">Types.h:379</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af0b73b0c4980a551d7cd4edec43ffd92"><div class="ttname"><a href="namespacearm__compute.xhtml#af0b73b0c4980a551d7cd4edec43ffd92">arm_compute::sqmul_qs8</a></div><div class="ttdeci">qint8_t sqmul_qs8(qint8_t a, qint8_t b, int fixed_point_position)</div><div class="ttdoc">8 bit fixed point scalar saturating multiply </div><div class="ttdef"><b>Definition:</b> <a href="_fixed_point_8inl_source.xhtml#l00107">FixedPoint.inl:107</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">FixedPoint.h:880</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a532d90e007d0cb6f3d43107229c40c32"><div class="ttname"><a href="namespacearm__compute.xhtml#a532d90e007d0cb6f3d43107229c40c32">arm_compute::sqadd_qs8</a></div><div class="ttdeci">qint8_t sqadd_qs8(qint8_t a, qint8_t b)</div><div class="ttdoc">8 bit fixed point scalar saturating add </div><div class="ttdef"><b>Definition:</b> <a href="_fixed_point_8inl_source.xhtml#l00063">FixedPoint.inl:63</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4a10dcdb4134d755119468d8464d7604"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::print </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l01356">1356</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>.</p>

<p>Referenced by <a class="el" href="_tensor_visitors_8h_source.xhtml#l00373">print_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;{</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    out &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    {</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        out &lt;&lt; in[i] &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    }</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    out &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8db9e6c61d6d8399da28198a81a2c92b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void softmax_layer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l01240">1240</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00885">arm_compute::test::fixed_point_arithmetic::detail::add()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00900">arm_compute::test::fixed_point_arithmetic::detail::div()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">arm_compute::test::fixed_point_arithmetic::detail::exp()</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor&lt; T &gt;::fixed_point_position()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">arm_compute::test::fixed_point_arithmetic::detail::max()</a>, and <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor&lt; T &gt;::shape()</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00530">Reference::compute_reference_softmax_layer()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00329">softmax_layer_visitor::operator()()</a>.</p>
<div class="fragment"><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.shape()[0]);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_dims = in.shape().total_size() / cols;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    {</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <span class="comment">// Find max</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        T <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a> = std::numeric_limits&lt;T&gt;::lowest();</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        {</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            <span class="keyword">const</span> T x = in[r * cols + c];</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;            <span class="keywordflow">if</span>(x &gt; max)</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;            {</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                max = x;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;            }</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        }</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <span class="comment">// Regularize</span></div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        T sum = 0;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        {</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            <span class="keyword">const</span> T res       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">exp</a>(in[r * cols + c] - max);</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;            out[r * cols + c] = res;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            sum += res;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        }</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        <span class="comment">// Normalize</span></div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        <span class="keyword">const</span> T norm_val = 1 / sum;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        {</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;            out[r * cols + c] *= norm_val;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;        }</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    }</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">FixedPoint.h:880</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aa2a75d7fb5a1cca91d6eab7888fc3431"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::test::validation::tensor_operations::threshold </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>threshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>false_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>true_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>upper</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_operations_8h_source.xhtml#l00651">651</a> of file <a class="el" href="_tensor_operations_8h_source.xhtml">TensorOperations.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a98ad0e8750ae10ad556ed7a62affb452">arm_compute::BINARY</a>, <a class="el" href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor&lt; T &gt;::num_elements()</a>, and <a class="el" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a01036ddcc971d02f6c32c3da31a119f2">arm_compute::RANGE</a>.</p>

<p>Referenced by <a class="el" href="_reference_8cpp_source.xhtml#l00316">Reference::compute_reference_threshold()</a>, <a class="el" href="fast__corners_8cl_source.xhtml#l00098">compute_strength()</a>, <a class="el" href="fast__corners_8cl_source.xhtml#l00155">fast_corners()</a>, and <a class="el" href="_tensor_visitors_8h_source.xhtml#l00181">arm_compute::test::validation::tensor_visitors::threshold_operation()</a>.</p>
<div class="fragment"><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">case</span> ThresholdType::BINARY:</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                out[i] = ((in[i] &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>) ? true_value : false_value);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keywordflow">case</span> ThresholdType::RANGE:</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keywordflow">if</span>(in[i] &gt; upper)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                {</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    out[i] = false_value;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span>(in[i] &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    out[i] = false_value;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                }</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                    out[i] = true_value;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Thresholding type not recognised&quot;</span>);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    }</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aa2a75d7fb5a1cca91d6eab7888fc3431"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">arm_compute::test::validation::tensor_operations::threshold</a></div><div class="ttdeci">void threshold(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00651">TensorOperations.h:651</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">validation</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml">tensor_operations</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
