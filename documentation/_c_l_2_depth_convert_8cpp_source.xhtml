<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/CL/DepthConvert.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_c_l_2_depth_convert_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DepthConvert.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_2_depth_convert_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_accessor_8h.xhtml">CL/CLAccessor.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_2_helper_8h.xhtml">CL/Helper.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_globals_8h.xhtml">Globals.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_library_8h.xhtml">TensorLibrary.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_type_printer_8h.xhtml">TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;Utils.h&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="validation_2_datasets_8h.xhtml">validation/Datasets.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_reference_8h.xhtml">validation/Reference.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validation_8h.xhtml">validation/Validation.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_depth_convert_8h.xhtml">arm_compute/runtime/CL/functions/CLDepthConvert.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_allocator_8h.xhtml">arm_compute/runtime/TensorAllocator.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boost__wrapper_8h.xhtml">boost_wrapper.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1cl.xhtml">arm_compute::test::cl</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> compute_depth_convert(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Create tensors</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> src = <a class="code" href="namespacearm__compute_1_1test_1_1cl.xhtml#a6feffffa9821246ed8ac8fe7d633df57">create_tensor</a>(shape, dt_in);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = <a class="code" href="namespacearm__compute_1_1test_1_1cl.xhtml#a6feffffa9821246ed8ac8fe7d633df57">create_tensor</a>(shape, dt_out);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_depth_convert.xhtml">CLDepthConvert</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">depth_convert</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    depth_convert.<a class="code" href="classarm__compute_1_1_c_l_depth_convert.xhtml#a536f0de1a70ea80d40b0a24657ac5290">configure</a>(&amp;src, &amp;dst, policy, shift);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Allocate tensors</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">allocate</a>();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    BOOST_TEST(!src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    BOOST_TEST(!dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Fill tensors</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill_tensor_uniform(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(src), 0);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    depth_convert.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab5fd6e96c07aaaed2747c7e16ed5951e">run</a>();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> dst;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">void</span> compute_configure_validate(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_in, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Create tensors</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> src = <a class="code" href="namespacearm__compute_1_1test_1_1cl.xhtml#a6feffffa9821246ed8ac8fe7d633df57">create_tensor</a>(shape, dt_in);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = <a class="code" href="namespacearm__compute_1_1test_1_1cl.xhtml#a6feffffa9821246ed8ac8fe7d633df57">create_tensor</a>(shape, dt_out);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    BOOST_TEST(src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    BOOST_TEST(dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_depth_convert.xhtml">CLDepthConvert</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">depth_convert</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    depth_convert.configure(&amp;src, &amp;dst, policy, shift);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Validate valid region</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region = <a class="code" href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">shape_to_valid_region</a>(shape);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>(), valid_region);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>(), valid_region);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Validate padding</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> padding(0, <a class="code" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">required_padding</a>(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(), 16), 0, 0);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(src.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>(), padding);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(dst.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>(), padding);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;BOOST_AUTO_TEST_SUITE(CL)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;BOOST_AUTO_TEST_SUITE(DepthConvert)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;BOOST_AUTO_TEST_SUITE(U8_to_U16)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, policy, shift);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, policy, shift);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, policy, shift, 0);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, policy, shift);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, policy, shift, 0);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;BOOST_AUTO_TEST_SUITE(U8_to_S16)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, policy, shift);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, policy, shift);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, policy, shift, 0);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, policy, shift);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, policy, shift, 0);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;BOOST_AUTO_TEST_SUITE(U8_to_S32)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift, 0);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift, 0);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;BOOST_AUTO_TEST_SUITE(U16_to_U8)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift, 0);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift, 0);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;BOOST_AUTO_TEST_SUITE(U16_to_U32)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, policy, shift);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, policy, shift);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, policy, shift, 0);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, policy, shift);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, policy, shift, 0);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;BOOST_AUTO_TEST_SUITE(S16_to_U8)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift, 0);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, policy, shift, 0);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;BOOST_AUTO_TEST_SUITE(S16_to_S32)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;BOOST_DATA_TEST_CASE(Configuration, (<a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() + <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>()) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment">// Compute configure and validate region/padding</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    compute_configure_validate(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;BOOST_DATA_TEST_CASE(RunSmall, <a class="code" href="classarm__compute_1_1test_1_1_small_shapes.xhtml">SmallShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;{</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift, 0);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;BOOST_DATA_TEST_CASE(RunLarge, <a class="code" href="classarm__compute_1_1test_1_1_large_shapes.xhtml">LargeShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">ConvertPolicy::WRAP</a> })</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                     * boost::unit_test::data::xrange(0, 7, 1),</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                     shape, policy, shift)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> dst = compute_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// Compute reference</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref_dst = Reference::compute_reference_depth_convert(shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, policy, shift, 0);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">CLAccessor</a>(dst), ref_dst);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="_reference_8h_xhtml"><div class="ttname"><a href="_reference_8h.xhtml">Reference.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_depth_convert_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_depth_convert.xhtml">arm_compute::CLDepthConvert</a></div><div class="ttdoc">Basic function to run CLDepthConvertKernel. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_depth_convert_8h_source.xhtml#l00037">CLDepthConvert.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00047">RawTensor.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="arm__compute_2runtime_2_tensor_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_g_e_m_m_8h_source.xhtml#l00039">GEMM.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_aaee6555ace43b03173844b1a228a3fc3"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">arm_compute::TensorInfo::is_resizable</a></div><div class="ttdeci">bool is_resizable() const override</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00263">TensorInfo.h:263</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00131">Types.h:131</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a3c20d908342087484d883574d55dd482"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">arm_compute::TensorInfo::valid_region</a></div><div class="ttdeci">ValidRegion valid_region() const override</div><div class="ttdoc">Valid region of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00271">TensorInfo.h:271</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a356470553f2afd5673a41cf4da48e33b"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">arm_compute::test::required_padding</a></div><div class="ttdeci">int required_padding(int size, int step)</div><div class="ttdoc">Calculate the required padding given the available size and the required. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00486">Utils.h:486</a></div></div>
<div class="ttc" id="_tensor_library_8h_xhtml"><div class="ttname"><a href="_tensor_library_8h.xhtml">TensorLibrary.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad6dc6b773780dd6b1ad17fc82368d9f3"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad6dc6b773780dd6b1ad17fc82368d9f3">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">ITensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="_tensor_allocator_8h_xhtml"><div class="ttname"><a href="_tensor_allocator_8h.xhtml">TensorAllocator.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a79e20eacb1e963e24a21ebd7369effd7"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">arm_compute::TensorInfo::padding</a></div><div class="ttdeci">PaddingSize padding() const override</div><div class="ttdoc">Padding of tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00255">TensorInfo.h:255</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cl_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cl.xhtml">arm_compute::test::cl</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_accessor_8h_source.xhtml#l00035">CLAccessor.h:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a97de03c31e0ca04be6960e2e3ffdca95"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a97de03c31e0ca04be6960e2e3ffdca95">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="_c_l_accessor_8h_xhtml"><div class="ttname"><a href="_c_l_accessor_8h.xhtml">CLAccessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1cl_1_1_c_l_accessor.xhtml">arm_compute::test::cl::CLAccessor</a></div><div class="ttdoc">Accessor implementation for CLTensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_accessor_8h_source.xhtml#l00038">CLAccessor.h:38</a></div></div>
<div class="ttc" id="_globals_8h_xhtml"><div class="ttname"><a href="_globals_8h.xhtml">Globals.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_small_shapes_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_small_shapes.xhtml">arm_compute::test::SmallShapes</a></div><div class="ttdoc">Data set containing small tensor shapes. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_datasets_8h_source.xhtml#l00106">ShapeDatasets.h:106</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="validation_2_datasets_8h_xhtml"><div class="ttname"><a href="validation_2_datasets_8h.xhtml">Datasets.h</a></div></div>
<div class="ttc" id="_type_printer_8h_xhtml"><div class="ttname"><a href="_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="_c_l_depth_convert_8h_xhtml"><div class="ttname"><a href="_c_l_depth_convert_8h.xhtml">CLDepthConvert.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a670cba074b4be0bf9af03e48250bd616"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(TensorShape shape)</div><div class="ttdoc">Create a valid region covering the enitre tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00452">Utils.h:452</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a4485bbf8646087afcb6d724e613da68f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a></div><div class="ttdeci">void depth_convert(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00414">TensorOperations.h:414</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_large_shapes_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_large_shapes.xhtml">arm_compute::test::LargeShapes</a></div><div class="ttdoc">Data set containing large tensor shapes. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_datasets_8h_source.xhtml#l00118">ShapeDatasets.h:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_aa8a4946cd749d482dd996874d295af85"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#aa8a4946cd749d482dd996874d295af85">arm_compute::ITensorAllocator::allocate</a></div><div class="ttdeci">virtual void allocate()=0</div><div class="ttdoc">Interface to be implemented by the child class to allocate the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4ced6442a379a75e8a6c4be093fb666b"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; TensorLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="benchmark_2main_8cpp_source.xhtml#l00050">main.cpp:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cl_xhtml_a6feffffa9821246ed8ac8fe7d633df57"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cl.xhtml#a6feffffa9821246ed8ac8fe7d633df57">arm_compute::test::cl::create_tensor</a></div><div class="ttdeci">CLTensor create_tensor(const TensorShape &amp;shape, DataType data_type, int num_channels=1, int fixed_point_position=0)</div><div class="ttdoc">Helper to create an empty tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_helper_8h_source.xhtml#l00047">Helper.h:47</a></div></div>
<div class="ttc" id="boost__wrapper_8h_xhtml"><div class="ttname"><a href="boost__wrapper_8h.xhtml">boost_wrapper.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fae1c8555fcf0ea2bb648a6fd527d658c0">arm_compute::ConvertPolicy::WRAP</a></div><div class="ttdoc">Wrap around. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7730e17dc901bdffefcf45b08bab135f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">arm_compute::test::validation::validate</a></div><div class="ttdeci">void validate(const arm_compute::ValidRegion &amp;region, const arm_compute::ValidRegion &amp;reference)</div><div class="ttdoc">Validate valid regions. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8cpp_source.xhtml#l00166">Validation.cpp:166</a></div></div>
<div class="ttc" id="_validation_8h_xhtml"><div class="ttname"><a href="_validation_8h.xhtml">Validation.h</a></div></div>
<div class="ttc" id="namespaceboost_xhtml"><div class="ttname"><a href="namespaceboost.xhtml">boost</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2_datasets_8h_source.xhtml#l00047">Datasets.h:47</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00088">Types.h:88</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fixture_8h_source.xhtml#l00033">CLFixture.h:33</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_simple_function_xhtml_ab5fd6e96c07aaaed2747c7e16ed5951e"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab5fd6e96c07aaaed2747c7e16ed5951e">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() overridefinal</div><div class="ttdoc">Run the kernels contained in the function. </div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00060">Types.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00204">Types.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_depth_convert_xhtml_a536f0de1a70ea80d40b0a24657ac5290"><div class="ttname"><a href="classarm__compute_1_1_c_l_depth_convert.xhtml#a536f0de1a70ea80d40b0a24657ac5290">arm_compute::CLDepthConvert::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, ConvertPolicy policy, uint32_t shift)</div><div class="ttdoc">Initialize the function&amp;#39;s source, destination. </div></div>
<div class="ttc" id="_c_l_2_helper_8h_xhtml"><div class="ttname"><a href="_c_l_2_helper_8h.xhtml">Helper.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8h_source.xhtml#l00039">CLTensor.h:39</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_f7024513cd67abef53e86ee9382ac5ce.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_2_depth_convert_8cpp.xhtml">DepthConvert.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
