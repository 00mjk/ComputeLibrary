<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/UNIT/FixedPoint.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fixed_point_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">FixedPoint.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_fixed_point_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_fixed_point_8h.xhtml">validation/FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_type_printer_8h.xhtml">TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;Utils.h&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validation_8h.xhtml">validation/Validation.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validation_user_configuration_8h.xhtml">validation/ValidationUserConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boost__wrapper_8h.xhtml">boost_wrapper.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;std::string func_names[] =</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="stringliteral">&quot;add&quot;</span>, <span class="stringliteral">&quot;sub&quot;</span>, <span class="stringliteral">&quot;mul&quot;</span>, <span class="stringliteral">&quot;exp&quot;</span>, <span class="stringliteral">&quot;log&quot;</span>, <span class="stringliteral">&quot;inv_sqrt&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;BOOST_AUTO_TEST_SUITE(UNIT)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;BOOST_AUTO_TEST_SUITE(FixedPoint)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;nightly&quot;))</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;BOOST_DATA_TEST_CASE(FixedPointQS8Inputs, <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make(func_names) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 7), func_name, frac_bits)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> std::string base_file_name = <a class="code" href="namespacearm__compute_1_1test.xhtml#a8f4fc4a0603d589eb1db7a8f539a6279">user_config</a>.path.get() + <span class="stringliteral">&quot;/dumps/&quot;</span> + func_name + <span class="stringliteral">&quot;_Q8.&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">cpp11::to_string</a>(frac_bits);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::ifstream     inputs_file{ base_file_name + <span class="stringliteral">&quot;.in&quot;</span>, std::ios::binary | std::ios::in };</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    BOOST_TEST_INFO(base_file_name + <span class="stringliteral">&quot;.in&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    BOOST_TEST_REQUIRE(inputs_file.good());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">float</span> float_val = 0.f;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Read first value</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    inputs_file.read(reinterpret_cast&lt;char *&gt;(&amp;float_val), <span class="keyword">sizeof</span>(float_val));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">while</span>(inputs_file.good())</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">// Convert to fixed point</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;int8_t&gt;</a> in_val(float_val, frac_bits);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// Check that the value didn&#39;t change</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        BOOST_TEST(static_cast&lt;float&gt;(in_val) == float_val);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Read next value</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        inputs_file.read(reinterpret_cast&lt;char *&gt;(&amp;float_val), <span class="keyword">sizeof</span>(float_val));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>) * boost::unit_test::label(<span class="stringliteral">&quot;nightly&quot;</span>))</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">// The last input argument specifies the expected number of failures for a</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">// given combination of (function name, number of fractional bits) as defined</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">// by the first two arguments.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;BOOST_DATA_TEST_CASE(FixedPointQS8Outputs, (<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make(func_names) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 7)) ^ (<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 32, 67 })),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                     func_name, frac_bits, expected_failures)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> std::string base_file_name = <a class="code" href="namespacearm__compute_1_1test.xhtml#a8f4fc4a0603d589eb1db7a8f539a6279">user_config</a>.path.get() + <span class="stringliteral">&quot;/dumps/&quot;</span> + func_name + <span class="stringliteral">&quot;_Q8.&quot;</span> + <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">cpp11::to_string</a>(frac_bits);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::ifstream     inputs_file{ base_file_name + <span class="stringliteral">&quot;.in&quot;</span>, std::ios::binary | std::ios::in };</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::ifstream     reference_file{ base_file_name + <span class="stringliteral">&quot;.out&quot;</span>, std::ios::binary | std::ios::in };</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    BOOST_TEST_INFO(base_file_name + <span class="stringliteral">&quot;.in&quot;</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    BOOST_TEST_REQUIRE(inputs_file.good());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    BOOST_TEST_INFO(base_file_name + <span class="stringliteral">&quot;.out&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    BOOST_TEST_REQUIRE(reference_file.good());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> step_size = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">std::pow</a>(2.f, -frac_bits);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">float</span>   float_val      = 0.f;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">float</span>   ref_val        = 0.f;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// Read first values</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    inputs_file.read(reinterpret_cast&lt;char *&gt;(&amp;float_val), <span class="keyword">sizeof</span>(float_val));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    reference_file.read(reinterpret_cast&lt;char *&gt;(&amp;ref_val), <span class="keyword">sizeof</span>(ref_val));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">while</span>(inputs_file.good() &amp;&amp; reference_file.good())</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;int8_t&gt;</a> in_val(float_val, frac_bits);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;int8_t&gt;</a> out_val(0.f, frac_bits);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordtype">float</span> tolerance = 0.f;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;add&quot;</span>)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            out_val = in_val + in_val;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;sub&quot;</span>)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            out_val = in_val - in_val; <span class="comment">//NOLINT</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;mul&quot;</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            tolerance = 1.f * step_size;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            out_val   = in_val * in_val;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;exp&quot;</span>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            tolerance = 2.f * step_size;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            out_val   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">fixed_point_arithmetic::exp</a>(in_val);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;log&quot;</span>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            tolerance = 4.f * step_size;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            out_val   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">fixed_point_arithmetic::log</a>(in_val);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(func_name == <span class="stringliteral">&quot;inv_sqrt&quot;</span>)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            tolerance = 5.f * step_size;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            out_val   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">fixed_point_arithmetic::inv_sqrt</a>(in_val);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        BOOST_TEST_INFO(<span class="stringliteral">&quot;input = &quot;</span> &lt;&lt; in_val);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        BOOST_TEST_INFO(<span class="stringliteral">&quot;output = &quot;</span> &lt;&lt; out_val);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        BOOST_TEST_INFO(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; ref_val);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        BOOST_TEST_INFO(<span class="stringliteral">&quot;tolerance = &quot;</span> &lt;&lt; tolerance);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        BOOST_TEST_WARN((<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;float&gt;(out_val) - ref_val) &lt;= tolerance));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;float&gt;(out_val) - ref_val) &gt; tolerance)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            ++num_mismatches;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Read next values</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        inputs_file.read(reinterpret_cast&lt;char *&gt;(&amp;float_val), <span class="keyword">sizeof</span>(float_val));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        reference_file.read(reinterpret_cast&lt;char *&gt;(&amp;ref_val), <span class="keyword">sizeof</span>(ref_val));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    BOOST_TEST(num_mismatches == expected_failures);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="namespacearm__compute_1_1test_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_g_e_m_m_8h_source.xhtml#l00039">GEMM.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ab2182d3de5899d24c8815f8df940bbc0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">arm_compute::test::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="tests_2validation_2_fixed_point_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_fixed_point_8h.xhtml">FixedPoint.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8c8ce35c61b4f71cccec28d18161eaa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">arm_compute::test::fixed_point_arithmetic::detail::log</a></div><div class="ttdeci">fixed_point&lt; T &gt; log(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">FixedPoint.h:920</a></div></div>
<div class="ttc" id="_type_printer_8h_xhtml"><div class="ttname"><a href="_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">arm_compute::test::fixed_point_arithmetic::fixed_point</a></div><div class="ttdoc">Arbitrary fixed-point arithmetic class. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00084">FixedPoint.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a2b7623d9dd3fde1d0a3bbe034967cff5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt</a></div><div class="ttdeci">fixed_point&lt; T &gt; inv_sqrt(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">FixedPoint.h:925</a></div></div>
<div class="ttc" id="_validation_user_configuration_8h_xhtml"><div class="ttname"><a href="_validation_user_configuration_8h.xhtml">ValidationUserConfiguration.h</a></div></div>
<div class="ttc" id="boost__wrapper_8h_xhtml"><div class="ttname"><a href="boost__wrapper_8h.xhtml">boost_wrapper.h</a></div></div>
<div class="ttc" id="_validation_8h_xhtml"><div class="ttname"><a href="_validation_8h.xhtml">Validation.h</a></div></div>
<div class="ttc" id="namespaceboost_xhtml"><div class="ttname"><a href="namespaceboost.xhtml">boost</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2_datasets_8h_source.xhtml#l00047">Datasets.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_af782da2c5016738c96c16fee5e17670f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">arm_compute::test::fixed_point_arithmetic::detail::pow</a></div><div class="ttdeci">fixed_point&lt; T &gt; pow(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; a)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00935">FixedPoint.h:935</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a8f4fc4a0603d589eb1db7a8f539a6279"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a8f4fc4a0603d589eb1db7a8f539a6279">arm_compute::test::user_config</a></div><div class="ttdeci">PerformanceUserConfiguration user_config</div><div class="ttdef"><b>Definition:</b> <a href="benchmark_2main_8cpp_source.xhtml#l00049">main.cpp:49</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fixture_8h_source.xhtml#l00033">CLFixture.h:33</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_0c108762cda89b68d4571cbbabdf46df.xhtml">UNIT</a></li><li class="navelem"><a class="el" href="_fixed_point_8cpp.xhtml">FixedPoint.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
