<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/Utils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('tests_2_utils_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Utils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="tests_2_utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_UTILS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_UTILS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_fixed_point_8h.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml">   45</a></span>&#160;<span class="keyword">namespace </span>cpp11</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#ifdef __ANDROID__</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_arithmetic&lt;typename std::decay&lt;T&gt;::type&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;std::string <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">to_string</a>(T &amp;&amp; value)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::stringstream stream;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    stream &lt;&lt; std::forward&lt;T&gt;(value);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> stream.str();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">stoi</a>(<span class="keyword">const</span> std::string &amp;str)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">int</span>               value = 0;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">stoul</a>(<span class="keyword">const</span> std::string &amp;str)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>     value = 0;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">stof</a>(<span class="keyword">const</span> std::string &amp;str)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    std::stringstream stream(str);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">float</span>             value = 0.f;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">round</a>(T value)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">return ::round</a>(value);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">trunc</a>(T value)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">return ::trunc</a>(value);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">copysign</a>(T x, T y)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">return ::copysign</a>(x, y);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">  172</a></span>&#160;std::string <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">to_string</a>(T &amp;&amp;value)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">return ::std::to_string</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">  187</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">stoi</a>(Ts &amp;&amp;... args)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">return ::std::stoi</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">  202</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">stoul</a>(Ts &amp;&amp;... args)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">return ::std::stoul</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">  217</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">stof</a>(Ts &amp;&amp;... args)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">return ::std::stof</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">  232</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">round</a>(T value)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">std::round</a>(value);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">  247</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">trunc</a>(T value)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">std::trunc</a>(value);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">  263</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">copysign</a>(T x, T y)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">std::copysign</a>(x, y);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">  276</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">round_half_up</a>(T value)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> std::floor(value + 0.5f);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">  289</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">round_half_even</a>(T value, T epsilon = std::numeric_limits&lt;T&gt;::epsilon())</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    T positive_value = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(value);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    T ipart          = 0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::modf(positive_value, &amp;ipart);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// If &#39;value&#39; is exactly halfway between two integers</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(positive_value - (ipart + 0.5f)) &lt; epsilon)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="comment">// If &#39;ipart&#39; is even then return &#39;ipart&#39;</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span>(std::fmod(ipart, 2.f) &lt; epsilon)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(ipart, value);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="comment">// Else return the nearest even integer</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(std::ceil(ipart + 0.5f), value);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// Otherwise use the usual round to closest</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(<a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">cpp11::round</a>(positive_value), value);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;} <span class="comment">// namespace cpp11</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp14.xhtml">  310</a></span>&#160;<span class="keyword">namespace </span>cpp14</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00316"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">  316</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">  318</a></span>&#160;    <span class="keyword">typedef</span> std::unique_ptr&lt;T&gt; <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">_Single_object</a>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;};</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml">  322</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a>&lt;T[]&gt;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;{</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">  324</a></span>&#160;    <span class="keyword">typedef</span> std::unique_ptr&lt;T[]&gt; <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">_Unknown_bound</a>;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;};</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml">  328</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if</a>&lt;T[N]&gt;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">  330</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">_Known_bound</a>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;};</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">_Unique_if&lt;T&gt;::_Single_object</a></div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#ab7c2ef4dca85bd72e5c86a8ca68e92fa">  335</a></span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#a5d1b87b35be0492ab16d5c7030f9ded1">make_unique</a>(Args &amp;&amp;... args)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;T&gt;(<span class="keyword">new</span> T(std::forward&lt;Args&gt;(args)...));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt;T&gt;::_Unknown_bound</a></div><div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#ad1911aa34fd4c2a7d3a3a3c4a12bf6af">  342</a></span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#a5d1b87b35be0492ab16d5c7030f9ded1">make_unique</a>(<span class="keywordtype">size_t</span> n)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_extent&lt;T&gt;::type <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;T&gt;(<span class="keyword">new</span> U[n]());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt;T&gt;::_Known_bound</a></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<a class="code" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#a5d1b87b35be0492ab16d5c7030f9ded1">make_unique</a>(Args &amp;&amp;...) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;} <span class="comment">// namespace cpp14</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1traits.xhtml">  353</a></span>&#160;<span class="keyword">namespace </span>traits</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">// *INDENT-OFF*</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">// clang-format off</span></div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">  357</a></span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a> { };</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml#a3085ed9ad7c9b1c88dcec24108730e54">  358</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;uint8_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml#a3085ed9ad7c9b1c88dcec24108730e54">type</a> = uint16_t; };</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml#a8812bf779dca54354aa6ad00cef14a73">  359</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;int8_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml#a8812bf779dca54354aa6ad00cef14a73">type</a> = int16_t; };</div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml#a43022da9f622deba3284b748a6885e23">  360</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;uint16_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml#a43022da9f622deba3284b748a6885e23">type</a> = uint32_t; };</div><div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml#a4f14ffc6d6f6ca92afb1baf996fc9305">  361</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;int16_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml#a4f14ffc6d6f6ca92afb1baf996fc9305">type</a> = int32_t; };</div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml#a9659bbcc7fc016eda242219021c7980b">  362</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;uint32_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml#a9659bbcc7fc016eda242219021c7980b">type</a> = uint64_t; };</div><div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml#a70ca3d636283d6713220cd8af5fc07b3">  363</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;int32_t&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml#a70ca3d636283d6713220cd8af5fc07b3">type</a> = int64_t; };</div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml#a05cacf975133703fccd67d8b60ed9ae0">  364</a></span>&#160;<span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote</a>&lt;float&gt; { <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml#a05cacf975133703fccd67d8b60ed9ae0">type</a> = float; };</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">  367</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">promote_t</a> = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote&lt;T&gt;::type</a>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1traits.xhtml#a381020121bcfd7b20c6bc4ecb807caa1">  370</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test_1_1traits.xhtml#a381020121bcfd7b20c6bc4ecb807caa1">make_signed_conditional_t</a> = <span class="keyword">typename</span> std::conditional&lt;std::is_integral&lt;T&gt;::value, std::make_signed&lt;T&gt;, std::common_type&lt;T&gt;&gt;::type;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">// clang-format on</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">// *INDENT-ON*</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">  381</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a>(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">switch</span>(channel)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">Channel::R</a>:</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">Channel::G</a>:</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">Channel::B</a>:</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;}</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">  400</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">get_channel_format</a>(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">switch</span>(channel)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">Channel::R</a>:</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">Channel::G</a>:</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">Channel::B</a>:</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Unsupported channel&quot;</span>);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">  418</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a>(F &amp;&amp;, <span class="keyword">const</span> T &amp;value)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">  428</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a>(F &amp;&amp;func, T &amp;&amp;value1, U &amp;&amp;value2) -&gt; decltype(func(value1, value2))</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> func(value1, value2);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span> I, <span class="keyword">typename</span> T, <span class="keyword">typename</span>... Vs&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a89322cccde5e0a27d3a41085d3fd366c">  441</a></span>&#160;<span class="keyword">inline</span> I <a class="code" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a>(F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;... values)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a>(std::forward&lt;F&gt;(func), func(std::forward&lt;I&gt;(initial), std::forward&lt;T&gt;(value)), std::forward&lt;Vs&gt;(values)...);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">  452</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="code" href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">shape_to_valid_region</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> anchor;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(std::max&lt;int&gt;(0, shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() - 1), 0);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(std::move(anchor), std::move(shape));</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">  466</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="code" href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">shape_to_valid_region_undefined_border</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;{</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() &lt; 2);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> anchor;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(std::max&lt;int&gt;(0, shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() - 1), 0);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    anchor.set(0, border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    anchor.set(1, border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0cb0e1f5da2e1cc2e0ea5690450f53e8">set</a>(0, shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>() - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0cb0e1f5da2e1cc2e0ea5690450f53e8">set</a>(1, shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>(std::move(anchor), shape);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">  486</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">required_padding</a>(<span class="keywordtype">int</span> size, <span class="keywordtype">int</span> step)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;{</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">return</span> ((size + step - 1) / step) * step - size;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a08e86555c8b4d8ae148173d0bda4552f">  499</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a08e86555c8b4d8ae148173d0bda4552f">required_padding_undefined_border_write</a>(<span class="keywordtype">int</span> size, <span class="keywordtype">int</span> step, <span class="keywordtype">int</span> border_size)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;{</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">required_padding</a>(size, step) + border_size;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#aaaa9677420848c94f3a8fd0c3bb0d1fc">  512</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#aaaa9677420848c94f3a8fd0c3bb0d1fc">required_padding_undefined_border_read</a>(<span class="keywordtype">int</span> size, <span class="keywordtype">int</span> read_step, <span class="keywordtype">int</span> process_step)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">required_padding</a>(size, process_step) + read_step - process_step;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00526"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">  526</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(<span class="keywordtype">void</span> *ptr, T value, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">switch</span>(data_type)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>:</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint16_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>uint64_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int64_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">#ifdef ENABLE_FP16</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_FP16 */</span><span class="preprocessor"></span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">double</span> *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">size_t</span> *<span class="keyword">&gt;</span>(ptr) = value;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;}</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00581"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">  581</a></span>&#160;T <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>(T val)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;{</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">if</span>(val &gt; static_cast&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;U&gt;::max</a>()))</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    {</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        val = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;U&gt;::max</a>());</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">if</span>(val &lt; static_cast&lt;T&gt;(std::numeric_limits&lt;U&gt;::lowest()))</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        val = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(std::numeric_limits&lt;U&gt;::lowest());</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">return</span> val;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;}</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... T&gt;</div><div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">  597</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">common_promoted_signed_type</a></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div><div class="line"><a name="l00599"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a5dc4a681965ff1118a0491b07867c032">  599</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a5dc4a681965ff1118a0491b07867c032">common_type</a>       = <span class="keyword">typename</span> std::common_type&lt;T...&gt;::type;</div><div class="line"><a name="l00600"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#aeab553c4422f2a498954db0b4eb15789">  600</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#aeab553c4422f2a498954db0b4eb15789">promoted_type</a>     = <a class="code" href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">traits::promote_t&lt;common_type&gt;</a>;</div><div class="line"><a name="l00601"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">  601</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">intermediate_type</a> = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1test_1_1traits.xhtml#a381020121bcfd7b20c6bc4ecb807caa1">traits::make_signed_conditional_t&lt;promoted_type&gt;::type</a>;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;};</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">  611</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <span class="keywordtype">int</span> index)</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;{</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordtype">int</span> num_elements = shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>();</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(index &lt; 0 || index &gt;= num_elements, <span class="stringliteral">&quot;Index has to be in [0, num_elements]&quot;</span>);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(num_elements == 0, <span class="stringliteral">&quot;Cannot create coordinate from empty shape&quot;</span>);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord{ 0 };</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> d = shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() - 1; d &gt;= 0; --d)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        num_elements /= shape[d];</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        coord.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a0cb0e1f5da2e1cc2e0ea5690450f53e8">set</a>(d, index / num_elements);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        index %= num_elements;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">return</span> coord;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">  640</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>() == 0, <span class="stringliteral">&quot;Cannot get index from empty shape&quot;</span>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() == 0, <span class="stringliteral">&quot;Cannot get index of empty coordinate&quot;</span>);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordtype">int</span> index    = 0;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordtype">int</span> dim_size = 1;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++i)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        index += coord[i] * dim_size;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        dim_size *= shape[i];</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">return</span> index;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;}</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">  658</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">is_in_valid_region</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;{</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() != coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(), <span class="stringliteral">&quot;Shapes of valid region and coordinates do not agree&quot;</span>);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> d = 0; <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(d) &lt; coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++d)</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    {</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordflow">if</span>(coord[d] &lt; valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#aec54a7ff1ca347fdda25821cfb8fd0ed">start</a>(d) || coord[d] &gt;= valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#adc8388028db66f138de6b1aca27ad620">end</a>(d))</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        }</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ad473ea84f8bab197d5e32d7693f3f121"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">arm_compute::test::cpp11::round_half_up</a></div><div class="ttdeci">T round_half_up(T value)</div><div class="ttdoc">Round floating-point value with half value rounding to positive infinity. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00276">Utils.h:276</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a42d7dd749c32cb5d140cbc27a991c17b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">arm_compute::test::cpp11::stoul</a></div><div class="ttdeci">int stoul(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to unsigned long. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00202">Utils.h:202</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00195">Types.h:195</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">arm_compute::test::cpp14::_Unique_if</a></div><div class="ttdoc">make_unqiue is missing in CPP11. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00316">Utils.h:316</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4_xhtml_a8812bf779dca54354aa6ad00cef14a73"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml#a8812bf779dca54354aa6ad00cef14a73">arm_compute::test::traits::promote&lt; int8_t &gt;::type</a></div><div class="ttdeci">int16_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00359">Utils.h:359</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a740c4a41f6fce7cd8421b37f536314a8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">arm_compute::test::cpp11::stof</a></div><div class="ttdeci">int stof(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to float. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00217">Utils.h:217</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">arm_compute::DataType::QS8</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a6b97d7bba7b5cee833eb5c2282e8d246"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">arm_compute::test::shape_to_valid_region_undefined_border</a></div><div class="ttdeci">ValidRegion shape_to_valid_region_undefined_border(TensorShape shape, BorderSize border_size)</div><div class="ttdoc">Create a valid region covering the tensor shape with UNDEFINED border mode and specified border size...</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00466">Utils.h:466</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00119">Types.h:119</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a1ebbb23b0094d47c51226d58e17e6447"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">arm_compute::test::foldl</a></div><div class="ttdeci">T foldl(F &amp;&amp;, const T &amp;value)</div><div class="ttdoc">Base case of foldl. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00418">Utils.h:418</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4_xhtml_a4f14ffc6d6f6ca92afb1baf996fc9305"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml#a4f14ffc6d6f6ca92afb1baf996fc9305">arm_compute::test::traits::promote&lt; int16_t &gt;::type</a></div><div class="ttdeci">int32_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00361">Utils.h:361</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00131">Types.h:131</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a356470553f2afd5673a41cf4da48e33b"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">arm_compute::test::required_padding</a></div><div class="ttdeci">int required_padding(int size, int step)</div><div class="ttdoc">Calculate the required padding given the available size and the required. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00486">Utils.h:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_aa337ab76176f3c4193642ac6de3a61cf"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">arm_compute::test::get_format_for_channel</a></div><div class="ttdeci">Format get_format_for_channel(Channel channel)</div><div class="ttdoc">Look up the format corresponding to a channel. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00381">Utils.h:381</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a921d858259fce667e4680f419b5db6d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">arm_compute::test::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00263">Utils.h:263</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdoc">Blue channel. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a58ee979a599b3b6a2587964106b1910c"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, const Coordinates &amp;coord)</div><div class="ttdoc">Check if a coordinate is within a valid region. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00658">Utils.h:658</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1traits_xhtml_ac20ca549fa27b2eed44367745055a233"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">arm_compute::test::traits::promote_t</a></div><div class="ttdeci">typename promote&lt; T &gt;::type promote_t</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00367">Utils.h:367</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp14_xhtml_a5d1b87b35be0492ab16d5c7030f9ded1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp14.xhtml#a5d1b87b35be0492ab16d5c7030f9ded1">arm_compute::test::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Known_bound make_unique(Args &amp;&amp;...)=delete</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ae8ee44ec85e2dd519488bfccf91db2dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">arm_compute::test::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00247">Utils.h:247</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4_xhtml_a7bdc8412f0630ce38a08b0455830216d"><div class="ttname"><a href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml#a7bdc8412f0630ce38a08b0455830216d">arm_compute::test::cpp14::_Unique_if&lt; T[]&gt;::_Unknown_bound</a></div><div class="ttdeci">std::unique_ptr&lt; T[]&gt; _Unknown_bound</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00324">Utils.h:324</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">arm_compute::test::cpp11::stoi</a></div><div class="ttdeci">int stoi(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to integer. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00187">Utils.h:187</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ab2182d3de5899d24c8815f8df940bbc0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">arm_compute::test::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00197">Types.h:197</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a982730e6f0da5f9490f59bc5f6bb3f27"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00074">Dimensions.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a></div><div class="ttdoc">Red channel. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_adc8388028db66f138de6b1aca27ad620"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#adc8388028db66f138de6b1aca27ad620">arm_compute::ValidRegion::end</a></div><div class="ttdeci">int end(unsigned int d) const </div><div class="ttdoc">Return the end of the valid region for the given dimension d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00640">Utils.h:640</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1traits_xhtml_a381020121bcfd7b20c6bc4ecb807caa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1traits.xhtml#a381020121bcfd7b20c6bc4ecb807caa1">arm_compute::test::traits::make_signed_conditional_t</a></div><div class="ttdeci">typename std::conditional&lt; std::is_integral&lt; T &gt;::value, std::make_signed&lt; T &gt;, std::common_type&lt; T &gt;&gt;::type make_signed_conditional_t</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00370">Utils.h:370</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">2 channel, 1 U8 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_aec54a7ff1ca347fdda25821cfb8fd0ed"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#aec54a7ff1ca347fdda25821cfb8fd0ed">arm_compute::ValidRegion::start</a></div><div class="ttdeci">int start(unsigned int d) const </div><div class="ttdoc">Return the start of the valid region for the given dimension d. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00107">Types.h:107</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_ac7dbe33793790fc37a5eda11ed6b0273"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">arm_compute::test::get_channel_format</a></div><div class="ttdeci">Format get_channel_format(Channel channel)</div><div class="ttdoc">Return the format of a channel. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00400">Utils.h:400</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a1e6934e95738573214c2ce1d6648d116"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">arm_compute::test::store_value_with_data_type</a></div><div class="ttdeci">void store_value_with_data_type(void *ptr, T value, DataType data_type)</div><div class="ttdoc">Write the value after casting the pointer according to data_type. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00526">Utils.h:526</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4_xhtml_a9659bbcc7fc016eda242219021c7980b"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml#a9659bbcc7fc016eda242219021c7980b">arm_compute::test::traits::promote&lt; uint32_t &gt;::type</a></div><div class="ttdeci">uint64_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00362">Utils.h:362</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="arm__compute_2core_2_fixed_point_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_fixed_point_8h.xhtml">FixedPoint.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00304">Types.h:304</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a08e86555c8b4d8ae148173d0bda4552f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a08e86555c8b4d8ae148173d0bda4552f">arm_compute::test::required_padding_undefined_border_write</a></div><div class="ttdeci">int required_padding_undefined_border_write(int size, int step, int border_size)</div><div class="ttdoc">Calculate the required padding for writing operation with UNDEFINED border mode. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00499">Utils.h:499</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a670cba074b4be0bf9af03e48250bd616"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(TensorShape shape)</div><div class="ttdoc">Create a valid region covering the enitre tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00452">Utils.h:452</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1common__promoted__signed__type_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">arm_compute::test::common_promoted_signed_type</a></div><div class="ttdoc">Find the signed promoted common type. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00597">Utils.h:597</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_xhtml_a110afbff84e3935821a5dd174781da73"><div class="ttname"><a href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml#a110afbff84e3935821a5dd174781da73">arm_compute::test::cpp14::_Unique_if::_Single_object</a></div><div class="ttdeci">std::unique_ptr&lt; T &gt; _Single_object</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00318">Utils.h:318</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a0cb0e1f5da2e1cc2e0ea5690450f53e8"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a0cb0e1f5da2e1cc2e0ea5690450f53e8">arm_compute::TensorShape::set</a></div><div class="ttdeci">void set(size_t dimension, size_t value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00074">TensorShape.h:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00198">Types.h:198</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00196">Types.h:196</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a5a368408d8f055f372488126469ff01c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">arm_compute::test::cpp11::round</a></div><div class="ttdeci">T round(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00232">Utils.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_aac60e291929bd45df7800bb860f7bf4f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">arm_compute::test::cpp11::round_half_even</a></div><div class="ttdeci">T round_half_even(T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</div><div class="ttdoc">Round floating-point value with half value rounding to nearest even. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00289">Utils.h:289</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4_xhtml_a70ca3d636283d6713220cd8af5fc07b3"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml#a70ca3d636283d6713220cd8af5fc07b3">arm_compute::test::traits::promote&lt; int32_t &gt;::type</a></div><div class="ttdeci">int64_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00363">Utils.h:363</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00109">Dimensions.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4_xhtml_a05cacf975133703fccd67d8b60ed9ae0"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml#a05cacf975133703fccd67d8b60ed9ae0">arm_compute::test::traits::promote&lt; float &gt;::type</a></div><div class="ttdeci">float type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00364">Utils.h:364</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1common__promoted__signed__type_xhtml_aeab553c4422f2a498954db0b4eb15789"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#aeab553c4422f2a498954db0b4eb15789">arm_compute::test::common_promoted_signed_type::promoted_type</a></div><div class="ttdeci">traits::promote_t&lt; common_type &gt; promoted_type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00600">Utils.h:600</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1common__promoted__signed__type_xhtml_a6d8309776a9cb10567df1735666919ff"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">arm_compute::test::common_promoted_signed_type::intermediate_type</a></div><div class="ttdeci">typename traits::make_signed_conditional_t&lt; promoted_type &gt;::type intermediate_type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00601">Utils.h:601</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_aaaa9677420848c94f3a8fd0c3bb0d1fc"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#aaaa9677420848c94f3a8fd0c3bb0d1fc">arm_compute::test::required_padding_undefined_border_read</a></div><div class="ttdeci">int required_padding_undefined_border_read(int size, int read_step, int process_step)</div><div class="ttdoc">Calculate the required padding for reading operation with UNDEFINED border mode. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00512">Utils.h:512</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00581">Utils.h:581</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a></div><div class="ttdoc">Green channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00106">TensorShape.h:106</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4_xhtml_a3085ed9ad7c9b1c88dcec24108730e54"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml#a3085ed9ad7c9b1c88dcec24108730e54">arm_compute::test::traits::promote&lt; uint8_t &gt;::type</a></div><div class="ttdeci">uint16_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00358">Utils.h:358</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">FixedPoint.h:880</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00088">Types.h:88</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4_xhtml_a344694425c9a8cf20c0869bdc4c675b6"><div class="ttname"><a href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml#a344694425c9a8cf20c0869bdc4c675b6">arm_compute::test::cpp14::_Unique_if&lt; T[N]&gt;::_Known_bound</a></div><div class="ttdeci">void _Known_bound</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00330">Utils.h:330</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00060">Types.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">arm_compute::test::traits::promote</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00357">Utils.h:357</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4_xhtml_a43022da9f622deba3284b748a6885e23"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml#a43022da9f622deba3284b748a6885e23">arm_compute::test::traits::promote&lt; uint16_t &gt;::type</a></div><div class="ttdeci">uint32_t type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00360">Utils.h:360</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1common__promoted__signed__type_xhtml_a5dc4a681965ff1118a0491b07867c032"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a5dc4a681965ff1118a0491b07867c032">arm_compute::test::common_promoted_signed_type::common_type</a></div><div class="ttdeci">typename std::common_type&lt; T... &gt;::type common_type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00599">Utils.h:599</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00115">Error.h:115</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="tests_2_utils_8h.xhtml">Utils.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
