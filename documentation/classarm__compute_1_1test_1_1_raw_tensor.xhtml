<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: RawTensor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1_raw_tensor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">RawTensor Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Simple tensor object that stores elements in a consecutive chunk of memory.  
 <a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a9c3b791dba4a4cff3785264b9260e9d5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> = uint8_t</td></tr>
<tr class="separator:a9c3b791dba4a4cff3785264b9260e9d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0507d380866a3466b88018d5553e6dad"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0507d380866a3466b88018d5553e6dad">Buffer</a> = std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a>[]&gt;</td></tr>
<tr class="separator:a0507d380866a3466b88018d5553e6dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad5f076c202d054557fde207a7e3b3b41"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">RawTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>, int <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:ad5f076c202d054557fde207a7e3b3b41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>.  <a href="#ad5f076c202d054557fde207a7e3b3b41">More...</a><br /></td></tr>
<tr class="separator:ad5f076c202d054557fde207a7e3b3b41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af878b348cac7129792bd35d9a016b2d4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af878b348cac7129792bd35d9a016b2d4">RawTensor</a> (<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, int <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a>=1, int <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>=0)</td></tr>
<tr class="memdesc:af878b348cac7129792bd35d9a016b2d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type.  <a href="#af878b348cac7129792bd35d9a016b2d4">More...</a><br /></td></tr>
<tr class="separator:af878b348cac7129792bd35d9a016b2d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ac1b3afa1c0a4618768b43a7a0d930cd6">RawTensor</a> (const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor)</td></tr>
<tr class="memdesc:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#ac1b3afa1c0a4618768b43a7a0d930cd6">More...</a><br /></td></tr>
<tr class="separator:ac1b3afa1c0a4618768b43a7a0d930cd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf951228abf3337929f26f7c0feedcac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abf951228abf3337929f26f7c0feedcac">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> tensor)</td></tr>
<tr class="memdesc:abf951228abf3337929f26f7c0feedcac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a deep copy of the given <code>tensor</code>.  <a href="#abf951228abf3337929f26f7c0feedcac">More...</a><br /></td></tr>
<tr class="separator:abf951228abf3337929f26f7c0feedcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dcfdb740cfee882a573929d51e3cf9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a5dcfdb740cfee882a573929d51e3cf9b">RawTensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&amp;)=default</td></tr>
<tr class="separator:a5dcfdb740cfee882a573929d51e3cf9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ab8156de913df911b4ad1ad46f51313"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a1ab8156de913df911b4ad1ad46f51313">~RawTensor</a> ()=default</td></tr>
<tr class="separator:a1ab8156de913df911b4ad1ad46f51313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0914d4c14c88792d8fd2197c612b927e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0914d4c14c88792d8fd2197c612b927e">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</td></tr>
<tr class="memdesc:a0914d4c14c88792d8fd2197c612b927e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return value at <code>offset</code> in the buffer.  <a href="#a0914d4c14c88792d8fd2197c612b927e">More...</a><br /></td></tr>
<tr class="separator:a0914d4c14c88792d8fd2197c612b927e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b10356eacc7faa2c59b46c2398b5022"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a2b10356eacc7faa2c59b46c2398b5022">operator[]</a> (size_t <a class="el" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) const </td></tr>
<tr class="memdesc:a2b10356eacc7faa2c59b46c2398b5022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return constant value at <code>offset</code> in the buffer.  <a href="#a2b10356eacc7faa2c59b46c2398b5022">More...</a><br /></td></tr>
<tr class="separator:a2b10356eacc7faa2c59b46c2398b5022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13761831550669f43f4edee978181c46"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a> () const </td></tr>
<tr class="memdesc:a13761831550669f43f4edee978181c46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shape of the tensor.  <a href="#a13761831550669f43f4edee978181c46">More...</a><br /></td></tr>
<tr class="separator:a13761831550669f43f4edee978181c46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448f57f9d6aec61b3d85b898affe4a2e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a> () const </td></tr>
<tr class="memdesc:a448f57f9d6aec61b3d85b898affe4a2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of each element in the tensor in bytes.  <a href="#a448f57f9d6aec61b3d85b898affe4a2e">More...</a><br /></td></tr>
<tr class="separator:a448f57f9d6aec61b3d85b898affe4a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac782da1f912bceb5d8ad00c8dc892ac"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a> () const </td></tr>
<tr class="memdesc:aac782da1f912bceb5d8ad00c8dc892ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Total size of the tensor in bytes.  <a href="#aac782da1f912bceb5d8ad00c8dc892ac">More...</a><br /></td></tr>
<tr class="separator:aac782da1f912bceb5d8ad00c8dc892ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c875a3203d902e2ad6bc3045355e69e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a> () const </td></tr>
<tr class="memdesc:a0c875a3203d902e2ad6bc3045355e69e"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> format of the tensor.  <a href="#a0c875a3203d902e2ad6bc3045355e69e">More...</a><br /></td></tr>
<tr class="separator:a0c875a3203d902e2ad6bc3045355e69e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a> () const </td></tr>
<tr class="memdesc:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type of the tensor.  <a href="#a45cc7b9a37aa9f0e7d479248a27e1f58">More...</a><br /></td></tr>
<tr class="separator:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd107d6e8ccfc38f781be8683d8141c2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a> () const </td></tr>
<tr class="memdesc:abd107d6e8ccfc38f781be8683d8141c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of channels of the tensor.  <a href="#abd107d6e8ccfc38f781be8683d8141c2">More...</a><br /></td></tr>
<tr class="separator:abd107d6e8ccfc38f781be8683d8141c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5fe769d05a0f7dfee63972bdbd54261"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a> () const </td></tr>
<tr class="memdesc:ab5fe769d05a0f7dfee63972bdbd54261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of elements of the tensor.  <a href="#ab5fe769d05a0f7dfee63972bdbd54261">More...</a><br /></td></tr>
<tr class="separator:ab5fe769d05a0f7dfee63972bdbd54261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16bb8940c9d6aff998db9bd0ba011ffe"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a> () const </td></tr>
<tr class="memdesc:a16bb8940c9d6aff998db9bd0ba011ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of bits for the fractional part of the fixed point numbers.  <a href="#a16bb8940c9d6aff998db9bd0ba011ffe">More...</a><br /></td></tr>
<tr class="separator:a16bb8940c9d6aff998db9bd0ba011ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b53deaf986aa58ffa0090cc241dec64"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a> () const </td></tr>
<tr class="memdesc:a7b53deaf986aa58ffa0090cc241dec64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant pointer to the underlying buffer.  <a href="#a7b53deaf986aa58ffa0090cc241dec64">More...</a><br /></td></tr>
<tr class="separator:a7b53deaf986aa58ffa0090cc241dec64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1f37e90be932d4d38f607f225ab2b4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ac1f37e90be932d4d38f607f225ab2b4f">data</a> ()</td></tr>
<tr class="memdesc:ac1f37e90be932d4d38f607f225ab2b4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the underlying buffer.  <a href="#ac1f37e90be932d4d38f607f225ab2b4f">More...</a><br /></td></tr>
<tr class="separator:ac1f37e90be932d4d38f607f225ab2b4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53a404b9a0d663c5d60b199799ba185"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af53a404b9a0d663c5d60b199799ba185">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord) const </td></tr>
<tr class="memdesc:af53a404b9a0d663c5d60b199799ba185"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to the specified element.  <a href="#af53a404b9a0d663c5d60b199799ba185">More...</a><br /></td></tr>
<tr class="separator:af53a404b9a0d663c5d60b199799ba185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7830529ae614a236c4663910bae31af4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7830529ae614a236c4663910bae31af4">operator()</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</td></tr>
<tr class="memdesc:a7830529ae614a236c4663910bae31af4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access to the specified element.  <a href="#a7830529ae614a236c4663910bae31af4">More...</a><br /></td></tr>
<tr class="separator:a7830529ae614a236c4663910bae31af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a3d880156c78661ccfe9d3b706d260d56"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a> (<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor1, <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor2)</td></tr>
<tr class="memdesc:a3d880156c78661ccfe9d3b706d260d56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the content of the provided tensors.  <a href="#a3d880156c78661ccfe9d3b706d260d56">More...</a><br /></td></tr>
<tr class="separator:a3d880156c78661ccfe9d3b706d260d56"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Simple tensor object that stores elements in a consecutive chunk of memory. </p>
<p>It can be created by either loading an image from a file which also initialises the content of the tensor or by explcitly specifying the size. The latter leaves the content uninitialised.</p>
<p>Furthermore, the class provides methods to convert the tensor's values into different image format. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a0507d380866a3466b88018d5553e6dad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0507d380866a3466b88018d5553e6dad">Buffer</a> =  std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a>[]&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00082">82</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9c3b791dba4a4cff3785264b9260e9d5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">BufferType</a> =  uint8_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_raw_tensor_8h_source.xhtml#l00081">81</a> of file <a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad5f076c202d054557fde207a7e3b3b41"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>format</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      _shape(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>),</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      _format(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>),</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _fixed_point_position(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a16bb8940c9d6aff998db9bd0ba011ffe"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">arm_compute::test::RawTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const </div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a13761831550669f43f4edee978181c46"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">arm_compute::test::RawTensor::shape</a></div><div class="ttdeci">TensorShape shape() const </div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor.cpp:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_aac782da1f912bceb5d8ad00c8dc892ac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">arm_compute::test::RawTensor::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a0c875a3203d902e2ad6bc3045355e69e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">arm_compute::test::RawTensor::format</a></div><div class="ttdeci">Format format() const </div><div class="ttdoc">Image format of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00107">RawTensor.cpp:107</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af878b348cac7129792bd35d9a016b2d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an uninitialised tensor of the given <code>shape</code> and <code>data</code> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Shape of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type of the new raw tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>(Optional) Number of channels (default = 1). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part of the fixed point numbers (default = 0). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      _shape(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      _data_type(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      _num_channels(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a>),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      _fixed_point_position(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_abd107d6e8ccfc38f781be8683d8141c2"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">arm_compute::test::RawTensor::num_channels</a></div><div class="ttdeci">int num_channels() const </div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00124">RawTensor.cpp:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a16bb8940c9d6aff998db9bd0ba011ffe"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">arm_compute::test::RawTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const </div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor.cpp:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a13761831550669f43f4edee978181c46"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">arm_compute::test::RawTensor::shape</a></div><div class="ttdeci">TensorShape shape() const </div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor.cpp:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_aac782da1f912bceb5d8ad00c8dc892ac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">arm_compute::test::RawTensor::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a45cc7b9a37aa9f0e7d479248a27e1f58"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">arm_compute::test::RawTensor::data_type</a></div><div class="ttdeci">DataType data_type() const </div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor.cpp:112</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac1b3afa1c0a4618768b43a7a0d930cd6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the given <code>tensor</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>To be copied tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor::data()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    : _buffer(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      _shape(tensor.shape()),</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      _format(tensor.format()),</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      _fixed_point_position(tensor.fixed_point_position())</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(tensor.size());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::copy(tensor.data(), tensor.data() + <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>(), _buffer.get());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_aac782da1f912bceb5d8ad00c8dc892ac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">arm_compute::test::RawTensor::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor.cpp:101</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5dcfdb740cfee882a573929d51e3cf9b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1ab8156de913df911b4ad1ad46f51313"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a7b53deaf986aa58ffa0090cc241dec64"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> * data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant pointer to the underlying buffer. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP::accumulate()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP::accumulate_squared()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP::accumulate_weighted()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP::bitwise_and()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP::bitwise_not()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP::bitwise_or()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP::bitwise_xor()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP::box3x3()</a>, <a class="el" href="_tensor_library_8cpp_source.xhtml#l00223">TensorLibrary::fill()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP::integral_image()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00059">RawTensor::RawTensor()</a>, and <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP::threshold()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac1f37e90be932d4d38f607f225ab2b4f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> * data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pointer to the underlying buffer. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a45cc7b9a37aa9f0e7d479248a27e1f58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Data type of the tensor. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00201">arm_compute::data_type_from_format()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP::accumulate()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP::accumulate_squared()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP::accumulate_weighted()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP::bitwise_and()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP::bitwise_not()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP::bitwise_or()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP::bitwise_xor()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP::box3x3()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>, <a class="el" href="_tensor_library_8h_source.xhtml#l00388">TensorLibrary::fill()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP::integral_image()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP::threshold()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span>(_format != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(_format);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> _data_type;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59846ef5ca75cd81cdb7e8a1ce08f9db"><div class="ttname"><a href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">arm_compute::data_type_from_format</a></div><div class="ttdeci">DataType data_type_from_format(Format format)</div><div class="ttdoc">Return the data type used by a given single-planar pixel format. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00201">Utils.h:201</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a448f57f9d6aec61b3d85b898affe4a2e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Size of each element in the tensor in bytes. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">arm_compute::element_size_from_data_type()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00124">RawTensor::num_channels()</a>.</p>

<p>Referenced by <a class="el" href="_tensor_library_8h_source.xhtml#l00388">TensorLibrary::fill()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00158">RawTensor::operator()()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor::size()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a>() * <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_abd107d6e8ccfc38f781be8683d8141c2"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">arm_compute::test::RawTensor::num_channels</a></div><div class="ttdeci">int num_channels() const </div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00124">RawTensor.cpp:124</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a45cc7b9a37aa9f0e7d479248a27e1f58"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">arm_compute::test::RawTensor::data_type</a></div><div class="ttdeci">DataType data_type() const </div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor.cpp:112</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a16bb8940c9d6aff998db9bd0ba011ffe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int fixed_point_position </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The number of bits for the fractional part of the fixed point numbers. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP::accumulate()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP::accumulate_squared()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP::accumulate_weighted()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP::bitwise_and()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP::bitwise_not()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP::bitwise_or()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP::bitwise_xor()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP::box3x3()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP::integral_image()</a>, and <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP::threshold()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> _fixed_point_position;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0c875a3203d902e2ad6bc3045355e69e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> format of the tensor. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>Referenced by <a class="el" href="_tensor_library_8cpp_source.xhtml#l00234">TensorLibrary::fill()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> _format;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abd107d6e8ccfc38f781be8683d8141c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of channels of the tensor. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00031">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p>Referenced by <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">switch</span>(_format)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>:</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">Format::S16</a>:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">Format::U16</a>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">Format::S32</a>:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">Format::U32</a>:</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> _num_channels;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">2 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab5fe769d05a0f7dfee63972bdbd54261"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int num_elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of elements of the tensor. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00143">143</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_tensor_shape_8h_source.xhtml#l00106">TensorShape::total_size()</a>.</p>

<p>Referenced by <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> _shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00106">TensorShape.h:106</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af53a404b9a0d663c5d60b199799ba185"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read only access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00640">arm_compute::test::coord2index()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a448f57f9d6aec61b3d85b898affe4a2e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">arm_compute::test::RawTensor::element_size</a></div><div class="ttdeci">size_t element_size() const </div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor.cpp:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00640">Utils.h:640</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7830529ae614a236c4663910bae31af4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> * operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Access to the specified element. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">coord</td><td><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of the desired element.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the desired element. </dd></dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="tests_2_utils_8h_source.xhtml#l00640">arm_compute::test::coord2index()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a448f57f9d6aec61b3d85b898affe4a2e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">arm_compute::test::RawTensor::element_size</a></div><div class="ttdeci">size_t element_size() const </div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor.cpp:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00640">Utils.h:640</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="abf951228abf3337929f26f7c0feedcac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a deep copy of the given <code>tensor</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>To be copied tensor. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor::swap</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(*<span class="keyword">this</span>, tensor);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a3d880156c78661ccfe9d3b706d260d56"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">arm_compute::test::RawTensor::swap</a></div><div class="ttdeci">friend void swap(RawTensor &amp;tensor1, RawTensor &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor.cpp:168</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0914d4c14c88792d8fd2197c612b927e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return value at <code>offset</code> in the buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Offset within the buffer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00201">offset()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00201">helpers.h:201</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2b10356eacc7faa2c59b46c2398b5022"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return constant value at <code>offset</code> in the buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>Offset within the buffer. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="helpers_8h_source.xhtml#l00201">offset()</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00201">helpers.h:201</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a13761831550669f43f4edee978181c46"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shape of the tensor. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>Referenced by <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP::accumulate()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP::accumulate_squared()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP::accumulate_weighted()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP::bitwise_and()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP::bitwise_not()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP::bitwise_or()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP::bitwise_xor()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP::box3x3()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00062">arm_compute::test::cl::create_tensor()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00063">arm_compute::test::neon::create_tensor()</a>, <a class="el" href="_tensor_library_8cpp_source.xhtml#l00234">TensorLibrary::fill()</a>, <a class="el" href="_tensor_library_8cpp_source.xhtml#l00433">TensorLibrary::get()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP::integral_image()</a>, <a class="el" href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP::threshold()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00196">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> _shape;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aac782da1f912bceb5d8ad00c8dc892ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Total size of the tensor in bytes. </p>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>References <a class="el" href="accumulate_8cl_source.xhtml#l00041">accumulate()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00150">Dimensions&lt; T &gt;::cbegin()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00165">Dimensions&lt; T &gt;::cend()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>.</p>

<p>Referenced by <a class="el" href="_tensor_library_8cpp_source.xhtml#l00223">TensorLibrary::fill()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00040">RawTensor::RawTensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a> = <a class="code" href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">std::accumulate</a>(_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">cbegin</a>(), _shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">cend</a>(), 1, std::multiplies&lt;size_t&gt;());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> size * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a4498730adaf901d945c12841df994bba"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">arm_compute::Dimensions::cbegin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cbegin() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points to the first element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00150">Dimensions.h:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a448f57f9d6aec61b3d85b898affe4a2e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">arm_compute::test::RawTensor::element_size</a></div><div class="ttdeci">size_t element_size() const </div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor.cpp:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_aac782da1f912bceb5d8ad00c8dc892ac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">arm_compute::test::RawTensor::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_adf9b6d55d708c285d58511a780e937fc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">arm_compute::Dimensions::cend</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cend() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points one past the last element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00165">Dimensions.h:165</a></div></div>
<div class="ttc" id="accumulate_8cl_xhtml_a00e540076dd545ad59ac7482f8cdf514"><div class="ttname"><a href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">accumulate</a></div><div class="ttdeci">__kernel void accumulate(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *accu_ptr, uint accu_stride_x, uint accu_step_x, uint accu_stride_y, uint accu_step_y, uint accu_offset_first_element_in_bytes)</div><div class="ttdoc">This function accumulates an input image into output image. </div><div class="ttdef"><b>Definition:</b> <a href="accumulate_8cl_source.xhtml#l00041">accumulate.cl:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a3d880156c78661ccfe9d3b706d260d56"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps the content of the provided tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor1</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be swapped. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor2</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be swapped. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a>.</p>

<p>Referenced by <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00069">RawTensor::operator=()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00168">arm_compute::test::swap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Use unqualified call to swap to enable ADL. But make std::swap available</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// as backup.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#ac04d36ea1fb41a3dfd3afd4a89ef2470">std::swap</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._shape, tensor2._shape);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._format, tensor2._format);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._data_type, tensor2._data_type);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._num_channels, tensor2._num_channels);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._buffer, tensor2._buffer);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a3d880156c78661ccfe9d3b706d260d56"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">arm_compute::test::RawTensor::swap</a></div><div class="ttdeci">friend void swap(RawTensor &amp;tensor1, RawTensor &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor.cpp:168</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_ac04d36ea1fb41a3dfd3afd4a89ef2470"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ac04d36ea1fb41a3dfd3afd4a89ef2470">arm_compute::test::swap</a></div><div class="ttdeci">void swap(RawTensor &amp;tensor1, RawTensor &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor.cpp:168</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/<a class="el" href="_raw_tensor_8h_source.xhtml">RawTensor.h</a></li>
<li>tests/<a class="el" href="_raw_tensor_8cpp_source.xhtml">RawTensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
