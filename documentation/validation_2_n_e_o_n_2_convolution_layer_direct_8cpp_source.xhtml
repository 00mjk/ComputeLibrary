<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/NEON/ConvolutionLayerDirect.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('validation_2_n_e_o_n_2_convolution_layer_direct_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ConvolutionLayerDirect.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="validation_2_n_e_o_n_2_convolution_layer_direct_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_globals_8h.xhtml">Globals.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_o_n_2_helper_8h.xhtml">NEON/Helper.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_accessor_8h.xhtml">NEON/NEAccessor.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_library_8h.xhtml">TensorLibrary.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_type_printer_8h.xhtml">TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;Utils.h&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="validation_2_datasets_8h.xhtml">validation/Datasets.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_reference_8h.xhtml">validation/Reference.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validation_8h.xhtml">validation/Validation.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_direct_convolution_layer_8h.xhtml">arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_allocator_8h.xhtml">arm_compute/runtime/TensorAllocator.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boost__wrapper_8h.xhtml">boost_wrapper.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1neon.xhtml">arm_compute::test::neon</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">const</span> <span class="keywordtype">float</span> tolerance_fp  = 1e-3f; </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">const</span> <span class="keywordtype">float</span> tolerance_qs8 = 1;     </div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> compute_convolution_layer(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;src_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;weights_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;bias_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;dst_shape,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                 <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, <span class="keywordtype">int</span> fixed_point_position = 0)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Create tensors</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> src     = <a class="code" href="namespacearm__compute_1_1test_1_1neon.xhtml#a8a2ccb1bb0c0cce458228827f0d9ea9c">create_tensor</a>(src_shape, dt, 1, fixed_point_position);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> weights = <a class="code" href="namespacearm__compute_1_1test_1_1neon.xhtml#a8a2ccb1bb0c0cce458228827f0d9ea9c">create_tensor</a>(weights_shape, dt, 1, fixed_point_position);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> bias    = <a class="code" href="namespacearm__compute_1_1test_1_1neon.xhtml#a8a2ccb1bb0c0cce458228827f0d9ea9c">create_tensor</a>(bias_shape, dt, 1, fixed_point_position);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> dst     = <a class="code" href="namespacearm__compute_1_1test_1_1neon.xhtml#a8a2ccb1bb0c0cce458228827f0d9ea9c">create_tensor</a>(dst_shape, dt, 1, fixed_point_position);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Create and configure function</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml">NEDirectConvolutionLayer</a> conv_layer;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    conv_layer.<a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml#a33dce4160cd33d131662107e363dd381">configure</a>(&amp;src, &amp;weights, &amp;bias, &amp;dst, conv_info);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Allocate tensors</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    src.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    weights.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    bias.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    dst.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    BOOST_TEST(!src.<a class="code" href="classarm__compute_1_1_tensor.xhtml#aa68535e0983cc60a425253a72b162661">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    BOOST_TEST(!weights.<a class="code" href="classarm__compute_1_1_tensor.xhtml#aa68535e0983cc60a425253a72b162661">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    BOOST_TEST(!bias.<a class="code" href="classarm__compute_1_1_tensor.xhtml#aa68535e0983cc60a425253a72b162661">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    BOOST_TEST(!dst.<a class="code" href="classarm__compute_1_1_tensor.xhtml#aa68535e0983cc60a425253a72b162661">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Fill tensors</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span>(dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        std::uniform_real_distribution&lt;&gt; distribution(-1.f, 1.f);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(src), distribution, 0);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(weights), distribution, 1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(bias), distribution, 2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill_tensor_uniform(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(src), 0);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill_tensor_uniform(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(weights), 1);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">library</a>-&gt;fill_tensor_uniform(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(bias), 2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Compute function</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    conv_layer.<a class="code" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> dst;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> get_output_shape(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> in_shape, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> kernel_shape, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape(in_shape);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> std::pair&lt;unsigned int, unsigned int&gt; scaled_dims = <a class="code" href="namespacearm__compute.xhtml#a6fd2c972d67298469a6aad75879fffab">arm_compute::scaled_dimensions</a>(in_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(),</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                                                             in_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>(),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                                                             kernel_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>(),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                                                             conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">stride</a>().first, conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">stride</a>().second,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                                                             conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">pad</a>().first, conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">pad</a>().second,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                                                             conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3d7de69b5d597f77362f3279c6ec1c44">round</a>());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    out_shape.set(0, scaled_dims.first);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    out_shape.set(1, scaled_dims.second);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    out_shape.set(2, kernel_shape[3]);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> out_shape;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;BOOST_AUTO_TEST_SUITE(NEON)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;BOOST_AUTO_TEST_SUITE(ConvolutionLayer)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;BOOST_AUTO_TEST_SUITE(Direct)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;BOOST_AUTO_TEST_SUITE(Float)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;))</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;BOOST_DATA_TEST_CASE(W1x1,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                     <a class="code" href="classarm__compute_1_1test_1_1_direct_convolution_shapes.xhtml">DirectConvolutionShapes</a>() * <a class="code" href="classarm__compute_1_1test_1_1_c_n_n_float_data_types.xhtml">CNNFloatDataTypes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ 1, 4, 8, 16 }),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                     input_shape, dt, sx, sy, num_kernels)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  kernel_size = 1;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info(sx, sy, 0, 0, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   w_shape(kernel_size, kernel_size, input_shape.z(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(num_kernels));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   b_shape(static_cast&lt;unsigned int&gt;(num_kernels));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   d_shape(get_output_shape(input_shape, w_shape, conv_info));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> dst = compute_convolution_layer(input_shape, w_shape, b_shape, d_shape, dt, conv_info);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref = Reference::compute_reference_convolution_layer(input_shape, w_shape, b_shape, d_shape, dt, conv_info, 0);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(dst), ref);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;BOOST_DATA_TEST_CASE(W3x3, <a class="code" href="classarm__compute_1_1test_1_1_direct_convolution_shapes.xhtml">DirectConvolutionShapes</a>() * <a class="code" href="classarm__compute_1_1test_1_1_c_n_n_float_data_types.xhtml">CNNFloatDataTypes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(0, 2,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                     1)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                     * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(0, 2, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ 1, 4, 8, 16 }),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                     input_shape, dt, sx, sy, px, py, num_kernels)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  kernel_size = 3;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info(sx, sy, px, py, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   w_shape(kernel_size, kernel_size, input_shape.z(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(num_kernels));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   b_shape(static_cast&lt;unsigned int&gt;(num_kernels));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   d_shape(get_output_shape(input_shape, w_shape, conv_info));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> dst = compute_convolution_layer(input_shape, w_shape, b_shape, d_shape, dt, conv_info);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref = Reference::compute_reference_convolution_layer(input_shape, w_shape, b_shape, d_shape, dt, conv_info, 0);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(dst), ref, tolerance_fp);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;BOOST_AUTO_TEST_SUITE(Quantized)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;BOOST_TEST_DECORATOR(*<a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::label(&quot;precommit&quot;))</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;BOOST_DATA_TEST_CASE(W1x1,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                     <a class="code" href="classarm__compute_1_1test_1_1_direct_convolution_shapes.xhtml">DirectConvolutionShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ 1, 4, 8, 16 }) * boost::unit_test::data::make({ 4, 5 }),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                     input_shape, sx, sy, num_kernels, fixed_point_position)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  kernel_size = 1;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info(sx, sy, 0, 0, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   w_shape(kernel_size, kernel_size, input_shape.z(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(num_kernels));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   b_shape(static_cast&lt;unsigned int&gt;(num_kernels));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   d_shape(get_output_shape(input_shape, w_shape, conv_info));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> dst = compute_convolution_layer(input_shape, w_shape, b_shape, d_shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>, conv_info, fixed_point_position);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref = Reference::compute_reference_convolution_layer(input_shape, w_shape, b_shape, d_shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>, conv_info, fixed_point_position);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(dst), ref);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;BOOST_TEST_DECORATOR(*boost::unit_test::label(<span class="stringliteral">&quot;precommit&quot;</span>))</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;BOOST_DATA_TEST_CASE(W3x3, <a class="code" href="classarm__compute_1_1test_1_1_direct_convolution_shapes.xhtml">DirectConvolutionShapes</a>() * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(1, 3, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(0, 2, 1)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                     * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::xrange(0, 2, 1) * <a class="code" href="namespaceboost.xhtml">boost</a>::unit_test::data::make({ 1, 4, 8, 16 }) * boost::unit_test::data::make({ 4, 5 }),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                     input_shape, sx, sy, px, py, num_kernels, fixed_point_position)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  kernel_size = 3;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info(sx, sy, px, py, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   w_shape(kernel_size, kernel_size, input_shape.z(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(num_kernels));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   b_shape(static_cast&lt;unsigned int&gt;(num_kernels));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>   d_shape(get_output_shape(input_shape, w_shape, conv_info));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> dst = compute_convolution_layer(input_shape, w_shape, b_shape, d_shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>, conv_info, fixed_point_position);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> ref = Reference::compute_reference_convolution_layer(input_shape, w_shape, b_shape, d_shape, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>, conv_info, fixed_point_position);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Validate output</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a>(<a class="code" href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">NEAccessor</a>(dst), ref, tolerance_qs8);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;BOOST_AUTO_TEST_SUITE_END()</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1neon_xhtml_a8a2ccb1bb0c0cce458228827f0d9ea9c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1neon.xhtml#a8a2ccb1bb0c0cce458228827f0d9ea9c">arm_compute::test::neon::create_tensor</a></div><div class="ttdeci">Tensor create_tensor(const TensorShape &amp;shape, DataType data_type, int num_channels=1, int fixed_point_position=0)</div><div class="ttdoc">Helper to create an empty tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_helper_8h_source.xhtml#l00047">Helper.h:47</a></div></div>
<div class="ttc" id="_reference_8h_xhtml"><div class="ttname"><a href="_reference_8h.xhtml">Reference.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00047">RawTensor.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="arm__compute_2runtime_2_tensor_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">arm_compute::DataType::QS8</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_g_e_m_m_8h_source.xhtml#l00039">GEMM.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a9a9d6d62752247f733a3466b484e08b9"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">arm_compute::PadStrideInfo::pad</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; pad() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00409">Types.h:409</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6fd2c972d67298469a6aad75879fffab"><div class="ttname"><a href="namespacearm__compute.xhtml#a6fd2c972d67298469a6aad75879fffab">arm_compute::scaled_dimensions</a></div><div class="ttdeci">const std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(unsigned int width, unsigned int height, unsigned int kernel_size, unsigned int stride_x, unsigned int stride_y, unsigned int pad_x, unsigned int pad_y, DimensionRoundingType round_type)</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode...</div></div>
<div class="ttc" id="_tensor_library_8h_xhtml"><div class="ttname"><a href="_tensor_library_8h.xhtml">TensorLibrary.h</a></div></div>
<div class="ttc" id="_tensor_allocator_8h_xhtml"><div class="ttname"><a href="_tensor_allocator_8h.xhtml">TensorAllocator.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::NEDirectConvolutionLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div></div>
<div class="ttc" id="_n_e_accessor_8h_xhtml"><div class="ttname"><a href="_n_e_accessor_8h.xhtml">NEAccessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a531ec877bfc923dea3ab6f1be5e6e1ac"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a3d7de69b5d597f77362f3279c6ec1c44"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3d7de69b5d597f77362f3279c6ec1c44">arm_compute::PadStrideInfo::round</a></div><div class="ttdeci">DimensionRoundingType round() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_af555338f11d1d28f258f259ac3da743b"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">arm_compute::ITensorInfo::is_resizable</a></div><div class="ttdeci">virtual bool is_resizable() const =0</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div></div>
<div class="ttc" id="_globals_8h_xhtml"><div class="ttname"><a href="_globals_8h.xhtml">Globals.h</a></div></div>
<div class="ttc" id="validation_2_datasets_8h_xhtml"><div class="ttname"><a href="validation_2_datasets_8h.xhtml">Datasets.h</a></div></div>
<div class="ttc" id="_type_printer_8h_xhtml"><div class="ttname"><a href="_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ad2f1ea50a9e215ad8ef612a724a4866a"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00405">Types.h:405</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml">arm_compute::Tensor</a></div><div class="ttdoc">Basic implementation of the tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1neon_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1neon.xhtml">arm_compute::test::neon</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_helper_8h_source.xhtml#l00036">Helper.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml">arm_compute::NEDirectConvolutionLayer</a></div><div class="ttdoc">Function to run the direct convolution. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_layer_8h_source.xhtml#l00044">NEDirectConvolutionLayer.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_direct_convolution_layer_xhtml_a33dce4160cd33d131662107e363dd381"><div class="ttname"><a href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml#a33dce4160cd33d131662107e363dd381">arm_compute::NEDirectConvolutionLayer::configure</a></div><div class="ttdeci">void configure(ITensor *input, const ITensor *weights, const ITensor *bias, ITensor *output, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Set the input, weights, biases and output tensors. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4ced6442a379a75e8a6c4be093fb666b"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4ced6442a379a75e8a6c4be093fb666b">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; TensorLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="benchmark_2main_8cpp_source.xhtml#l00050">main.cpp:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="boost__wrapper_8h_xhtml"><div class="ttname"><a href="boost__wrapper_8h.xhtml">boost_wrapper.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1neon_1_1_n_e_accessor.xhtml">arm_compute::test::neon::NEAccessor</a></div><div class="ttdoc">Accessor implementation for Tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_accessor_8h_source.xhtml#l00038">NEAccessor.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7730e17dc901bdffefcf45b08bab135f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">arm_compute::test::validation::validate</a></div><div class="ttdeci">void validate(const arm_compute::ValidRegion &amp;region, const arm_compute::ValidRegion &amp;reference)</div><div class="ttdoc">Validate valid regions. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8cpp_source.xhtml#l00166">Validation.cpp:166</a></div></div>
<div class="ttc" id="_validation_8h_xhtml"><div class="ttname"><a href="_validation_8h.xhtml">Validation.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_c_n_n_float_data_types_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_c_n_n_float_data_types.xhtml">arm_compute::test::CNNFloatDataTypes</a></div><div class="ttdoc">Supported CNN float types. </div><div class="ttdef"><b>Definition:</b> <a href="_data_type_datasets_8h_source.xhtml#l00157">DataTypeDatasets.h:157</a></div></div>
<div class="ttc" id="namespaceboost_xhtml"><div class="ttname"><a href="namespaceboost.xhtml">boost</a></div><div class="ttdef"><b>Definition:</b> <a href="validation_2_datasets_8h_source.xhtml#l00047">Datasets.h:47</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_direct_convolution_shapes_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_direct_convolution_shapes.xhtml">arm_compute::test::DirectConvolutionShapes</a></div><div class="ttdoc">Data set containing direct convolution tensor shapes. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution_layer_dataset_8h_source.xhtml#l00093">ConvolutionLayerDataset.h:93</a></div></div>
<div class="ttc" id="_n_e_direct_convolution_layer_8h_xhtml"><div class="ttname"><a href="_n_e_direct_convolution_layer_8h.xhtml">NEDirectConvolutionLayer.h</a></div></div>
<div class="ttc" id="_n_e_o_n_2_helper_8h_xhtml"><div class="ttname"><a href="_n_e_o_n_2_helper_8h.xhtml">Helper.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fixture_8h_source.xhtml#l00033">CLFixture.h:33</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00060">Types.h:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_aa68535e0983cc60a425253a72b162661"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#aa68535e0983cc60a425253a72b162661">arm_compute::Tensor::info</a></div><div class="ttdeci">ITensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_0538a82dae0483a21d0f1e9d7e0a45c6.xhtml">NEON</a></li><li class="navelem"><a class="el" href="validation_2_n_e_o_n_2_convolution_layer_direct_8cpp.xhtml">ConvolutionLayerDirect.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
