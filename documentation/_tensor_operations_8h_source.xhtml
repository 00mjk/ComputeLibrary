<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/TensorOperations.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_operations_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TensorOperations.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_operations_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_TENSOR_OPERATIONS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_TENSOR_OPERATIONS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_fixed_point_8h.xhtml">FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_tensor_8h.xhtml">Tensor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">Types.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;Utils.h&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_fixed_point_8h.xhtml">FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">Types.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_fixed_point_8h.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_fixed_point_8h.xhtml">tests/validation/FixedPoint.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml">   48</a></span>&#160;<span class="keyword">namespace </span>tensor_operations</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keywordtype">bool</span> is_valid_pixel(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>, <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> (i &gt;= min &amp;&amp; i &lt; max);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">// 3D convolution for floating point type</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">void</span> convolution3d(<span class="keyword">const</span> T *in, <span class="keyword">const</span> T *weights, <span class="keyword">const</span> T *bias, T *out, <span class="keywordtype">int</span> xi, <span class="keywordtype">int</span> yi, <span class="keywordtype">int</span> width_in, <span class="keywordtype">int</span> height_in, <span class="keywordtype">int</span> depth_in, <span class="keywordtype">int</span> width_weights, <span class="keywordtype">int</span> height_weights, int8_t fixed_point_position)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_width_weights  = width_weights / 2;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_height_weights = height_weights / 2;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Reset accumulator</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    T acc = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// Compute a 2D convolution for each IFM and accumulate the result</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ifm = 0; ifm &lt; depth_in; ++ifm)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Compute the offset for the input slice</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> offset_slice_in = xi + yi * width_in + ifm * width_in * height_in;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Compute 2D convolution</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> yk = -half_height_weights; yk &lt;= half_height_weights; ++yk)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> xk = -half_width_weights; xk &lt;= half_width_weights; ++xk)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="comment">// Check if the pixel is out-of-bound</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">if</span>(is_valid_pixel(xi + xk, 0, width_in) &amp;&amp; is_valid_pixel(yi + yk, 0, height_in))</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> idx = xk + half_width_weights;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> idy = yk + half_height_weights;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keyword">const</span> T i_value = in[offset_slice_in + xk + yk * width_in];</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keyword">const</span> T w_value = weights[idx + idy * width_weights + ifm * width_weights * height_weights];</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    acc += i_value * w_value;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Accumulate the bias and store the result</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    *out = acc + (*bias);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">// 3D convolution for fixed point type</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keywordtype">void</span> convolution3d(<span class="keyword">const</span> T *in, <span class="keyword">const</span> T *weights, <span class="keyword">const</span> T *bias, T *out, <span class="keywordtype">int</span> xi, <span class="keywordtype">int</span> yi, <span class="keywordtype">int</span> width_in, <span class="keywordtype">int</span> height_in, <span class="keywordtype">int</span> depth_in, <span class="keywordtype">int</span> width_weights, <span class="keywordtype">int</span> height_weights,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                   int8_t fixed_point_position)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_width_weights  = width_weights / 2;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_height_weights = height_weights / 2;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">using</span> promoted_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote.xhtml">fixed_point_arithmetic::traits::promote&lt;T&gt;::type</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Reset accumulator</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    fixed_point&lt;promoted_type&gt; acc(0, fixed_point_position);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Compute a 2D convolution for each IFM and accumulate the result</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ifm = 0; ifm &lt; depth_in; ++ifm)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// Compute the offset for the input slice</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> offset_slice_in = xi + yi * width_in + ifm * width_in * height_in;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Compute 2D convolution</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> yk = -half_height_weights; yk &lt;= half_height_weights; ++yk)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> xk = -half_width_weights; xk &lt;= half_width_weights; ++xk)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">// Check if the pixel is out-of-bound</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">if</span>(is_valid_pixel(xi + xk, 0, width_in) &amp;&amp; is_valid_pixel(yi + yk, 0, height_in))</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> idx = xk + half_width_weights;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> idy = yk + half_height_weights;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; i_value(in[offset_slice_in + xk + yk * width_in], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; w_value(weights[idx + idy * width_weights + ifm * width_weights * height_weights], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; iw = i_value * w_value;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    acc                                 = iw + acc;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Get the bias</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; b(*bias, fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Accumulate the bias and covert back</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    acc = acc + b;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    fixed_point&lt;T&gt; res(acc);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    *out = res.raw();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keywordtype">void</span> vector_matrix_multiply(<span class="keyword">const</span> T *in, <span class="keyword">const</span> T *weights, <span class="keyword">const</span> T *bias, T *out, <span class="keywordtype">int</span> cols_weights, <span class="keywordtype">int</span> rows_weights, uint8_t fixed_point_position)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; cols_weights; ++x)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        T acc = 0.0f;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; rows_weights; ++y)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            acc += in[y] * weights[x + y * cols_weights];</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        out[x] = acc + bias[x];</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keywordtype">void</span> vector_matrix_multiply(<span class="keyword">const</span> int8_t *in, <span class="keyword">const</span> int8_t *weights, <span class="keyword">const</span> int8_t *bias, int8_t *out, <span class="keywordtype">int</span> cols_weights, <span class="keywordtype">int</span> rows_weights, uint8_t fixed_point_position)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">using</span> promoted_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote.xhtml">fixed_point_arithmetic::traits::promote&lt;int8_t&gt;::type</a>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = 0; x &lt; cols_weights; ++x)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">// Reset accumulator</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        fixed_point&lt;promoted_type&gt; acc(0, fixed_point_position);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; rows_weights; ++y)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; i_value(in[y], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; w_value(weights[x + y * cols_weights], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; iw = i_value * w_value;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            acc                                 = iw + acc;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// Get the bias</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">const</span> fixed_point&lt;int8_t&gt; b(bias[x], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// Convert back and accumulate the bias</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        fixed_point&lt;int8_t&gt; res(acc);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        res = res + b;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// Store the result</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        out[x] = res.raw();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keywordtype">void</span> apply_2d_spatial_filter(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> coord, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;filter_shape, <span class="keyword">const</span> T2 *filter_itr, <span class="keywordtype">float</span> scale)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    intermediate_type val   = 0;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">int</span>               x     = coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">int</span>               y     = coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> j = y - filter_shape[1] / 2; j &lt;= y + filter_shape[1] / 2; ++j)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = x - filter_shape[0] / 2; i &lt;= x + filter_shape[0] / 2; ++i)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(0, i);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(1, j);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            val += <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(*filter_itr) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), coord)]);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            ++filter_itr;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(0, x);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    coord.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(1, y);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">double</span> rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">cpp11::trunc</a>(val * static_cast&lt;double&gt;(scale));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    out[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), coord)] = saturate_cast&lt;T3&gt;(rounded_val);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">// Integral Image</span></div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">  225</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">integral_image</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint32_t&gt;</a> &amp;out)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">// Length of dimensions</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> width  = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> height = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> depth  = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().z() * in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[3] * in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[4] * in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[5];</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> image_size = width * height;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> z = 0; z &lt; depth; ++z)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordtype">size_t</span> current_image = z * image_size;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="comment">//First element of each image</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        out[current_image] = in[current_image];</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// First row of each image (add only pixel on the left)</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> x = 1; x &lt; width; ++x)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            out[current_image + x] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_image + x]) + out[current_image + x - 1];</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// Subsequent rows</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> y = 1; y &lt; height; ++y)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordtype">size_t</span> current_row = current_image + (width * y);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="comment">// First element of each row (add only pixel up)</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            out[current_row] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_row]) + out[current_row - width];</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="comment">// Following row elements</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> x = 1; x &lt; width; ++x)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordtype">size_t</span> current_pixel = current_row + x;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="comment">// out = in + up(out) + left(out) - up_left(out)</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                out[current_pixel] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[current_pixel]) + out[current_pixel - 1]</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                     + out[current_pixel - width] - out[current_pixel - width - 1];</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">// Absolute difference</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">  270</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">absolute_difference</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        intermediate_type val = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(static_cast&lt;intermediate_type&gt;(in1[i]) - static_cast&lt;intermediate_type&gt;(in2[i]));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T3&gt;(val);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">// Accumulate</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">  283</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">accumulate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;out)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2&gt;::intermediate_type</a>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + static_cast&lt;intermediate_type&gt;(in[i]);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T2&gt;(val);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">// Accumulate squared</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">  296</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">accumulate_squared</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;out, uint32_t shift)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">if</span>(shift &gt; 15)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Shift in accumulate_squared must be within the range [0, 15]&quot;</span>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2&gt;::intermediate_type</a>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    intermediate_type denom = 1 &lt;&lt; shift;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + (static_cast&lt;intermediate_type&gt;(in[i]) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in[i]) / denom);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        out[i]                = <a class="code" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a>&lt;T2&gt;(val);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">// Accumulate weighted</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">  314</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">accumulate_weighted</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keywordtype">float</span> alpha)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">if</span>(alpha &lt; 0.f || alpha &gt; 1.f)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Weight (alpha) specified in accumulate_weighted must be within the range [0, 1]&quot;</span>);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T&gt;::intermediate_type</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordtype">double</span> val = (1. - <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(alpha)) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(out[i]) + static_cast&lt;double&gt;(alpha) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in[i]);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        out[i]     = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">// Arithmetic addition</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">  331</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">arithmetic_addition</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) + static_cast&lt;intermediate_type&gt;(in2[i]);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        out[i]                = (convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;T3&gt;(val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">// Arithmetic Subtraction</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">  344</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">arithmetic_subtraction</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        intermediate_type val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) - static_cast&lt;intermediate_type&gt;(in2[i]);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        out[i]                = (convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;T3&gt;(val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">// Bitwise and</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">  357</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">bitwise_and</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        out[i] = in1[i] &amp; in2[i];</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">// Bitwise or</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">  367</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">bitwise_or</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    {</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        out[i] = in1[i] | in2[i];</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">// Bitwise xor</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">  377</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">bitwise_xor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        out[i] = in1[i] ^ in2[i];</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">// Bitwise not</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">  387</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">bitwise_not</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        out[i] = ~in[i];</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">// 3-by-3 box filter</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">  397</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">box3x3</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> std::array&lt;T, 9&gt; filter{ { 1, 1, 1, 1, 1, 1, 1, 1, 1 } };</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordtype">float</span>             scale        = 1.f / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(filter.size());</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region = <a class="code" href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">shape_to_valid_region_undefined_border</a>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(1));</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++element_idx)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), element_idx);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">is_in_valid_region</a>(valid_region, <span class="keywordtype">id</span>))</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            apply_2d_spatial_filter(<span class="keywordtype">id</span>, in, out, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>, 3<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), filter.data(), scale);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">// Depth conversion</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">  414</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">depth_convert</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;{</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;The conversion is not supported&quot;</span>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a963f96bc7caff7e733ba2bfed26e453b">  420</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a963f96bc7caff7e733ba2bfed26e453b">depth_convert&lt;int8_t, float&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;float&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;{</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">const</span> int8_t fixed_point_position = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.fixed_point_position());</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(in[i]) * (1.0f / (1 &lt;&lt; fixed_point_position));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a531358310cc70fdd4f59637db7ce1b3e">  430</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a531358310cc70fdd4f59637db7ce1b3e">depth_convert&lt;float, int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;float&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int8_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> int8_t fixed_point_position = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.fixed_point_position());</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordtype">float</span> val = in[i] * (1 &lt;&lt; fixed_point_position) + 0.5f;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        out[i]    = ((policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;int8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a09a0ab9b11ba12a3d4230bb07198a06d">  441</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a09a0ab9b11ba12a3d4230bb07198a06d">depth_convert&lt;uint8_t, uint16_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint16_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;}</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0e91470444d96ed45eae0bac5b7c6042">  450</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0e91470444d96ed45eae0bac5b7c6042">depth_convert&lt;uint8_t, int16_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int16_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00459"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6b46cf712c2bf1e96eef20c6b1b816f5">  459</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6b46cf712c2bf1e96eef20c6b1b816f5">depth_convert&lt;uint8_t, int32_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int32_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a34b3b2d8ce85841a51f517bf38d3d3b3">  468</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a34b3b2d8ce85841a51f517bf38d3d3b3">depth_convert&lt;uint16_t, uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint16_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        uint16_t val = in[i] &gt;&gt; shift;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        out[i]       = ((policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;uint8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a79219b20a374800b7da7222a70db89b2">  478</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a79219b20a374800b7da7222a70db89b2">depth_convert&lt;uint16_t, uint32_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint16_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint32_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a447ea0d3749644c6eb970d78ff7e11db">  487</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a447ea0d3749644c6eb970d78ff7e11db">depth_convert&lt;int16_t, uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int16_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        int16_t val = in[i] &gt;&gt; shift;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        out[i]      = ((policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;uint8_t&gt;(val) : <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val));</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac0098bc6f892a87934f223210dbfd6a9">  496</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac0098bc6f892a87934f223210dbfd6a9">depth_convert&lt;int16_t, int32_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int16_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int32_t&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.num_elements(); ++i)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        out[i] = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(in[i]) &lt;&lt; shift;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">// Matrix multiplication for floating point type</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00506"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">  506</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">gemm</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in3, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keywordtype">float</span> alpha, <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> M = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> N = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> K = in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; M; ++r)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; N; ++c)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            T acc = 0.0f;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; K; ++k)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="keyword">const</span> T a0 = in1[r * K + k];</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keyword">const</span> T b0 = in2[k * N + c];</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                acc += a0 * b0;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="comment">// Finalize the result: A * B * alpha + C * beta</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keyword">const</span> T c0     = in3[c + r * N];</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            out[c + r * N] = alpha * acc + beta * c0;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">// Matrix multiplication for fixed point type</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">gemm</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in3, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keywordtype">float</span> alpha, <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;{</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keyword">using</span> promoted_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote.xhtml">fixed_point_arithmetic::traits::promote&lt;T&gt;::type</a>;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    M                    = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    N                    = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    K                    = in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> int8_t fixed_point_position = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>());</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt; alpha_q(alpha, fixed_point_position);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt; beta_q(beta, fixed_point_position);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; M; ++r)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; N; ++c)</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            fixed_point&lt;promoted_type&gt; acc_q(0, fixed_point_position);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; K; ++k)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; a0_q(in1[r * K + k], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; b0_q(in2[k * N + c], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keyword">const</span> fixed_point&lt;promoted_type&gt; axb_q = a0_q * b0_q;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                acc_q = axb_q + acc_q;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="comment">// Finalize the result: A * B * alpha + C * beta</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">const</span> fixed_point&lt;T&gt; c0_q(in3[c + r * N], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            fixed_point&lt;T&gt; res_q(acc_q);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            res_q = alpha_q * res_q;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            res_q = (c0_q * beta_q) + res_q;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="comment">// Store the result</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            out[c + r * N] = res_q.raw();</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">// Pixel-wise multiplication</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00579"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">  579</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">if</span>(scale &lt; 0)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordtype">double</span> val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(in1[i]) * static_cast&lt;intermediate_type&gt;(in2[i]) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(scale);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keywordflow">if</span>(std::is_floating_point&lt;T3&gt;::value)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            out[i] = val;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        }</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keywordtype">double</span> rounded_val = 0;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keywordflow">switch</span>(rounding_policy)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>):</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">cpp11::trunc</a>(val);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>):</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">cpp11::round_half_up</a>(val);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>):</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    rounded_val = <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">cpp11::round_half_even</a>(val);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                    <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding policy&quot;</span>);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            out[i] = (convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;T3&gt;(rounded_val) : <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(rounded_val);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">// Fixed-point Pixel-wise Multiplication</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">  617</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">fixed_point_pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keywordtype">int</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;{</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> fixed_point_position = in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>();</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != in2.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() || in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(),</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                             <span class="stringliteral">&quot;Tensors must all have the same DataType&quot;</span>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(fixed_point_position != in2.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>() || fixed_point_position != out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(),</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                             <span class="stringliteral">&quot;Fixed-point position must be the same for both inputs and outputs&quot;</span>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Validate fixed_point_position</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">DataType::QS8</a>) &amp;&amp; (fixed_point_position == 0 || fixed_point_position &gt; 7));</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">DataType::QS16</a>) &amp;&amp; (fixed_point_position == 0 || fixed_point_position &gt; 15));</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    fixed_point&lt;T&gt; fp_scale(scale, fixed_point_position);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_sat     = convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     do_scaling = scale != 1;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in1.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        fixed_point&lt;T&gt; val1(in1[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        fixed_point&lt;T&gt; val2(in2[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        fixed_point&lt;T&gt; res = (is_sat) ? val1 * val2 : mul&lt;OverflowPolicy::WRAP&gt;(val1, val2);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="keywordflow">if</span>(do_scaling)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            res = (is_sat) ? res * fp_scale : mul&lt;OverflowPolicy::WRAP&gt;(res, fp_scale);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        }</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        out[i] = res.raw();</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">// Threshold</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">  651</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>, uint8_t false_value, uint8_t true_value, <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a98ad0e8750ae10ad556ed7a62affb452">ThresholdType::BINARY</a>:</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                out[i] = ((in[i] &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>) ? true_value : false_value);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a01036ddcc971d02f6c32c3da31a119f2">ThresholdType::RANGE</a>:</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keywordflow">if</span>(in[i] &gt; upper)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                {</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    out[i] = false_value;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span>(in[i] &lt; threshold)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    out[i] = false_value;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                }</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                    out[i] = true_value;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Thresholding type not recognised&quot;</span>);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    }</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">// Activation Layer for floating point type</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00686"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">  686</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">activation_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> T a = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a55beddf67f69fc5312961b1b112560fb">a</a>());</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">const</span> T b = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af28869d53fbe340640044d672b29ba7c">b</a>());</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        T x = in[i];</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">switch</span>(act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a63e05ce4946dd9807c005c1619fa337a">activation</a>())</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ActivationLayerInfo::ActivationFunction::ABS</a>:</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(x);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>:</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                out[i] = std::min&lt;T&gt;(a, std::max&lt;T&gt;(0, x));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">ActivationLayerInfo::ActivationFunction::LINEAR</a>:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                out[i] = a * x + b;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>:</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                out[i] = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) / (static_cast&lt;T&gt;(1) + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(-x));</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>:</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                out[i] = std::max&lt;T&gt;(0, x);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::ActivationFunction::SOFT_RELU</a>:</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">std::log</a>(static_cast&lt;T&gt;(1) + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(x));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::ActivationFunction::SQRT</a>:</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                out[i] = std::sqrt(x);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">ActivationLayerInfo::ActivationFunction::SQUARE</a>:</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                out[i] = x * x;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>:</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                out[i] = a * <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a6854479935f66029852441b051e1a3e0">std::tanh</a>(b * x);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Activation function not recognised&quot;</span>);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;}</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">// Activation Layer for fixed point type</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">activation_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;{</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordtype">int</span>                                     fixed_point_position = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>();</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act_func             = act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a63e05ce4946dd9807c005c1619fa337a">activation</a>();</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt;                    a(act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a55beddf67f69fc5312961b1b112560fb">a</a>(), fixed_point_position);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt;                    b(act_info.<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#af28869d53fbe340640044d672b29ba7c">b</a>(), fixed_point_position);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt;                    const_0(0, fixed_point_position);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="keyword">const</span> fixed_point&lt;T&gt;                    const_1(1, fixed_point_position);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        fixed_point&lt;T&gt; x(in[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">switch</span>(act_func)</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        {</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">ActivationLayerInfo::ActivationFunction::ABS</a>:</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">abs</a>(x).raw();</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a>:</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">min</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(const_0, x)).raw();</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">ActivationLayerInfo::ActivationFunction::LINEAR</a>:</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(b, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(a, x)).raw();</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>:</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                out[i] = (const_1 / (const_1 + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">exp</a>(-x))).raw();</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>:</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(const_0, x).raw();</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::ActivationFunction::SOFT_RELU</a>:</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">log</a>(const_1 + <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">exp</a>(x)).raw();</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::ActivationFunction::SQRT</a>:</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                out[i] = (const_1 / <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">inv_sqrt</a>(x)).raw();</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">ActivationLayerInfo::ActivationFunction::SQUARE</a>:</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(x, x).raw();</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>:</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a6854479935f66029852441b051e1a3e0">tanh</a>(x).raw();</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Activation function not recognised&quot;</span>);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        }</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    }</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;}</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment">// Batch Normalization Layer for fixed point type</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00783"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">  783</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">batch_normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;mean, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;var, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;beta, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;gamma, <span class="keywordtype">float</span> epsilon, <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[2]);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (cols * rows * depth);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    {</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; depth; ++i)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; rows; ++k)</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            {</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; cols; ++l)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span>                              pos = l + k * cols + i * rows * cols + r * cols * rows * depth;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> in_qs8(in[pos], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> var_qs8(var[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> mean_qs8(mean[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> beta_qs8(beta[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> gamma_qs8(gamma[i], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a> epsilon_qs8(epsilon, fixed_point_position);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                    <span class="keyword">auto</span> denominator = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">fixed_point_arithmetic::inv_sqrt</a>(var_qs8 + epsilon_qs8);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                    <span class="keyword">auto</span> numerator   = in_qs8 - mean_qs8;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    <span class="keyword">auto</span> x_bar       = numerator * denominator;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                    x_bar            = beta_qs8 + x_bar * gamma_qs8;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                    out[pos]         = x_bar.raw();</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        }</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    }</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;}</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment">// Batch Normalization Layer for floating point type</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">batch_normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;mean, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;var, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;beta, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;gamma, <span class="keywordtype">float</span> epsilon, <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;{</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[2]);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (cols * rows * depth);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    {</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; depth; ++i)</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        {</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; rows; ++k)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            {</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; cols; ++l)</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span>   pos         = l + k * cols + i * rows * cols + r * cols * rows * depth;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> denominator = sqrt(var[i] + epsilon);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> numerator   = in[pos] - mean[i];</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> x_bar       = numerator / denominator;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                    out[pos]                = beta[i] + x_bar * gamma[i];</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            }</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        }</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    }</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;}</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">// Convolution layer</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00847"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">  847</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">convolution_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;{</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_in       = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_in      = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_in       = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().z();</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_out      = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_out     = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_out      = out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().z();</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> width_weights  = weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_weights = weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_weights  = weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().z();</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_xi         = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(static_cast&lt;int&gt;(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">pad</a>().first), width_weights / 2);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_yi         = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(static_cast&lt;int&gt;(conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">pad</a>().second), height_weights / 2);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_xi       = width_weights / 2 - pad_xi;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_yi       = height_weights / 2 - pad_yi;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_xi         = width_in - start_xi;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_yi         = height_in - start_yi;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_xi      = conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">stride</a>().first;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_yi      = conv_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">stride</a>().second;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches    = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (width_in * height_in * depth_in);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; num_batches; ++r)</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    {</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> yi = start_yi; yi &lt; end_yi; yi += stride_yi)</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        {</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> xi = start_xi; xi &lt; end_xi; xi += stride_xi)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            {</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ofm = 0; ofm &lt; depth_out; ++ofm)</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                {</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    <span class="comment">// Compute input and output offsets</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_in  = r * width_in * height_in * depth_in;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xo         = (xi - start_xi) / stride_xi;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> yo         = (yi - start_yi) / stride_yi;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> offset_out = xo + yo * width_out + ofm * width_out * height_out + r * width_out * height_out * depth_out;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    <span class="comment">// Compute 3D convolution</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    convolution3d(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + offset_in,</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                                  weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + ofm * width_weights * height_weights * depth_weights,</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                                  bias.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + ofm,</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                                  out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + offset_out,</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                                  xi, yi,</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                                  width_in, height_in, depth_in,</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                  width_weights, height_weights,</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                  <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>()));</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                }</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        }</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    }</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment">// Fully connected layer</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00899"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">  899</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">fully_connected_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;{</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x() != out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x());</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y() != in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x() * in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y() * in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().z());</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_weights = weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().x();</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_weights = weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().y();</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_batches  = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / rows_weights;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; num_batches; ++k)</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    {</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        vector_matrix_multiply&lt;T&gt;(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + k * rows_weights,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                  weights.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>(),</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                  bias.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>(),</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                  out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">data</a>() + k * cols_weights,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                  cols_weights,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                  rows_weights,</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                  in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>());</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;}</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment">// Normalization Layer for floating point type</span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l00921"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">  921</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;{</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">const</span> uint32_t norm_size = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a0549be3702c05e6ec1ada69a6d08e349">norm_size</a>();</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a>       type      = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a39f6445d0b790034f0d8fac36f2eb7f5">type</a>();</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordtype">float</span>          beta      = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a55fe6a30749e41ce31c2bb969a5aa25e">beta</a>();</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    uint32_t       kappa     = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a4df91dc0be2437a7d1bfd6d8df72baa8">kappa</a>();</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[2]);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (cols * rows);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordtype">float</span> coeff       = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a6f541aab23799f6c61d9c8d7ca9fe15c">scale_coeff</a>();</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordtype">int</span>   radius_cols = norm_size / 2;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="comment">// IN_MAP_1D and CROSS_MAP normalize over a single axis only</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordtype">int</span> radius_rows = (<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">NormType::IN_MAP_2D</a> == type) ? norm_size / 2 : 0;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keywordflow">if</span>(type == <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">NormType::CROSS_MAP</a>)</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    {</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="comment">// Remove also depth from upper dimensions since it is the axes we want</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <span class="comment">// to use for normalization</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        upper_dims /= depth;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        {</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            {</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                {</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; depth; ++l)</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                    {</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        <span class="keywordtype">float</span> accumulated_scale = 0.f;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_cols; j &lt;= radius_cols; ++j)</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                        {</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> z = l + j;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                            <span class="keywordflow">if</span>(z &gt;= 0 &amp;&amp; z &lt; depth)</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                            {</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                <span class="keyword">const</span> T value = in[k + i * cols + z * rows * cols + r * cols * rows * depth];</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                accumulated_scale += value * value;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                            }</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                        }</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                        out[k + i * cols + l * rows * cols + r * cols * rows * depth] = kappa + accumulated_scale * coeff;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    }</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                }</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            }</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        }</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    {</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        {</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            {</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                {</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                    <span class="keywordtype">float</span> accumulated_scale = 0.f;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_rows; j &lt;= radius_rows; ++j)</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                    {</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> y = i + j;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = -radius_cols; l &lt;= radius_cols; ++l)</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                        {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> x = k + l;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                            <span class="keywordflow">if</span>((x &gt;= 0 &amp;&amp; y &gt;= 0) &amp;&amp; (x &lt; cols &amp;&amp; y &lt; rows))</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                            {</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                <span class="keyword">const</span> T value = in[x + y * cols + r * cols * rows];</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                accumulated_scale += value * value;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                            }</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                        }</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                    }</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                    out[k + i * cols + r * cols * rows] = kappa + accumulated_scale * coeff;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                }</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            }</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        }</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    }</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keywordflow">if</span>(beta == 1.f)</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    {</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        {</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            out[i] = in[i] / out[i];</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        }</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    }</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(beta == 0.5f)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    {</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        {</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            out[i] = in[i] / std::sqrt(out[i]);</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        }</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    }</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    {</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        {</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            out[i] = in[i] * <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">std::exp</a>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">std::log</a>(out[i]) * -beta);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        }</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    }</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;}</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">// Normalization Layer for fixed-point types</span></div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;{</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> fixed_point_position = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>();</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keyword">const</span> uint32_t norm_size = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a0549be3702c05e6ec1ada69a6d08e349">norm_size</a>();</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a>       type      = norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a39f6445d0b790034f0d8fac36f2eb7f5">type</a>();</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    fixed_point&lt;T&gt; beta(norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a55fe6a30749e41ce31c2bb969a5aa25e">beta</a>(), fixed_point_position);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    fixed_point&lt;T&gt; kappa(norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a4df91dc0be2437a7d1bfd6d8df72baa8">kappa</a>(), fixed_point_position);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[2]);</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordtype">int</span>       upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (cols * rows);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    fixed_point&lt;T&gt; coeff(norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a6f541aab23799f6c61d9c8d7ca9fe15c">scale_coeff</a>(), fixed_point_position);</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="keywordtype">int</span>            radius_cols = norm_size / 2;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    <span class="comment">// IN_MAP_1D and CROSS_MAP normalize over a single axis only</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="keywordtype">int</span> radius_rows = (<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">NormType::IN_MAP_2D</a> == type) ? norm_size / 2 : 0;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">if</span>(type == <a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">NormType::CROSS_MAP</a>)</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    {</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="comment">// Remove also depth from upper dimensions since it is the axes we want</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="comment">// to use for normalization</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        upper_dims /= depth;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        {</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;            {</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                {</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = 0; l &lt; depth; ++l)</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                    {</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                        fixed_point&lt;T&gt; accumulated_scale(0.f, fixed_point_position);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_cols; j &lt;= radius_cols; ++j)</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                        {</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> z = l + j;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                            <span class="keywordflow">if</span>(z &gt;= 0 &amp;&amp; z &lt; depth)</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                            {</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                <span class="keyword">const</span> T              value = in[k + i * cols + z * rows * cols + r * cols * rows * depth];</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                <span class="keyword">const</span> fixed_point&lt;T&gt; fp_value(value, fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                accumulated_scale = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(accumulated_scale, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(fp_value, fp_value));</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                            }</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                        }</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                        accumulated_scale                                             = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(kappa, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(accumulated_scale, coeff));</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                        out[k + i * cols + l * rows * cols + r * cols * rows * depth] = accumulated_scale.raw();</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                    }</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                }</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;            }</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        }</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    }</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    {</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        {</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; rows; ++i)</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;            {</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; cols; ++k)</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                {</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                    fixed_point&lt;T&gt; accumulated_scale(0.f, fixed_point_position);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = -radius_rows; j &lt;= radius_rows; ++j)</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                    {</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">int</span> y = i + j;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l = -radius_cols; l &lt;= radius_cols; ++l)</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                        {</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                            <span class="keyword">const</span> <span class="keywordtype">int</span> x = k + l;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                            <span class="keywordflow">if</span>((x &gt;= 0 &amp;&amp; y &gt;= 0) &amp;&amp; (x &lt; cols &amp;&amp; y &lt; rows))</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                            {</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                <span class="keyword">const</span> T              value = in[x + y * cols + r * cols * rows];</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                                <span class="keyword">const</span> fixed_point&lt;T&gt; fp_value(value, fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                                accumulated_scale = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(accumulated_scale, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(fp_value, fp_value));</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                            }</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                        }</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                    }</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                    accumulated_scale                   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(kappa, <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">mul</a>(accumulated_scale, coeff));</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                    out[k + i * cols + r * cols * rows] = accumulated_scale.raw();</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                }</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            }</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;        }</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    }</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keywordflow">if</span>(norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a55fe6a30749e41ce31c2bb969a5aa25e">beta</a>() == 1.f)</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    {</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        {</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;            fixed_point&lt;T&gt; res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">div</a>(fixed_point&lt;T&gt;(in[i], fixed_point_position, <span class="keyword">true</span>), fixed_point&lt;T&gt;(out[i], fixed_point_position, <span class="keyword">true</span>));</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;            out[i]             = res.raw();</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        }</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    }</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    {</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        <span class="keyword">const</span> fixed_point&lt;T&gt; beta(norm_info.<a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml#a55fe6a30749e41ce31c2bb969a5aa25e">beta</a>(), fixed_point_position);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        {</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;            fixed_point&lt;T&gt; res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">pow</a>(fixed_point&lt;T&gt;(out[i], fixed_point_position, <span class="keyword">true</span>), beta);</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;            res                = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">div</a>(fixed_point&lt;T&gt;(in[i], fixed_point_position, <span class="keyword">true</span>), res);</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;            out[i]             = res.raw();</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        }</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    }</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;}</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="comment">// Pooling layer</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01123"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c"> 1123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;{</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>   pool_size     = pool_info.<a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml#acbe58b96aee21ee986689ebd3d2f6a3c">pool_size</a>();</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> type          = pool_info.<a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml#a7e8311a3a774bceb8efae1d5c8c8aeff">pool_type</a>();</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="keywordtype">int</span>         pool_stride_x = 0;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keywordtype">int</span>         pool_stride_y = 0;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="keywordtype">int</span>         pad_x         = 0;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <span class="keywordtype">int</span>         pad_y         = 0;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.<a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml#a3c82dfc72060f59eccf0bd096b81c5d5">pad_stride_info</a>().<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">stride</a>();</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    std::tie(pad_x, pad_y)                 = pool_info.<a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml#a3c82dfc72060f59eccf0bd096b81c5d5">pad_stride_info</a>().<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">pad</a>();</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_in = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_in = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> rows_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[1]);</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keywordtype">int</span> upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / (cols_in * rows_in);</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="keywordtype">int</span> pooled_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(static_cast&lt;float&gt;(rows_in + 2 * pad_x - pool_size) / pool_stride_x)) + 1;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordtype">int</span> pooled_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(static_cast&lt;float&gt;(cols_in + 2 * pad_y - pool_size) / pool_stride_y)) + 1;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keywordflow">if</span>((pooled_height - 1) * pool_stride_x &gt;= rows_in + pad_x)</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    {</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        --pooled_height;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    }</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    <span class="keywordflow">if</span>((pooled_width - 1) * pool_stride_y &gt;= cols_in + pad_y)</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    {</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        --pooled_width;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    }</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordflow">if</span>(type == <a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    {</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        {</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; pooled_height; ++i)</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            {</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; pooled_width; ++k)</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                {</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                    <span class="keywordtype">int</span> hstart = i * pool_stride_x - pad_x;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                    <span class="keywordtype">int</span> wstart = k * pool_stride_y - pad_y;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                    <span class="keywordtype">int</span> hend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hstart + pool_size, rows_in);</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                    <span class="keywordtype">int</span> wend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wstart + pool_size, cols_in);</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                    hstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(hstart, 0);</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                    wstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(wstart, 0);</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                    T max_val = std::numeric_limits&lt;T&gt;::lowest();</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                    {</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                        {</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                            T val = in[r * cols_in * rows_in + y * cols_in + x];</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                            <span class="keywordflow">if</span>(val &gt; max_val)</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;                            {</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                max_val = val;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                            }</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                        }</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                    }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                    out[r * rows_out * cols_out + i * pooled_width + k] = max_val;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                }</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            }</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        }</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    }</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// Average pooling</span></div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    {</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        {</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; pooled_height; ++i)</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;            {</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt; pooled_width; ++k)</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                {</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                    T avg_val = 0;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                    <span class="keywordtype">int</span> hstart = i * pool_stride_x - pad_x;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;                    <span class="keywordtype">int</span> wstart = k * pool_stride_y - pad_y;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                    <span class="keywordtype">int</span> hend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hstart + pool_size, cols_in + pad_x);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                    <span class="keywordtype">int</span> wend   = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wstart + pool_size, rows_in + pad_y);</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                    <span class="keywordtype">int</span> pool   = (hend - hstart) * (wend - wstart);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                    hstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(hstart, 0);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                    wstart     = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::max</a>(wstart, 0);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                    hend       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(hend, rows_in);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                    wend       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(wend, cols_in);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                    <span class="keywordflow">if</span>(std::is_floating_point&lt;T&gt;::value)</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                    {</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                        {</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                            {</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                                avg_val += in[r * cols_in * rows_in + y * cols_in + x];</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                            }</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                        }</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                        out[r * rows_out * cols_out + i * pooled_width + k] = avg_val / pool;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                    }</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                    {</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                        <span class="keyword">static</span> std::array&lt;qint8_t, 10&gt; scale_values_q8 =</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                        { { 0x0, 0x0, 0x40, 0x2A, 0x20, 0x19, 0x15, 0x12, 0x10, 0xE } };</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = hstart; y &lt; hend; ++y)</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                        {</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = wstart; x &lt; wend; ++x)</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                            {</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                                avg_val = <a class="code" href="namespacearm__compute.xhtml#a532d90e007d0cb6f3d43107229c40c32">sqadd_qs8</a>(avg_val, in[r * cols_in * rows_in + y * cols_in + x]);</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                            }</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                        }</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                        out[r * rows_out * cols_out + i * pooled_width + k] = <a class="code" href="namespacearm__compute.xhtml#af0b73b0c4980a551d7cd4edec43ffd92">sqmul_qs8</a>(avg_val, (scale_values_q8[pool] &gt;&gt; (7 - fixed_point_position)), fixed_point_position);</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                    }</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                }</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            }</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        }</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    }</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;}</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="comment">// Softmax Layer</span></div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l01240"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b"> 1240</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">softmax_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_dims = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / cols;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    {</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <span class="comment">// Find max</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        T <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a> = std::numeric_limits&lt;T&gt;::lowest();</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        {</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            <span class="keyword">const</span> T x = in[r * cols + c];</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;            <span class="keywordflow">if</span>(x &gt; max)</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;            {</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                max = x;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;            }</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        }</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <span class="comment">// Regularize</span></div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        T sum = 0;</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        {</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            <span class="keyword">const</span> T res       = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">exp</a>(in[r * cols + c] - max);</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;            out[r * cols + c] = res;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            sum += res;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        }</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        <span class="comment">// Normalize</span></div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        <span class="keyword">const</span> T norm_val = 1 / sum;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        {</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;            out[r * cols + c] *= norm_val;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;        }</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    }</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type * = <span class="keyword">nullptr</span>&gt;</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">softmax_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;{</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keyword">using namespace </span>fixed_point_arithmetic;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <span class="keyword">using</span> promoted_T = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">test::traits::promote&lt;T&gt;::type</a>;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> fixed_point_position = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>();</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cols                 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()[0]);</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_dims           = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>().total_size() / cols;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> r = 0; r &lt; upper_dims; ++r)</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    {</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <span class="comment">// Find max</span></div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        fixed_point&lt;T&gt; <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">max</a>(std::numeric_limits&lt;T&gt;::lowest(), fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;        {</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;            <span class="keyword">const</span> fixed_point&lt;T&gt; x(in[r * cols + c], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;            <span class="keywordflow">if</span>(x &gt; max)</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;            {</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                max = x;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;            }</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;        }</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        <span class="comment">// Regularize</span></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;        fixed_point&lt;promoted_T&gt; sum(0, fixed_point_position);</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;        {</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;            <span class="keyword">const</span> fixed_point&lt;T&gt; x(in[r * cols + c], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;            fixed_point&lt;T&gt;       res = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">exp</a>(x - max);</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;            out[r * cols + c]        = res.raw();</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;            sum                      = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">add</a>(sum, <span class="keyword">static_cast&lt;</span>fixed_point&lt;promoted_T&gt;<span class="keyword">&gt;</span>(res));</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;        }</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;        <span class="comment">// Normalize</span></div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;        fixed_point&lt;T&gt; sat_sum(sum);</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> c = 0; c &lt; cols; ++c)</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;        {</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;            <span class="keyword">const</span> fixed_point&lt;T&gt; x(out[r * cols + c], fixed_point_position, <span class="keyword">true</span>);</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;            out[r * cols + c] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">div</a>(x, sat_sum).raw();</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        }</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    }</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;}</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="comment">// Fixed point operations</span></div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01319"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968"> 1319</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">fixed_point_operation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out, <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op)</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;{</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <span class="keywordtype">int</span> p = in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>();</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    {</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca8c670f8c37b95e1ed14a0ce414b049c7">FixedPointOp::EXP</a>:</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;            {</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">fixed_point_arithmetic::exp</a>(<a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a>(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;            }</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4b5ffcdaf38ce4d463171f5c977c5ab3">FixedPointOp::LOG</a>:</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;            {</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">fixed_point_arithmetic::log</a>(<a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a>(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;            }</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca59c58364795af22cad54630be156712b">FixedPointOp::INV_SQRT</a>:</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            {</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">fixed_point_arithmetic::inv_sqrt</a>(<a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a>(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            }</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4d98346f3d5cc5fa5666f0715abf25b1">FixedPointOp::RECIPROCAL</a>:</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;            {</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                out[i] = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">fixed_point_arithmetic::div</a>(<a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a>(1, p), <a class="code" href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">fixed_point_arithmetic::fixed_point&lt;T&gt;</a>(in[i], p, <span class="keyword">true</span>)).raw();</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;            }</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Fixed point operation not supported&quot;</span>);</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    }</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;}</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="comment">// Tensor print</span></div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01356"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604"> 1356</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">print</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in, std::ostream &amp;out)</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;{</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    out &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in.<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">num_elements</a>(); ++i)</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    {</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        out &lt;&lt; in[i] &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    }</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    out &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;}</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;} <span class="comment">// namespace tensor_operations</span></div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_TEST_TENSOR_OPERATIONS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8d71db736fe80cae37a9c94c57b34ed6"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8d71db736fe80cae37a9c94c57b34ed6">arm_compute::test::fixed_point_arithmetic::detail::mul</a></div><div class="ttdeci">fixed_point&lt; T &gt; mul(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00895">FixedPoint.h:895</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ad473ea84f8bab197d5e32d7693f3f121"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">arm_compute::test::cpp11::round_half_up</a></div><div class="ttdeci">T round_half_up(T value)</div><div class="ttdoc">Round floating-point value with half value rounding to positive infinity. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00276">Utils.h:276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a8db9e6c61d6d8399da28198a81a2c92b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">arm_compute::test::validation::tensor_operations::softmax_layer</a></div><div class="ttdeci">void softmax_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01240">TensorOperations.h:1240</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a48d877702a2957f5a932c43a357866f9">arm_compute::DataType::QS16</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a6b46cf712c2bf1e96eef20c6b1b816f5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6b46cf712c2bf1e96eef20c6b1b816f5">arm_compute::test::validation::tensor_operations::depth_convert&lt; uint8_t, int32_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; uint8_t, int32_t &gt;(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; int32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00459">TensorOperations.h:459</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">FixedPoint.h:875</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a53a4d082f0a3ae1523d728a4f1a5f22b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">arm_compute::test::validation::tensor_operations::accumulate_squared</a></div><div class="ttdeci">void accumulate_squared(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00296">TensorOperations.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a79219b20a374800b7da7222a70db89b2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a79219b20a374800b7da7222a70db89b2">arm_compute::test::validation::tensor_operations::depth_convert&lt; uint16_t, uint32_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; uint16_t, uint32_t &gt;(const Tensor&lt; uint16_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00478">TensorOperations.h:478</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a934ba47d23b89b5868c6fad054e5a59d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">arm_compute::test::validation::tensor_operations::box3x3</a></div><div class="ttdeci">void box3x3(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00397">TensorOperations.h:397</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a11cde4d3551db3f9498d339a67189543">arm_compute::DataType::QS8</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a590f86899d2cdff14487c16ce361d2a9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">arm_compute::test::validation::tensor_operations::fully_connected_layer</a></div><div class="ttdeci">void fully_connected_layer(const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00899">TensorOperations.h:899</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aeef005a6d652352fd78acf84fd8fdb0e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">arm_compute::test::validation::tensor_operations::bitwise_xor</a></div><div class="ttdeci">void bitwise_xor(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00377">TensorOperations.h:377</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdoc">Rounds to nearest value; half rounds up. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a34b3b2d8ce85841a51f517bf38d3d3b3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a34b3b2d8ce85841a51f517bf38d3d3b3">arm_compute::test::validation::tensor_operations::depth_convert&lt; uint16_t, uint8_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; uint16_t, uint8_t &gt;(const Tensor&lt; uint16_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00468">TensorOperations.h:468</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a6b97d7bba7b5cee833eb5c2282e8d246"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">arm_compute::test::shape_to_valid_region_undefined_border</a></div><div class="ttdeci">ValidRegion shape_to_valid_region_undefined_border(TensorShape shape, BorderSize border_size)</div><div class="ttdoc">Create a valid region covering the tensor shape with UNDEFINED border mode and specified border size...</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00466">Utils.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_a9a9d6d62752247f733a3466b484e08b9"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a9a9d6d62752247f733a3466b484e08b9">arm_compute::PadStrideInfo::pad</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; pad() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00409">Types.h:409</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00131">Types.h:131</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml_a13761831550669f43f4edee978181c46"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a13761831550669f43f4edee978181c46">arm_compute::test::validation::Tensor::shape</a></div><div class="ttdeci">TensorShape shape() const </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00071">Tensor.h:71</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml_acbe58b96aee21ee986689ebd3d2f6a3c"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml#acbe58b96aee21ee986689ebd3d2f6a3c">arm_compute::PoolingLayerInfo::pool_size</a></div><div class="ttdeci">unsigned int pool_size() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00442">Types.h:442</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">arm_compute::ActivationLayerInfo::ActivationFunction::RELU</a></div><div class="ttdoc">Rectifier. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aa4e01e9be9adcc40a69a4da48fa83a43"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aa4e01e9be9adcc40a69a4da48fa83a43">arm_compute::test::fixed_point_arithmetic::detail::exp</a></div><div class="ttdeci">fixed_point&lt; T &gt; exp(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00915">FixedPoint.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a58ee979a599b3b6a2587964106b1910c"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, const Coordinates &amp;coord)</div><div class="ttdoc">Check if a coordinate is within a valid region. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00658">Utils.h:658</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ae8ee44ec85e2dd519488bfccf91db2dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">arm_compute::test::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00247">Utils.h:247</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml_a3c82dfc72060f59eccf0bd096b81c5d5"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml#a3c82dfc72060f59eccf0bd096b81c5d5">arm_compute::PoolingLayerInfo::pad_stride_info</a></div><div class="ttdeci">PadStrideInfo pad_stride_info() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00446">Types.h:446</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00506">Types.h:506</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aeffa8efd0492f825570507bc628e2968"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">arm_compute::test::validation::tensor_operations::fixed_point_operation</a></div><div class="ttdeci">void fixed_point_operation(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, FixedPointOp op)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01319">TensorOperations.h:1319</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a63e05ce4946dd9807c005c1619fa337a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a63e05ce4946dd9807c005c1619fa337a">arm_compute::ActivationLayerInfo::activation</a></div><div class="ttdeci">ActivationFunction activation() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00486">Types.h:486</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote.xhtml">arm_compute::test::fixed_point_arithmetic::traits::promote</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00056">FixedPoint.h:56</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">arm_compute::test::validation::Tensor</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dc"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">arm_compute::FixedPointOp</a></div><div class="ttdeci">FixedPointOp</div><div class="ttdoc">Fixed point operation. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00029">Types.h:29</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a39f6445d0b790034f0d8fac36f2eb7f5"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a39f6445d0b790034f0d8fac36f2eb7f5">arm_compute::NormalizationLayerInfo::type</a></div><div class="ttdeci">NormType type() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00521">Types.h:521</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a0549be3702c05e6ec1ada69a6d08e349"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a0549be3702c05e6ec1ada69a6d08e349">arm_compute::NormalizationLayerInfo::norm_size</a></div><div class="ttdeci">uint32_t norm_size() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00525">Types.h:525</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">arm_compute::ThresholdType</a></div><div class="ttdeci">ThresholdType</div><div class="ttdoc">Threshold mode. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00226">Types.h:226</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_af28869d53fbe340640044d672b29ba7c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#af28869d53fbe340640044d672b29ba7c">arm_compute::ActivationLayerInfo::b</a></div><div class="ttdeci">float b() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00494">Types.h:494</a></div></div>
<div class="ttc" id="tests_2validation_2_fixed_point_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_fixed_point_8h.xhtml">FixedPoint.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a982730e6f0da5f9490f59bc5f6bb3f27"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00074">Dimensions.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a0e91470444d96ed45eae0bac5b7c6042"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0e91470444d96ed45eae0bac5b7c6042">arm_compute::test::validation::tensor_operations::depth_convert&lt; uint8_t, int16_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; uint8_t, int16_t &gt;(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; int16_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00450">TensorOperations.h:450</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a4a10dcdb4134d755119468d8464d7604"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">arm_compute::test::validation::tensor_operations::print</a></div><div class="ttdeci">void print(const Tensor&lt; T &gt; &amp;in, std::ostream &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01356">TensorOperations.h:1356</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ae19ece6824a2bc089edcc619124d95d3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">arm_compute::test::validation::tensor_operations::convolution_layer</a></div><div class="ttdeci">void convolution_layer(const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00847">TensorOperations.h:847</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dca4b5ffcdaf38ce4d463171f5c977c5ab3"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::FixedPointOp::LOG</a></div><div class="ttdoc">Logarithm. </div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a4df91dc0be2437a7d1bfd6d8df72baa8"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a4df91dc0be2437a7d1bfd6d8df72baa8">arm_compute::NormalizationLayerInfo::kappa</a></div><div class="ttdeci">float kappa() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00537">Types.h:537</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ActivationLayerInfo::ActivationFunction::ABS</a></div><div class="ttdoc">Absolute. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00640">Utils.h:640</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00462">Types.h:462</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a55beddf67f69fc5312961b1b112560fb"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a55beddf67f69fc5312961b1b112560fb">arm_compute::ActivationLayerInfo::a</a></div><div class="ttdeci">float a() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00490">Types.h:490</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ab508d3cd11ab140d782c716debfcb25f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">arm_compute::test::validation::tensor_operations::absolute_difference</a></div><div class="ttdeci">void absolute_difference(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00270">TensorOperations.h:270</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml_ab5fe769d05a0f7dfee63972bdbd54261"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">arm_compute::test::validation::Tensor::num_elements</a></div><div class="ttdeci">int num_elements() const </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00066">Tensor.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a31ecd095dd99ad3b8527bb4736c79f4d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">arm_compute::test::validation::tensor_operations::normalization_layer</a></div><div class="ttdeci">void normalization_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, NormalizationLayerInfo norm_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00921">TensorOperations.h:921</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a8c8ce35c61b4f71cccec28d18161eaa1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a8c8ce35c61b4f71cccec28d18161eaa1">arm_compute::test::fixed_point_arithmetic::detail::log</a></div><div class="ttdeci">fixed_point&lt; T &gt; log(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00920">FixedPoint.h:920</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ab8680238fafb5a48dc1ebe47217f54e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">arm_compute::test::validation::tensor_operations::batch_normalization_layer</a></div><div class="ttdeci">void batch_normalization_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, const Tensor&lt; T &gt; &amp;mean, const Tensor&lt; T &gt; &amp;var, const Tensor&lt; T &gt; &amp;beta, const Tensor&lt; T &gt; &amp;gamma, float epsilon, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00783">TensorOperations.h:783</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a9d91c0affa9bc1921abc949791c514c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d91c0affa9bc1921abc949791c514c0">arm_compute::test::fixed_point_arithmetic::detail::add</a></div><div class="ttdeci">fixed_point&lt; T &gt; add(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00885">FixedPoint.h:885</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ac41b6c35f336e0a97f9b8823ff7fcd05"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">arm_compute::test::validation::tensor_operations::activation_layer</a></div><div class="ttdeci">void activation_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, ActivationLayerInfo act_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00686">TensorOperations.h:686</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a963f96bc7caff7e733ba2bfed26e453b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a963f96bc7caff7e733ba2bfed26e453b">arm_compute::test::validation::tensor_operations::depth_convert&lt; int8_t, float &gt;</a></div><div class="ttdeci">void depth_convert&lt; int8_t, float &gt;(const Tensor&lt; int8_t &gt; &amp;in, Tensor&lt; float &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00420">TensorOperations.h:420</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dca8c670f8c37b95e1ed14a0ce414b049c7"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::FixedPointOp::EXP</a></div><div class="ttdoc">Exponential. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a6e865331e6ad22ab8c6a47c836068eae"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">arm_compute::test::validation::tensor_operations::bitwise_and</a></div><div class="ttdeci">void bitwise_and(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00357">TensorOperations.h:357</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">arm_compute::ActivationLayerInfo::ActivationFunction::SQRT</a></div><div class="ttdoc">Square root. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a447ea0d3749644c6eb970d78ff7e11db"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a447ea0d3749644c6eb970d78ff7e11db">arm_compute::test::validation::tensor_operations::depth_convert&lt; int16_t, uint8_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; int16_t, uint8_t &gt;(const Tensor&lt; int16_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00487">TensorOperations.h:487</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml_a16bb8940c9d6aff998db9bd0ba011ffe"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">arm_compute::test::validation::Tensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00081">Tensor.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a09a0ab9b11ba12a3d4230bb07198a06d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a09a0ab9b11ba12a3d4230bb07198a06d">arm_compute::test::validation::tensor_operations::depth_convert&lt; uint8_t, uint16_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; uint8_t, uint16_t &gt;(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint16_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00441">TensorOperations.h:441</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="arm__compute_2core_2_fixed_point_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_fixed_point_8h.xhtml">FixedPoint.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aa2a75d7fb5a1cca91d6eab7888fc3431"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">arm_compute::test::validation::tensor_operations::threshold</a></div><div class="ttdeci">void threshold(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00651">TensorOperations.h:651</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aca1385f622ea543d14bdd997a2bcebcf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">arm_compute::test::validation::tensor_operations::gemm</a></div><div class="ttdeci">void gemm(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, const Tensor&lt; T &gt; &amp;in3, Tensor&lt; T &gt; &amp;out, float alpha, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00506">TensorOperations.h:506</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.xhtml">arm_compute::test::fixed_point_arithmetic::fixed_point</a></div><div class="ttdoc">Arbitrary fixed-point arithmetic class. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00084">FixedPoint.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml_ad2f1ea50a9e215ad8ef612a724a4866a"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ad2f1ea50a9e215ad8ef612a724a4866a">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00405">Types.h:405</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_af8ba83a7ab2a51404613c27f4bf1b502"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">arm_compute::test::validation::tensor_operations::fixed_point_pixel_wise_multiplication</a></div><div class="ttdeci">void fixed_point_pixel_wise_multiplication(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out, int scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00617">TensorOperations.h:617</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dca59c58364795af22cad54630be156712b"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca59c58364795af22cad54630be156712b">arm_compute::FixedPointOp::INV_SQRT</a></div><div class="ttdoc">Inverse square root. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00233">Types.h:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml_a92597b6ad54c8cebd6a987b7762eecfc"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a92597b6ad54c8cebd6a987b7762eecfc">arm_compute::test::validation::Tensor::data</a></div><div class="ttdeci">const T * data() const </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00086">Tensor.h:86</a></div></div>
<div class="ttc" id="tests_2validation_2_tensor_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a2b7623d9dd3fde1d0a3bbe034967cff5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a2b7623d9dd3fde1d0a3bbe034967cff5">arm_compute::test::fixed_point_arithmetic::detail::inv_sqrt</a></div><div class="ttdeci">fixed_point&lt; T &gt; inv_sqrt(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00925">FixedPoint.h:925</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdoc">Logistic. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a0500e22e76099c68d3e41b46e0cdd54c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">arm_compute::test::validation::tensor_operations::arithmetic_addition</a></div><div class="ttdeci">void arithmetic_addition(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00331">TensorOperations.h:331</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a4485bbf8646087afcb6d724e613da68f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a></div><div class="ttdeci">void depth_convert(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00414">TensorOperations.h:414</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a6f541aab23799f6c61d9c8d7ca9fe15c"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a6f541aab23799f6c61d9c8d7ca9fe15c">arm_compute::NormalizationLayerInfo::scale_coeff</a></div><div class="ttdeci">float scale_coeff() const </div><div class="ttdoc">Return the scaling factor of the normalization function. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00548">Types.h:548</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa12dec4e1f7ec620651b2b95c440ffac0">arm_compute::ActivationLayerInfo::ActivationFunction::SQUARE</a></div><div class="ttdoc">Square. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_afabf1ef7194a0156c90b3393e2a90cfa"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">arm_compute::test::validation::tensor_operations::accumulate_weighted</a></div><div class="ttdeci">void accumulate_weighted(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00314">TensorOperations.h:314</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a524e781138b8143ce949f16aca47632d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">arm_compute::test::validation::tensor_operations::bitwise_or</a></div><div class="ttdeci">void bitwise_or(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00367">TensorOperations.h:367</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00379">Types.h:379</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af0b73b0c4980a551d7cd4edec43ffd92"><div class="ttname"><a href="namespacearm__compute.xhtml#af0b73b0c4980a551d7cd4edec43ffd92">arm_compute::sqmul_qs8</a></div><div class="ttdeci">qint8_t sqmul_qs8(qint8_t a, qint8_t b, int fixed_point_position)</div><div class="ttdoc">8 bit fixed point scalar saturating multiply </div><div class="ttdef"><b>Definition:</b> <a href="_fixed_point_8inl_source.xhtml#l00107">FixedPoint.inl:107</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_aac60e291929bd45df7800bb860f7bf4f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">arm_compute::test::cpp11::round_half_even</a></div><div class="ttdeci">T round_half_even(T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</div><div class="ttdoc">Round floating-point value with half value rounding to nearest even. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00289">Utils.h:289</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even. </div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaacc516ab03b98f1c908ddf6ed4a7c45e9">arm_compute::ActivationLayerInfo::ActivationFunction::BOUNDED_RELU</a></div><div class="ttdoc">Bounded Rectifier. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml_a45cc7b9a37aa9f0e7d479248a27e1f58"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">arm_compute::test::validation::Tensor::data_type</a></div><div class="ttdeci">DataType data_type() const </div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00076">Tensor.h:76</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_af995ccfae7ea6d83f47d1212c3c7af28"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">arm_compute::test::validation::tensor_operations::accumulate</a></div><div class="ttdeci">void accumulate(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00283">TensorOperations.h:283</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dca4d98346f3d5cc5fa5666f0715abf25b1"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca4d98346f3d5cc5fa5666f0715abf25b1">arm_compute::FixedPointOp::RECIPROCAL</a></div><div class="ttdoc">Reciprocal. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_acee95d0eabaf4dc59612123c1fbbffb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">arm_compute::test::validation::tensor_operations::pixel_wise_multiplication</a></div><div class="ttdeci">void pixel_wise_multiplication(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00579">TensorOperations.h:579</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ac0098bc6f892a87934f223210dbfd6a9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac0098bc6f892a87934f223210dbfd6a9">arm_compute::test::validation::tensor_operations::depth_convert&lt; int16_t, int32_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; int16_t, int32_t &gt;(const Tensor&lt; int16_t &gt; &amp;in, Tensor&lt; int32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00496">TensorOperations.h:496</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml_a55fe6a30749e41ce31c2bb969a5aa25e"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml#a55fe6a30749e41ce31c2bb969a5aa25e">arm_compute::NormalizationLayerInfo::beta</a></div><div class="ttdeci">float beta() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00533">Types.h:533</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">arm_compute::ActivationLayerInfo::ActivationFunction::TANH</a></div><div class="ttdoc">Hyperbolic tangent. </div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml_a7e8311a3a774bceb8efae1d5c8c8aeff"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml#a7e8311a3a774bceb8efae1d5c8c8aeff">arm_compute::PoolingLayerInfo::pool_type</a></div><div class="ttdeci">PoolingType pool_type() const </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00438">Types.h:438</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaaac544aacc3615aada24897a215f5046">arm_compute::ActivationLayerInfo::ActivationFunction::LINEAR</a></div><div class="ttdoc">Linear. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1common__promoted__signed__type_xhtml_a6d8309776a9cb10567df1735666919ff"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">arm_compute::test::common_promoted_signed_type::intermediate_type</a></div><div class="ttdeci">typename traits::make_signed_conditional_t&lt; promoted_type &gt;::type intermediate_type</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00601">Utils.h:601</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a4965b2f6821e0cf0afee738158bd8377"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">arm_compute::test::saturate_cast</a></div><div class="ttdeci">T saturate_cast(T val)</div><div class="ttdoc">Saturate a value of type T against the numeric limits of type U. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00581">Utils.h:581</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649a01036ddcc971d02f6c32c3da31a119f2"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a01036ddcc971d02f6c32c3da31a119f2">arm_compute::ThresholdType::RANGE</a></div><div class="ttdoc">Threshold with two values. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a9d53af9692ab2f7ae6fc0017faeb46f0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a9d53af9692ab2f7ae6fc0017faeb46f0">arm_compute::test::fixed_point_arithmetic::detail::div</a></div><div class="ttdeci">fixed_point&lt; T &gt; div(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00900">FixedPoint.h:900</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_af782da2c5016738c96c16fee5e17670f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">arm_compute::test::fixed_point_arithmetic::detail::pow</a></div><div class="ttdeci">fixed_point&lt; T &gt; pow(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; a)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00935">FixedPoint.h:935</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">arm_compute::ActivationLayerInfo::ActivationFunction::SOFT_RELU</a></div><div class="ttdoc">Soft Rectifier. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">FixedPoint.h:880</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_a6854479935f66029852441b051e1a3e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#a6854479935f66029852441b051e1a3e0">arm_compute::test::fixed_point_arithmetic::detail::tanh</a></div><div class="ttdeci">fixed_point&lt; T &gt; tanh(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00930">FixedPoint.h:930</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a8e93dde24e9dfb46feaec452e192977c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">arm_compute::test::validation::tensor_operations::pooling_layer</a></div><div class="ttdeci">void pooling_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, PoolingLayerInfo pool_info, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01123">TensorOperations.h:1123</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a068d9be2e13dddcb8c8ab9f91e934a75"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">arm_compute::test::validation::tensor_operations::integral_image</a></div><div class="ttdeci">void integral_image(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00225">TensorOperations.h:225</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00088">Types.h:88</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649a98ad0e8750ae10ad556ed7a62affb452"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649a98ad0e8750ae10ad556ed7a62affb452">arm_compute::ThresholdType::BINARY</a></div><div class="ttdoc">Threshold with one value. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">arm_compute::NonLinearFilterFunction::MAX</a></div><div class="ttdoc">Non linear dilate. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a135ce9546985c784175156c32fa014af"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">arm_compute::test::validation::tensor_operations::arithmetic_subtraction</a></div><div class="ttdeci">void arithmetic_subtraction(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00344">TensorOperations.h:344</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a9629af50ada3b5dca5f23a639f6c8045"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">arm_compute::test::validation::tensor_operations::bitwise_not</a></div><div class="ttdeci">void bitwise_not(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00387">TensorOperations.h:387</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdoc">Truncates the least significand values that are lost in operations. </div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00425">Types.h:425</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59ca"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">arm_compute::NormType</a></div><div class="ttdeci">NormType</div><div class="ttdoc">The normalization type used for the normalization layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00338">Types.h:338</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::NormType::CROSS_MAP</a></div><div class="ttdoc">Normalization applied cross maps. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1traits_1_1promote_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">arm_compute::test::traits::promote</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00357">Utils.h:357</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00204">Types.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a531358310cc70fdd4f59637db7ce1b3e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a531358310cc70fdd4f59637db7ce1b3e">arm_compute::test::validation::tensor_operations::depth_convert&lt; float, int8_t &gt;</a></div><div class="ttdeci">void depth_convert&lt; float, int8_t &gt;(const Tensor&lt; float &gt; &amp;in, Tensor&lt; int8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00430">TensorOperations.h:430</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::NormType::IN_MAP_2D</a></div><div class="ttdoc">Normalization applied within the same map in 2D region. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a532d90e007d0cb6f3d43107229c40c32"><div class="ttname"><a href="namespacearm__compute.xhtml#a532d90e007d0cb6f3d43107229c40c32">arm_compute::sqadd_qs8</a></div><div class="ttdeci">qint8_t sqadd_qs8(qint8_t a, qint8_t b)</div><div class="ttdoc">8 bit fixed point scalar saturating add </div><div class="ttdef"><b>Definition:</b> <a href="_fixed_point_8inl_source.xhtml#l00063">FixedPoint.inl:63</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00115">Error.h:115</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_tensor_operations_8h.xhtml">TensorOperations.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
