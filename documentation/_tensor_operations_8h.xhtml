<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/TensorOperations.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_operations_8h.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TensorOperations.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml">FixedPoint.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="tests_2validation_2_tensor_8h_source.xhtml">Tensor.h</a>&quot;</code><br />
<code>#include &quot;Types.h&quot;</code><br />
<code>#include &quot;Utils.h&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_fixed_point_8h_source.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">arm_compute/core/Types.h</a>&quot;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;array&gt;</code><br />
<code>#include &lt;cmath&gt;</code><br />
</div>
<p><a href="_tensor_operations_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">arm_compute::test::validation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation_1_1tensor__operations"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml">arm_compute::test::validation::tensor_operations</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a068d9be2e13dddcb8c8ab9f91e934a75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">integral_image</a> (const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out)</td></tr>
<tr class="separator:a068d9be2e13dddcb8c8ab9f91e934a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab508d3cd11ab140d782c716debfcb25f"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:ab508d3cd11ab140d782c716debfcb25f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">absolute_difference</a> (const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out)</td></tr>
<tr class="separator:ab508d3cd11ab140d782c716debfcb25f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">accumulate</a> (const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out)</td></tr>
<tr class="separator:af995ccfae7ea6d83f47d1212c3c7af28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">accumulate_squared</a> (const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, uint32_t shift)</td></tr>
<tr class="separator:a53a4d082f0a3ae1523d728a4f1a5f22b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">accumulate_weighted</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, float alpha)</td></tr>
<tr class="separator:afabf1ef7194a0156c90b3393e2a90cfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">arithmetic_addition</a> (const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</td></tr>
<tr class="separator:a0500e22e76099c68d3e41b46e0cdd54c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135ce9546985c784175156c32fa014af"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:a135ce9546985c784175156c32fa014af"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">arithmetic_subtraction</a> (const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</td></tr>
<tr class="separator:a135ce9546985c784175156c32fa014af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e865331e6ad22ab8c6a47c836068eae"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a6e865331e6ad22ab8c6a47c836068eae"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">bitwise_and</a> (const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a6e865331e6ad22ab8c6a47c836068eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a524e781138b8143ce949f16aca47632d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a524e781138b8143ce949f16aca47632d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">bitwise_or</a> (const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a524e781138b8143ce949f16aca47632d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">bitwise_xor</a> (const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:aeef005a6d652352fd78acf84fd8fdb0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9629af50ada3b5dca5f23a639f6c8045"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a9629af50ada3b5dca5f23a639f6c8045"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">bitwise_not</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a9629af50ada3b5dca5f23a639f6c8045"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a934ba47d23b89b5868c6fad054e5a59d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a934ba47d23b89b5868c6fad054e5a59d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">box3x3</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a934ba47d23b89b5868c6fad054e5a59d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4485bbf8646087afcb6d724e613da68f"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 &gt; </td></tr>
<tr class="memitem:a4485bbf8646087afcb6d724e613da68f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">depth_convert</a> (const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a4485bbf8646087afcb6d724e613da68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963f96bc7caff7e733ba2bfed26e453b"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a963f96bc7caff7e733ba2bfed26e453b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a963f96bc7caff7e733ba2bfed26e453b">depth_convert&lt; int8_t, float &gt;</a> (const Tensor&lt; int8_t &gt; &amp;in, Tensor&lt; float &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a963f96bc7caff7e733ba2bfed26e453b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531358310cc70fdd4f59637db7ce1b3e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a531358310cc70fdd4f59637db7ce1b3e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a531358310cc70fdd4f59637db7ce1b3e">depth_convert&lt; float, int8_t &gt;</a> (const Tensor&lt; float &gt; &amp;in, Tensor&lt; int8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a531358310cc70fdd4f59637db7ce1b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a09a0ab9b11ba12a3d4230bb07198a06d">depth_convert&lt; uint8_t, uint16_t &gt;</a> (const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint16_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a09a0ab9b11ba12a3d4230bb07198a06d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e91470444d96ed45eae0bac5b7c6042"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a0e91470444d96ed45eae0bac5b7c6042"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0e91470444d96ed45eae0bac5b7c6042">depth_convert&lt; uint8_t, int16_t &gt;</a> (const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; int16_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a0e91470444d96ed45eae0bac5b7c6042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6b46cf712c2bf1e96eef20c6b1b816f5">depth_convert&lt; uint8_t, int32_t &gt;</a> (const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; int32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a6b46cf712c2bf1e96eef20c6b1b816f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a34b3b2d8ce85841a51f517bf38d3d3b3">depth_convert&lt; uint16_t, uint8_t &gt;</a> (const Tensor&lt; uint16_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a34b3b2d8ce85841a51f517bf38d3d3b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79219b20a374800b7da7222a70db89b2"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a79219b20a374800b7da7222a70db89b2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a79219b20a374800b7da7222a70db89b2">depth_convert&lt; uint16_t, uint32_t &gt;</a> (const Tensor&lt; uint16_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a79219b20a374800b7da7222a70db89b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a447ea0d3749644c6eb970d78ff7e11db"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a447ea0d3749644c6eb970d78ff7e11db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a447ea0d3749644c6eb970d78ff7e11db">depth_convert&lt; int16_t, uint8_t &gt;</a> (const Tensor&lt; int16_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:a447ea0d3749644c6eb970d78ff7e11db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0098bc6f892a87934f223210dbfd6a9"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ac0098bc6f892a87934f223210dbfd6a9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac0098bc6f892a87934f223210dbfd6a9">depth_convert&lt; int16_t, int32_t &gt;</a> (const Tensor&lt; int16_t &gt; &amp;in, Tensor&lt; int32_t &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</td></tr>
<tr class="separator:ac0098bc6f892a87934f223210dbfd6a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1385f622ea543d14bdd997a2bcebcf"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:aca1385f622ea543d14bdd997a2bcebcf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">gemm</a> (const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, const Tensor&lt; T &gt; &amp;in3, Tensor&lt; T &gt; &amp;out, float alpha, float beta)</td></tr>
<tr class="separator:aca1385f622ea543d14bdd997a2bcebcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memTemplParams" colspan="2">template&lt;typename T1 , typename T2 , typename T3 &gt; </td></tr>
<tr class="memitem:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">pixel_wise_multiplication</a> (const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</td></tr>
<tr class="separator:acee95d0eabaf4dc59612123c1fbbffb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">fixed_point_pixel_wise_multiplication</a> (const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out, int scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</td></tr>
<tr class="separator:af8ba83a7ab2a51404613c27f4bf1b502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</td></tr>
<tr class="separator:aa2a75d7fb5a1cca91d6eab7888fc3431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">activation_layer</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, ActivationLayerInfo act_info)</td></tr>
<tr class="separator:ac41b6c35f336e0a97f9b8823ff7fcd05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_integral&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">batch_normalization_layer</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, const Tensor&lt; T &gt; &amp;mean, const Tensor&lt; T &gt; &amp;var, const Tensor&lt; T &gt; &amp;beta, const Tensor&lt; T &gt; &amp;gamma, float epsilon, int fixed_point_position)</td></tr>
<tr class="separator:ab8680238fafb5a48dc1ebe47217f54e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae19ece6824a2bc089edcc619124d95d3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae19ece6824a2bc089edcc619124d95d3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">convolution_layer</a> (const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out, const PadStrideInfo &amp;conv_info)</td></tr>
<tr class="separator:ae19ece6824a2bc089edcc619124d95d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a590f86899d2cdff14487c16ce361d2a9"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a590f86899d2cdff14487c16ce361d2a9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">fully_connected_layer</a> (const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a590f86899d2cdff14487c16ce361d2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">normalization_layer</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, NormalizationLayerInfo norm_info)</td></tr>
<tr class="separator:a31ecd095dd99ad3b8527bb4736c79f4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e93dde24e9dfb46feaec452e192977c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8e93dde24e9dfb46feaec452e192977c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">pooling_layer</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, PoolingLayerInfo pool_info, int fixed_point_position)</td></tr>
<tr class="separator:a8e93dde24e9dfb46feaec452e192977c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type *  = nullptr&gt; </td></tr>
<tr class="memitem:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">softmax_layer</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</td></tr>
<tr class="separator:a8db9e6c61d6d8399da28198a81a2c92b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeffa8efd0492f825570507bc628e2968"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aeffa8efd0492f825570507bc628e2968"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">fixed_point_operation</a> (const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, FixedPointOp op)</td></tr>
<tr class="separator:aeffa8efd0492f825570507bc628e2968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a10dcdb4134d755119468d8464d7604"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4a10dcdb4134d755119468d8464d7604"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">print</a> (const Tensor&lt; T &gt; &amp;in, std::ostream &amp;out)</td></tr>
<tr class="separator:a4a10dcdb4134d755119468d8464d7604"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_tensor_operations_8h.xhtml">TensorOperations.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
