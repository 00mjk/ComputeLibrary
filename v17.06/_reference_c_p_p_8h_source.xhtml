<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/ReferenceCPP.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_reference_c_p_p_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ReferenceCPP.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_reference_c_p_p_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_REFERENCE_REFERENCE_CPP_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_REFERENCE_REFERENCE_CPP_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_reference_8h.xhtml">Reference.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_raw_tensor_8h.xhtml">RawTensor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>Tensor;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">   42</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">ReferenceCPP</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml">Reference</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">integral_image</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">absolute_difference</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">accumulate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">accumulate_squared</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint32_t shift);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">accumulate_weighted</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> alpha);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">arithmetic_addition</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">arithmetic_subtraction</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">bitwise_and</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">bitwise_or</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">bitwise_xor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">bitwise_not</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">box3x3</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">depth_convert</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">gemm</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src3,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                     <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> alpha, <span class="keywordtype">float</span> beta);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">fixed_point_pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">threshold</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint8_t <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">threshold</a>, uint8_t false_value, uint8_t true_value, <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">activation_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;input, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;output, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">batch_normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;mean, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;var, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;beta, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;gamma, <span class="keywordtype">float</span> epsilon,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                          <span class="keywordtype">int</span> fixed_point_position = 0);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">convolution_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">fully_connected_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, <span class="keywordtype">int</span> fixed_point_position = 0);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">softmax_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">fixed_point_operation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">ReferenceCPP</a>()  = <span class="keyword">delete</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    ~<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">ReferenceCPP</a>() = <span class="keyword">delete</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a99422cae0054f3a9d4b6eb87402d8f11"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">arm_compute::test::validation::ReferenceCPP::gemm</a></div><div class="ttdeci">static void gemm(const RawTensor &amp;src1, const RawTensor &amp;src2, const RawTensor &amp;src3, RawTensor &amp;dst, float alpha, float beta)</div><div class="ttdoc">Compute GEMM function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00169">ReferenceCPP.cpp:169</a></div></div>
<div class="ttc" id="_reference_8h_xhtml"><div class="ttname"><a href="_reference_8h.xhtml">Reference.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00047">RawTensor.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae158c03947db37d706260574866586e8"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">arm_compute::test::validation::ReferenceCPP::pooling_layer</a></div><div class="ttdeci">static void pooling_layer(const RawTensor &amp;src, RawTensor &amp;dst, PoolingLayerInfo pool_info, int fixed_point_position=0)</div><div class="ttdoc">Pooling layer of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00257">ReferenceCPP.cpp:257</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_abf10dbf9017acc5b941ca80879ed3650"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">arm_compute::test::validation::ReferenceCPP::bitwise_and</a></div><div class="ttdeci">static void bitwise_and(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise and between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP.cpp:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae1d31eb9d1ad6273e35c0b012c9b2cd1"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">arm_compute::test::validation::ReferenceCPP::depth_convert</a></div><div class="ttdeci">static void depth_convert(const RawTensor &amp;src, RawTensor &amp;dst, ConvertPolicy policy, uint32_t shift)</div><div class="ttdoc">Depth conversion from src to dst. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00161">ReferenceCPP.cpp:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a15536b2ec56dc51d7dc9ac09bd6a5d76"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">arm_compute::test::validation::ReferenceCPP::absolute_difference</a></div><div class="ttdeci">static void absolute_difference(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the absolute difference between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00052">ReferenceCPP.cpp:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00506">Types.h:506</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ab09b1a280817a388ed7bed899088ba0b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">arm_compute::test::validation::ReferenceCPP::arithmetic_subtraction</a></div><div class="ttdeci">static void arithmetic_subtraction(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, ConvertPolicy convert_policy)</div><div class="ttdoc">Arithmetic subtraction of src2 from src1. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00104">ReferenceCPP.cpp:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a600c009e5d449079fed05eb741e2e943"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">arm_compute::test::validation::ReferenceCPP::integral_image</a></div><div class="ttdeci">static void integral_image(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the integral image of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dc"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">arm_compute::FixedPointOp</a></div><div class="ttdeci">FixedPointOp</div><div class="ttdoc">Fixed point operation. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00029">Types.h:29</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a69eb15dea2a0579d8c33e2b9e07a2fb1"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">arm_compute::test::validation::ReferenceCPP::fully_connected_layer</a></div><div class="ttdeci">static void fully_connected_layer(const RawTensor &amp;src, const RawTensor &amp;weights, const RawTensor &amp;bias, RawTensor &amp;dst)</div><div class="ttdoc">Fully connected layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00239">ReferenceCPP.cpp:239</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">arm_compute::ThresholdType</a></div><div class="ttdeci">ThresholdType</div><div class="ttdoc">Threshold mode. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00226">Types.h:226</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a6d1292bec01869fc5efd1e39d3496dc3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">arm_compute::test::validation::ReferenceCPP::bitwise_xor</a></div><div class="ttdeci">static void bitwise_xor(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise xor between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP.cpp:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a28b261146dafd6effae75dfbfe411b29"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">arm_compute::test::validation::ReferenceCPP::convolution_layer</a></div><div class="ttdeci">static void convolution_layer(const RawTensor &amp;src, const RawTensor &amp;weights, const RawTensor &amp;bias, RawTensor &amp;dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Convolution layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00229">ReferenceCPP.cpp:229</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0aa8da1953b7cb44b1b75aec737adb48"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">arm_compute::test::validation::ReferenceCPP::accumulate</a></div><div class="ttdeci">static void accumulate(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to accumulate an input tensor into an output tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP.cpp:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a110ef9b03fb51be2f000391a300d1a2a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">arm_compute::test::validation::ReferenceCPP::accumulate_weighted</a></div><div class="ttdeci">static void accumulate_weighted(const RawTensor &amp;src, RawTensor &amp;dst, float alpha)</div><div class="ttdoc">Function to accumulate a weighted value from an input tensor to an output tensor. ...</div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP.cpp:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa72a69edbdb11aaa12f83881e038f1d5"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">arm_compute::test::validation::ReferenceCPP::fixed_point_operation</a></div><div class="ttdeci">static void fixed_point_operation(const RawTensor &amp;src, RawTensor &amp;dst, FixedPointOp op)</div><div class="ttdoc">Fixed point operations of src. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00273">ReferenceCPP.cpp:273</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a56c0f65e0e83ad40fe5ec3abfd16d7b9"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">arm_compute::test::validation::ReferenceCPP::activation_layer</a></div><div class="ttdeci">static void activation_layer(const RawTensor &amp;input, RawTensor &amp;output, ActivationLayerInfo act_info)</div><div class="ttdoc">Activation layer of src base on information from act_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00208">ReferenceCPP.cpp:208</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0dbabc9ed277607491fa75e1b8096132"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">arm_compute::test::validation::ReferenceCPP::threshold</a></div><div class="ttdeci">static void threshold(const RawTensor &amp;src, RawTensor &amp;dst, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdoc">Threshold ofsrc to dst. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP.cpp:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa07ff8d0956d3fb1a0ff2223d8ab7a93"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">arm_compute::test::validation::ReferenceCPP::fixed_point_pixel_wise_multiplication</a></div><div class="ttdeci">static void fixed_point_pixel_wise_multiplication(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Fixed-point Pixel-wise multiplication of src1 by src2. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00190">ReferenceCPP.cpp:190</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ad9c7e06a7125cdef72a0d0b8cd5c9440"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">arm_compute::test::validation::ReferenceCPP::bitwise_or</a></div><div class="ttdeci">static void bitwise_or(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise or between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP.cpp:123</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00233">Types.h:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a3242afdd5be299ca6260c2dcce581f75"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">arm_compute::test::validation::ReferenceCPP::bitwise_not</a></div><div class="ttdeci">static void bitwise_not(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise not of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP.cpp:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a2265d2e4d72f0095de962e5d9c5f9dc2"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">arm_compute::test::validation::ReferenceCPP::pixel_wise_multiplication</a></div><div class="ttdeci">static void pixel_wise_multiplication(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Element-wise multiplication of src1, src2 and scale. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00181">ReferenceCPP.cpp:181</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0dec321c30d2695ac8f9c20e8928543a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">arm_compute::test::validation::ReferenceCPP::accumulate_squared</a></div><div class="ttdeci">static void accumulate_squared(const RawTensor &amp;src, RawTensor &amp;dst, uint32_t shift)</div><div class="ttdoc">Function to accumulate a squared value from an input tensor to an output tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">arm_compute::test::validation::ReferenceCPP</a></div><div class="ttdoc">C++ reference implementation. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8h_source.xhtml#l00042">ReferenceCPP.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml">arm_compute::test::validation::Reference</a></div><div class="ttdoc">Interface for reference implementations. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_8h_source.xhtml#l00037">Reference.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ac9fec1f76f1b3b4cae3b7feb19e397c3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">arm_compute::test::validation::ReferenceCPP::batch_normalization_layer</a></div><div class="ttdeci">static void batch_normalization_layer(const RawTensor &amp;src, RawTensor &amp;dst, const RawTensor &amp;mean, const RawTensor &amp;var, const RawTensor &amp;beta, const RawTensor &amp;gamma, float epsilon, int fixed_point_position=0)</div><div class="ttdoc">Batch Normalization of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00216">ReferenceCPP.cpp:216</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_af7b729e6ded963c8bf9ead4012f17e02"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">arm_compute::test::validation::ReferenceCPP::box3x3</a></div><div class="ttdeci">static void box3x3(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute 3-by-3 box filtered result tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP.cpp:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa3379b88d6d53ab3c1d89b3df4f0dd4a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">arm_compute::test::validation::ReferenceCPP::softmax_layer</a></div><div class="ttdeci">static void softmax_layer(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Softmax Layer of src. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00265">ReferenceCPP.cpp:265</a></div></div>
<div class="ttc" id="_raw_tensor_8h_xhtml"><div class="ttname"><a href="_raw_tensor_8h.xhtml">RawTensor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae87f25d124d6c66c839ac929702aee11"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">arm_compute::test::validation::ReferenceCPP::arithmetic_addition</a></div><div class="ttdeci">static void arithmetic_addition(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, ConvertPolicy convert_policy)</div><div class="ttdoc">Arithmetic addition of src1 and src2. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00095">ReferenceCPP.cpp:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a7552cc54ae47676e4ea4842233d79587"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">arm_compute::test::validation::ReferenceCPP::normalization_layer</a></div><div class="ttdeci">static void normalization_layer(const RawTensor &amp;src, RawTensor &amp;dst, NormalizationLayerInfo norm_info)</div><div class="ttdoc">Normalization of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00249">ReferenceCPP.cpp:249</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00425">Types.h:425</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00204">Types.h:204</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_reference_c_p_p_8h.xhtml">ReferenceCPP.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
