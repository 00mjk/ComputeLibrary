<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/RawTensor.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_raw_tensor_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RawTensor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_raw_tensor_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_raw_tensor_8h.xhtml">RawTensor.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">   40</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">RawTensor::RawTensor</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    : _buffer(nullptr),</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      _shape(shape),</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      _format(format),</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _fixed_point_position(fixed_point_position)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af878b348cac7129792bd35d9a016b2d4">   49</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">RawTensor::RawTensor</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a>, <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    : _buffer(nullptr),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      _shape(shape),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      _data_type(data_type),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      _num_channels(num_channels),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      _fixed_point_position(fixed_point_position)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ac1b3afa1c0a4618768b43a7a0d930cd6">   59</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">RawTensor::RawTensor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    : _buffer(nullptr),</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      _shape(tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>()),</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      _format(tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>()),</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      _fixed_point_position(tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>())</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    _buffer = ::arm_compute::test::cpp14::make_unique&lt;BufferType[]&gt;(tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::copy(tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>(), tensor.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>() + <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a>(), _buffer.get());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abf951228abf3337929f26f7c0feedcac">   69</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abf951228abf3337929f26f7c0feedcac">RawTensor::operator=</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> tensor)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(*<span class="keyword">this</span>, tensor);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0914d4c14c88792d8fd2197c612b927e">   76</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0914d4c14c88792d8fd2197c612b927e">RawTensor::operator[]</a>(<span class="keywordtype">size_t</span> <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a2b10356eacc7faa2c59b46c2398b5022">   81</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> &amp;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0914d4c14c88792d8fd2197c612b927e">RawTensor::operator[]</a>(<span class="keywordtype">size_t</span> <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> _buffer[<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>];</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">   86</a></span>&#160;<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">RawTensor::shape</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> _shape;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">   91</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">RawTensor::element_size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">num_channels</a>() * <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">   96</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">RawTensor::fixed_point_position</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> _fixed_point_position;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">  101</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">RawTensor::size</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">size</a> = <a class="code" href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">std::accumulate</a>(_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">cbegin</a>(), _shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">cend</a>(), 1, std::multiplies&lt;size_t&gt;());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> size * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">  107</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">RawTensor::format</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> _format;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">  112</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">RawTensor::data_type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span>(_format != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(_format);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> _data_type;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">  124</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">RawTensor::num_channels</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">switch</span>(_format)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>:</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">Format::S16</a>:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">Format::U16</a>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">Format::S32</a>:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">Format::U32</a>:</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">Format::RGB888</a>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> _num_channels;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">  143</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">RawTensor::num_elements</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> _shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a>();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">  148</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> *<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">RawTensor::data</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ac1f37e90be932d4d38f607f225ab2b4f">  153</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> *<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">RawTensor::data</a>()</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> _buffer.get();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af53a404b9a0d663c5d60b199799ba185">  158</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> *<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af53a404b9a0d663c5d60b199799ba185">RawTensor::operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)<span class="keyword"> const</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7830529ae614a236c4663910bae31af4">  163</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">RawTensor::BufferType</a> *<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af53a404b9a0d663c5d60b199799ba185">RawTensor::operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;coord)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> _buffer.get() + <a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(_shape, coord) * <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test.xhtml#ac04d36ea1fb41a3dfd3afd4a89ef2470">  168</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor1, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;tensor2)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Use unqualified call to swap to enable ADL. But make std::swap available</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// as backup.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1test.xhtml#ac04d36ea1fb41a3dfd3afd4a89ef2470">std::swap</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._shape, tensor2._shape);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._format, tensor2._format);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._data_type, tensor2._data_type);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._num_channels, tensor2._num_channels);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">swap</a>(tensor1._buffer, tensor2._buffer);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a4498730adaf901d945c12841df994bba"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a4498730adaf901d945c12841df994bba">arm_compute::Dimensions::cbegin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cbegin() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points to the first element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00150">Dimensions.h:150</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_abd107d6e8ccfc38f781be8683d8141c2"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abd107d6e8ccfc38f781be8683d8141c2">arm_compute::test::RawTensor::num_channels</a></div><div class="ttdeci">int num_channels() const </div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00124">RawTensor.cpp:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00047">RawTensor.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00038">TensorShape.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a448f57f9d6aec61b3d85b898affe4a2e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">arm_compute::test::RawTensor::element_size</a></div><div class="ttdeci">size_t element_size() const </div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor.cpp:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_abf951228abf3337929f26f7c0feedcac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#abf951228abf3337929f26f7c0feedcac">arm_compute::test::RawTensor::operator=</a></div><div class="ttdeci">RawTensor &amp; operator=(RawTensor tensor)</div><div class="ttdoc">Create a deep copy of the given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00069">RawTensor.cpp:69</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a16bb8940c9d6aff998db9bd0ba011ffe"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">arm_compute::test::RawTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const </div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a13761831550669f43f4edee978181c46"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">arm_compute::test::RawTensor::shape</a></div><div class="ttdeci">TensorShape shape() const </div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor.cpp:86</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a0914d4c14c88792d8fd2197c612b927e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0914d4c14c88792d8fd2197c612b927e">arm_compute::test::RawTensor::operator[]</a></div><div class="ttdeci">BufferType &amp; operator[](size_t offset)</div><div class="ttdoc">Return value at offset in the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00076">RawTensor.cpp:76</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00201">helpers.h:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_aac782da1f912bceb5d8ad00c8dc892ac"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#aac782da1f912bceb5d8ad00c8dc892ac">arm_compute::test::RawTensor::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00101">RawTensor.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a0c875a3203d902e2ad6bc3045355e69e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a0c875a3203d902e2ad6bc3045355e69e">arm_compute::test::RawTensor::format</a></div><div class="ttdeci">Format format() const </div><div class="ttdoc">Image format of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00107">RawTensor.cpp:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a3d880156c78661ccfe9d3b706d260d56"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a3d880156c78661ccfe9d3b706d260d56">arm_compute::test::RawTensor::swap</a></div><div class="ttdeci">friend void swap(RawTensor &amp;tensor1, RawTensor &amp;tensor2)</div><div class="ttdoc">Swaps the content of the provided tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor.cpp:168</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00640">Utils.h:640</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a9c3b791dba4a4cff3785264b9260e9d5"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a9c3b791dba4a4cff3785264b9260e9d5">arm_compute::test::RawTensor::BufferType</a></div><div class="ttdeci">uint8_t BufferType</div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00081">RawTensor.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">2 channel, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_af53a404b9a0d663c5d60b199799ba185"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#af53a404b9a0d663c5d60b199799ba185">arm_compute::test::RawTensor::operator()</a></div><div class="ttdeci">const BufferType * operator()(const Coordinates &amp;coord) const </div><div class="ttdoc">Read only access to the specified element. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00158">RawTensor.cpp:158</a></div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_adf9b6d55d708c285d58511a780e937fc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#adf9b6d55d708c285d58511a780e937fc">arm_compute::Dimensions::cend</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::const_iterator cend() const </div><div class="ttdoc">Returns a read-only (constant) iterator that points one past the last element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00165">Dimensions.h:165</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59846ef5ca75cd81cdb7e8a1ce08f9db"><div class="ttname"><a href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">arm_compute::data_type_from_format</a></div><div class="ttdeci">DataType data_type_from_format(Format format)</div><div class="ttdoc">Return the data type used by a given single-planar pixel format. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00201">Utils.h:201</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_ac04d36ea1fb41a3dfd3afd4a89ef2470"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ac04d36ea1fb41a3dfd3afd4a89ef2470">arm_compute::test::swap</a></div><div class="ttdeci">void swap(RawTensor &amp;tensor1, RawTensor &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00168">RawTensor.cpp:168</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a4eaec01ba2c12093db609d1034ad0bc1"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">arm_compute::TensorShape::total_size</a></div><div class="ttdeci">size_t total_size() const </div><div class="ttdoc">Collapses all dimensions to a single linear total size. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00106">TensorShape.h:106</a></div></div>
<div class="ttc" id="accumulate_8cl_xhtml_a00e540076dd545ad59ac7482f8cdf514"><div class="ttname"><a href="accumulate_8cl.xhtml#a00e540076dd545ad59ac7482f8cdf514">accumulate</a></div><div class="ttdeci">__kernel void accumulate(__global uchar *input_ptr, uint input_stride_x, uint input_step_x, uint input_stride_y, uint input_step_y, uint input_offset_first_element_in_bytes, __global uchar *accu_ptr, uint accu_stride_x, uint accu_step_x, uint accu_stride_y, uint accu_step_y, uint accu_offset_first_element_in_bytes)</div><div class="ttdoc">This function accumulates an input image into output image. </div><div class="ttdef"><b>Definition:</b> <a href="accumulate_8cl_source.xhtml#l00041">accumulate.cl:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_ad5f076c202d054557fde207a7e3b3b41"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ad5f076c202d054557fde207a7e3b3b41">arm_compute::test::RawTensor::RawTensor</a></div><div class="ttdeci">RawTensor(TensorShape shape, Format format, int fixed_point_position=0)</div><div class="ttdoc">Create an uninitialised tensor of the given shape and format. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00040">RawTensor.cpp:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a7b53deaf986aa58ffa0090cc241dec64"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">arm_compute::test::RawTensor::data</a></div><div class="ttdeci">const BufferType * data() const </div><div class="ttdoc">Constant pointer to the underlying buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor.cpp:148</a></div></div>
<div class="ttc" id="_raw_tensor_8h_xhtml"><div class="ttname"><a href="_raw_tensor_8h.xhtml">RawTensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00060">Types.h:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_ab5fe769d05a0f7dfee63972bdbd54261"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#ab5fe769d05a0f7dfee63972bdbd54261">arm_compute::test::RawTensor::num_elements</a></div><div class="ttdeci">int num_elements() const </div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00143">RawTensor.cpp:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a45cc7b9a37aa9f0e7d479248a27e1f58"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">arm_compute::test::RawTensor::data_type</a></div><div class="ttdeci">DataType data_type() const </div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor.cpp:112</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_raw_tensor_8cpp.xhtml">RawTensor.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
