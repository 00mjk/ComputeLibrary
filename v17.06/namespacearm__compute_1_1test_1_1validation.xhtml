<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::test::validation Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1test_1_1validation.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::test::validation Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation_1_1cl"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1cl.xhtml">cl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation_1_1tensor__operations"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml">tensor_operations</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml">tensor_visitors</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1validation_1_1vx"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation_1_1vx.xhtml">vx</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1validation_1_1match__const.xhtml">match_const</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to create a constant type if the passed reference is constant.  <a href="structarm__compute_1_1test_1_1validation_1_1match__const.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml">Reference</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for reference implementations.  <a href="classarm__compute_1_1test_1_1validation_1_1_reference.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml">ReferenceCPP</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">C++ reference implementation.  <a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml">TensorFactory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1validation_1_1_validation_program_options.xhtml">ValidationProgramOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subclass of <a class="el" href="classarm__compute_1_1test_1_1_program_options.xhtml">ProgramOptions</a> that adds validation specific options.  <a href="classarm__compute_1_1test_1_1validation_1_1_validation_program_options.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ab777a17078ddd8365094354ca90057ca"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> = boost::variant&lt; <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint8_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int8_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint16_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int16_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; uint32_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; int32_t &gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt; float &gt;&gt;</td></tr>
<tr class="separator:ab777a17078ddd8365094354ca90057ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1042f1d7928dbde7edd7791e5b3a171b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1042f1d7928dbde7edd7791e5b3a171b">ValidationUserConfiguration</a> = <a class="el" href="structarm__compute_1_1test_1_1_user_configuration.xhtml">UserConfiguration</a></td></tr>
<tr class="separator:a1042f1d7928dbde7edd7791e5b3a171b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a51a4f6eac85f5b133ca975b4bc37175e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a51a4f6eac85f5b133ca975b4bc37175e"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; T, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a51a4f6eac85f5b133ca975b4bc37175e">get_activation_layer_test_bounds</a> (<a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> activation, int fixed_point_position=1)</td></tr>
<tr class="memdesc:a51a4f6eac85f5b133ca975b4bc37175e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the testing range for each activation layer.  <a href="#a51a4f6eac85f5b133ca975b4bc37175e">More...</a><br /></td></tr>
<tr class="separator:a51a4f6eac85f5b133ca975b4bc37175e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87338eeb8578a4990b6ab73b9696af45"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a87338eeb8578a4990b6ab73b9696af45"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; T, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a87338eeb8578a4990b6ab73b9696af45">get_batchnormalization_layer_test_bounds</a> (int fixed_point_position=1)</td></tr>
<tr class="memdesc:a87338eeb8578a4990b6ab73b9696af45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to get the testing range for batch normalization layer.  <a href="#a87338eeb8578a4990b6ab73b9696af45">More...</a><br /></td></tr>
<tr class="separator:a87338eeb8578a4990b6ab73b9696af45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7730e17dc901bdffefcf45b08bab135f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7730e17dc901bdffefcf45b08bab135f">validate</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;region, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;reference)</td></tr>
<tr class="memdesc:a7730e17dc901bdffefcf45b08bab135f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate valid regions.  <a href="#a7730e17dc901bdffefcf45b08bab135f">More...</a><br /></td></tr>
<tr class="separator:a7730e17dc901bdffefcf45b08bab135f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf9a1249c175fca84f5bd15907291305"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf9a1249c175fca84f5bd15907291305">validate</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a> &amp;padding, const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a> &amp;reference)</td></tr>
<tr class="memdesc:adf9a1249c175fca84f5bd15907291305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate padding.  <a href="#adf9a1249c175fca84f5bd15907291305">More...</a><br /></td></tr>
<tr class="separator:adf9a1249c175fca84f5bd15907291305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30a106bd01550a45b186beda2abccb9c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a30a106bd01550a45b186beda2abccb9c">validate</a> (const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;reference, float tolerance_value=0.f, float tolerance_number=0.f, uint64_t wrap_range=0)</td></tr>
<tr class="memdesc:a30a106bd01550a45b186beda2abccb9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate tensors.  <a href="#a30a106bd01550a45b186beda2abccb9c">More...</a><br /></td></tr>
<tr class="separator:a30a106bd01550a45b186beda2abccb9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9869b9fc8ba5ff877ab8a45fc947b7f9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9869b9fc8ba5ff877ab8a45fc947b7f9">validate</a> (const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;reference, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;valid_region, float tolerance_value=0.f, float tolerance_number=0.f, uint64_t wrap_range=0)</td></tr>
<tr class="memdesc:a9869b9fc8ba5ff877ab8a45fc947b7f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate tensors with valid region.  <a href="#a9869b9fc8ba5ff877ab8a45fc947b7f9">More...</a><br /></td></tr>
<tr class="separator:a9869b9fc8ba5ff877ab8a45fc947b7f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e8ca0b3d47827b9574e21e9d73cab6a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e8ca0b3d47827b9574e21e9d73cab6a">validate</a> (const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, const void *reference_value)</td></tr>
<tr class="memdesc:a1e8ca0b3d47827b9574e21e9d73cab6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate tensors against constant value.  <a href="#a1e8ca0b3d47827b9574e21e9d73cab6a">More...</a><br /></td></tr>
<tr class="separator:a1e8ca0b3d47827b9574e21e9d73cab6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47bc8966b6ed3446daaf27aa413047c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47bc8966b6ed3446daaf27aa413047c1">validate</a> (const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;tensor, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size, const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;border_mode, const void *border_value)</td></tr>
<tr class="memdesc:a47bc8966b6ed3446daaf27aa413047c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate border against a constant value.  <a href="#a47bc8966b6ed3446daaf27aa413047c1">More...</a><br /></td></tr>
<tr class="separator:a47bc8966b6ed3446daaf27aa413047c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c4e463dd04d06dc641fe48308e13334"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6c4e463dd04d06dc641fe48308e13334">validate</a> (std::vector&lt; unsigned int &gt; classified_labels, std::vector&lt; unsigned int &gt; expected_labels)</td></tr>
<tr class="memdesc:a6c4e463dd04d06dc641fe48308e13334"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate classified labels against expected ones.  <a href="#a6c4e463dd04d06dc641fe48308e13334">More...</a><br /></td></tr>
<tr class="separator:a6c4e463dd04d06dc641fe48308e13334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5930677af602cee147919968acaca59"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa5930677af602cee147919968acaca59"><td class="memTemplItemLeft" align="right" valign="top">boost::test_tools::predicate_result&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa5930677af602cee147919968acaca59">compare_dimensions</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions1, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dimensions2)</td></tr>
<tr class="separator:aa5930677af602cee147919968acaca59"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="ab777a17078ddd8365094354ca90057ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> =  boost::variant &lt; <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;uint8_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;int8_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;uint16_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;int16_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;uint32_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;int32_t&gt;, <a class="el" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor</a>&lt;float &gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_tensor_factory_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_tensor_factory_8h_source.xhtml">TensorFactory.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1042f1d7928dbde7edd7791e5b3a171b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1042f1d7928dbde7edd7791e5b3a171b">ValidationUserConfiguration</a> =  <a class="el" href="structarm__compute_1_1test_1_1_user_configuration.xhtml">UserConfiguration</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_validation_user_configuration_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_validation_user_configuration_8h_source.xhtml">ValidationUserConfiguration.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="aa5930677af602cee147919968acaca59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">boost::test_tools::predicate_result arm_compute::test::validation::compare_dimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dimensions2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_validation_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_validation_8h_source.xhtml">Validation.h</a>.</p>

<p>References <a class="el" href="_dimensions_8h_source.xhtml#l00109">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00166">validate()</a>.</p>

<p>Referenced by <a class="el" href="_validation_8cpp_source.xhtml#l00196">validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span>(dimensions1.num_dimensions() != dimensions2.num_dimensions())</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        boost::test_tools::predicate_result result(<span class="keyword">false</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        result.message() &lt;&lt; <span class="stringliteral">&quot;Different dimensionality [&quot;</span> &lt;&lt; dimensions1.num_dimensions() &lt;&lt; <span class="stringliteral">&quot;!=&quot;</span> &lt;&lt; dimensions2.num_dimensions() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; dimensions1.num_dimensions(); ++i)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span>(dimensions1[i] != dimensions2[i])</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            boost::test_tools::predicate_result result(<span class="keyword">false</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            result.message() &lt;&lt; <span class="stringliteral">&quot;Mismatch in dimension &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; [&quot;</span> &lt;&lt; dimensions1[i] &lt;&lt; <span class="stringliteral">&quot;!=&quot;</span> &lt;&lt; dimensions2[i] &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a51a4f6eac85f5b133ca975b4bc37175e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;T, T&gt; arm_compute::test::validation::get_activation_layer_test_bounds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a>&#160;</td>
          <td class="paramname"><em>activation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the testing range for each activation layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">activation</td><td>Activation function to test. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part. Defaults to 1.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair containing the lower upper testing bounds for a given function. </dd></dl>

<p>Definition at line <a class="el" href="tests_2validation_2_helpers_8h_source.xhtml#l00046">46</a> of file <a class="el" href="tests_2validation_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">arm_compute::test::fixed_point_arithmetic::detail::max()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaadcc44a50c791a591c74e00ecdda7c58d">ActivationLayerInfo::SOFT_RELU</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa36875f2500a09ee35d0bb7eb8c0b91b0">ActivationLayerInfo::SQRT</a>, and <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">bool</span> is_float = std::is_floating_point&lt;T&gt;::value;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    std::pair&lt;T, T&gt; bounds;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Set initial values</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">if</span>(is_float)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        bounds = std::make_pair(-255.f, 255.f);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        bounds = std::make_pair(std::numeric_limits&lt;T&gt;::lowest(), <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">std::numeric_limits&lt;T&gt;::max</a>());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Reduce testing ranges</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">switch</span>(activation)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="comment">// Reduce range as exponent overflows</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">if</span>(is_float)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                bounds.first  = -40.f;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                bounds.second = 40.f;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                bounds.first  = -(1 &lt;&lt; (fixed_point_position));</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                bounds.second = 1 &lt;&lt; (fixed_point_position);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment">// Reduce range as exponent overflows</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">if</span>(!is_float)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                bounds.first  = -(1 &lt;&lt; (fixed_point_position));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                bounds.second = 1 &lt;&lt; (fixed_point_position);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="comment">// Reduce range as sqrt should take a non-negative number</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            bounds.first = (is_float) ? 0 : 1 &lt;&lt; (fixed_point_position);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> bounds;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ad91bb73431b4de1f4946ed949d444849"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ad91bb73431b4de1f4946ed949d444849">arm_compute::test::fixed_point_arithmetic::detail::max</a></div><div class="ttdeci">fixed_point&lt; T &gt; max(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00880">FixedPoint.h:880</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a87338eeb8578a4990b6ab73b9696af45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;T, T&gt; arm_compute::test::validation::get_batchnormalization_layer_test_bounds </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fixed_point_position</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to get the testing range for batch normalization layer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_position</td><td>(Optional) Number of bits for the fractional part. Defaults to 1.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair containing the lower upper testing bounds. </dd></dl>

<p>Definition at line <a class="el" href="tests_2validation_2_helpers_8h_source.xhtml#l00103">103</a> of file <a class="el" href="tests_2validation_2_helpers_8h_source.xhtml">Helpers.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">bool</span> is_float = std::is_floating_point&lt;T&gt;::value;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::pair&lt;T, T&gt; bounds;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Set initial values</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span>(is_float)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        bounds = std::make_pair(-1.f, 1.f);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        bounds = std::make_pair(1, 1 &lt;&lt; (fixed_point_position));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> bounds;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a7730e17dc901bdffefcf45b08bab135f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>reference</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate valid regions. </p>
<ul>
<li>Dimensionality has to be the same.</li>
<li>Anchors have to match.</li>
<li>Shapes have to match. </li>
</ul>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00166">166</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00118">ValidRegion::anchor</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00109">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00119">ValidRegion::shape</a>.</p>

<p>Referenced by <a class="el" href="_validation_8h_source.xhtml#l00045">compare_dimensions()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00190">validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    BOOST_TEST(region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() == reference.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>());</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    BOOST_TEST(region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>() == reference.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++d)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        BOOST_TEST(region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d] == reference.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d]);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>(); ++d)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        BOOST_TEST(region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[d] == reference.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[d]);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00119">Types.h:119</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00109">Dimensions.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00118">Types.h:118</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adf9a1249c175fca84f5bd15907291305"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>reference</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate padding. </p>
<p>Padding on all sides has to be the same. </p>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00182">182</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00197">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00198">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00196">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00195">BorderSize::top</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    BOOST_TEST(padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == reference.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    BOOST_TEST(padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> == reference.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    BOOST_TEST(padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> == reference.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    BOOST_TEST(padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> == reference.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00195">Types.h:195</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00197">Types.h:197</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00198">Types.h:198</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00196">Types.h:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a30a106bd01550a45b186beda2abccb9c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>reference</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerance_value</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerance_number</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>wrap_range</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate tensors. </p>
<ul>
<li>Dimensionality has to be the same.</li>
<li>All values have to match.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>: wrap_range allows cases where reference tensor rounds up to the wrapping point, causing it to wrap around to zero while the test tensor stays at wrapping point to pass. This may permit true erroneous cases (difference between reference tensor and test tensor is multiple of wrap_range), but such errors would be detected by other test cases. </dd></dl>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00190">190</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">IAccessor::shape()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00452">arm_compute::test::shape_to_valid_region()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00166">validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Validate with valid region covering the entire shape</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6c4e463dd04d06dc641fe48308e13334">validate</a>(tensor, reference, <a class="code" href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">shape_to_valid_region</a>(tensor.shape()), tolerance_value, tolerance_number, wrap_range);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_xhtml_a670cba074b4be0bf9af03e48250bd616"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(TensorShape shape)</div><div class="ttdoc">Create a valid region covering the enitre tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00452">Utils.h:452</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6c4e463dd04d06dc641fe48308e13334"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6c4e463dd04d06dc641fe48308e13334">arm_compute::test::validation::validate</a></div><div class="ttdeci">void validate(std::vector&lt; unsigned int &gt; classified_labels, std::vector&lt; unsigned int &gt; expected_labels)</div><div class="ttdoc">Validate classified labels against expected ones. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8cpp_source.xhtml#l00347">Validation.cpp:347</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9869b9fc8ba5ff877ab8a45fc947b7f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>reference</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerance_value</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerance_number</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>wrap_range</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate tensors with valid region. </p>
<ul>
<li>Dimensionality has to be the same.</li>
<li>All values have to match.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>: wrap_range allows cases where reference tensor rounds up to the wrapping point, causing it to wrap around to zero while the test tensor stays at wrapping point to pass. This may permit true erroneous cases (difference between reference tensor and test tensor is multiple of wrap_range), but such errors would be detected by other test cases. </dd></dl>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00196">196</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="_validation_8h_source.xhtml#l00045">compare_dimensions()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">IAccessor::data_type()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor::data_type()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#aa459796b5489eca8a9160cb5dcf1a103">IAccessor::element_size()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00091">RawTensor::element_size()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">arm_compute::element_size_from_data_type()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">IAccessor::format()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00107">RawTensor::format()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00611">arm_compute::test::index2coord()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00658">arm_compute::test::is_in_valid_region()</a>, <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">arm_compute::test::fixed_point_arithmetic::detail::min()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">IAccessor::num_channels()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00124">RawTensor::num_channels()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">IAccessor::num_elements()</a>, <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00143">RawTensor::num_elements()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">IAccessor::shape()</a>, and <a class="el" href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor::shape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    int64_t num_mismatches = 0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    int64_t num_elements   = 0;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    BOOST_TEST(tensor.element_size() == reference.element_size());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    BOOST_TEST(tensor.format() == reference.format());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    BOOST_TEST(tensor.data_type() == reference.data_type());</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    BOOST_TEST(tensor.num_channels() == reference.num_channels());</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    BOOST_TEST(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa5930677af602cee147919968acaca59">compare_dimensions</a>(tensor.shape(), reference.shape()));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_elements = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(tensor.num_elements(), reference.num_elements());</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    min_channels = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">std::min</a>(tensor.num_channels(), reference.num_channels());</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> channel_size = <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(reference.data_type());</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Iterate over all elements within valid region, e.g. U8, S16, RGB888, ...</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; min_elements; ++element_idx)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">const</span> Coordinates <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(reference.shape(), element_idx);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">is_in_valid_region</a>(valid_region, <span class="keywordtype">id</span>))</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            check_single_element(<span class="keywordtype">id</span>, tensor, reference, tolerance_value, wrap_range, min_channels, channel_size, num_mismatches, num_elements);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> int64_t absolute_tolerance_number = tolerance_number * num_elements;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   percent_mismatches        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    BOOST_TEST(num_mismatches &lt;= absolute_tolerance_number,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;               num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;               &lt;&lt; <span class="stringliteral">&quot;%) mismatched (maximum tolerated &quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; tolerance_number &lt;&lt; <span class="stringliteral">&quot;%)&quot;</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_aabcf39e3917f842dbc5fbb0d802f24d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#aabcf39e3917f842dbc5fbb0d802f24d5">arm_compute::test::fixed_point_arithmetic::detail::min</a></div><div class="ttdeci">fixed_point&lt; T &gt; min(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00875">FixedPoint.h:875</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a58ee979a599b3b6a2587964106b1910c"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">arm_compute::test::is_in_valid_region</a></div><div class="ttdeci">bool is_in_valid_region(const ValidRegion &amp;valid_region, const Coordinates &amp;coord)</div><div class="ttdoc">Check if a coordinate is within a valid region. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00658">Utils.h:658</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa5930677af602cee147919968acaca59"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa5930677af602cee147919968acaca59">arm_compute::test::validation::compare_dimensions</a></div><div class="ttdeci">boost::test_tools::predicate_result compare_dimensions(const Dimensions&lt; T &gt; &amp;dimensions1, const Dimensions&lt; T &gt; &amp;dimensions2)</div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00045">Validation.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1e8ca0b3d47827b9574e21e9d73cab6a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>reference_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate tensors against constant value. </p>
<ul>
<li>All values have to match. </li>
</ul>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00229">229</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7cfb31af63202568efef5214acfbf3ba">IAccessor::data_type()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">arm_compute::element_size_from_data_type()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00611">arm_compute::test::index2coord()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#ac492280ef2d7889f1226d34743b74459">IAccessor::num_channels()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">IAccessor::num_elements()</a>, and <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">IAccessor::shape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    BOOST_TEST_REQUIRE((reference_value != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    int64_t      num_mismatches = 0;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    int64_t      num_elements   = 0;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> channel_size   = <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(tensor.data_type());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// Iterate over all elements, e.g. U8, S16, RGB888, ...</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; tensor.num_elements(); ++element_idx)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> Coordinates <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(tensor.shape(), element_idx);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> ptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// Iterate over all channels within one element</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel = 0; channel &lt; tensor.num_channels(); ++channel)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> channel_offset = channel * channel_size;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> target         = get_double_data(ptr + channel_offset, tensor.data_type());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> ref            = get_double_data(reference_value, tensor.data_type());</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">double</span> difference     = target - ref;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            BOOST_TEST_INFO(<span class="stringliteral">&quot;id = &quot;</span> &lt;&lt; <span class="keywordtype">id</span>);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            BOOST_TEST_INFO(<span class="stringliteral">&quot;channel = &quot;</span> &lt;&lt; channel);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            BOOST_TEST_INFO(<span class="stringliteral">&quot;reference = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; ref);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            BOOST_TEST_INFO(<span class="stringliteral">&quot;target = &quot;</span> &lt;&lt; std::setprecision(5) &lt;&lt; target);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            BOOST_TEST_WARN(difference == 0);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">if</span>(difference != 0.f)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                ++num_mismatches;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            ++num_elements;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> percent_mismatches = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_TEST(num_mismatches == 0,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;               num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches &lt;&lt; <span class="stringliteral">&quot;%) mismatched&quot;</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a47bc8966b6ed3446daaf27aa413047c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml">IAccessor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> &amp;&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>border_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate border against a constant value. </p>
<ul>
<li>All border values have to match the specified value if mode is CONSTANT.</li>
<li>All border values have to be replicated if mode is REPLICATE.</li>
<li>Nothing is validated for mode UNDEFINED. </li>
</ul>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00273">273</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00197">BorderSize::bottom</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::CONSTANT</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00611">arm_compute::test::index2coord()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00198">BorderSize::left</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a7596bc2928432a0ac2271bc9184d692e">IAccessor::num_elements()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00196">BorderSize::right</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00074">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="classarm__compute_1_1test_1_1_i_accessor.xhtml#a1c5e120ea2712b21296aa8f62421d3c1">IAccessor::shape()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00195">BorderSize::top</a>, and <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::UNDEFINED</a>.</p>
<div class="fragment"><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span>(border_mode == BorderMode::UNDEFINED)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(border_mode == BorderMode::CONSTANT)</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        BOOST_TEST((border_value != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    int64_t   num_mismatches = 0;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    int64_t   num_elements   = 0;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> slice_size     = tensor.shape()[0] * tensor.shape()[1];</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> element_idx = 0; element_idx &lt; tensor.num_elements(); element_idx += slice_size)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        Coordinates <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(tensor.shape(), element_idx);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="comment">// Top border</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = -border_size.top; y &lt; 0; ++y)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordtype">id</span>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">set</a>(1, y);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = -border_size.left; x &lt; static_cast&lt;int&gt;(tensor.shape()[0]) + static_cast&lt;int&gt;(border_size.right); ++x)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordtype">id</span>.set(0, x);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                check_border_element(tensor, <span class="keywordtype">id</span>, border_mode, border_value, num_elements, num_mismatches);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="comment">// Bottom border</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = tensor.shape()[1]; y &lt; static_cast&lt;int&gt;(tensor.shape()[1]) + static_cast&lt;int&gt;(border_size.bottom); ++y)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordtype">id</span>.set(1, y);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = -border_size.left; x &lt; static_cast&lt;int&gt;(tensor.shape()[0]) + static_cast&lt;int&gt;(border_size.right); ++x)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keywordtype">id</span>.set(0, x);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                check_border_element(tensor, <span class="keywordtype">id</span>, border_mode, border_value, num_elements, num_mismatches);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="comment">// Left/right border</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = 0; y &lt; static_cast&lt;int&gt;(tensor.shape()[1]); ++y)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordtype">id</span>.set(1, y);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="comment">// Left border</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = -border_size.left; x &lt; 0; ++x)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <span class="keywordtype">id</span>.set(0, x);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                check_border_element(tensor, <span class="keywordtype">id</span>, border_mode, border_value, num_elements, num_mismatches);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="comment">// Right border</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = tensor.shape()[0]; x &lt; static_cast&lt;int&gt;(tensor.shape()[0]) + static_cast&lt;int&gt;(border_size.right); ++x)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordtype">id</span>.set(0, x);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                check_border_element(tensor, <span class="keywordtype">id</span>, border_mode, border_value, num_elements, num_mismatches);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> percent_mismatches = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(num_mismatches) / num_elements * 100.f;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    BOOST_TEST(num_mismatches == 0,</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;               num_mismatches &lt;&lt; <span class="stringliteral">&quot; values (&quot;</span> &lt;&lt; std::setprecision(2) &lt;&lt; percent_mismatches &lt;&lt; <span class="stringliteral">&quot;%) mismatched&quot;</span>);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a982730e6f0da5f9490f59bc5f6bb3f27"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a982730e6f0da5f9490f59bc5f6bb3f27">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value)</div><div class="ttdoc">Accessor to set the value of one of the dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00074">Dimensions.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00611">Utils.h:611</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6c4e463dd04d06dc641fe48308e13334"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>classified_labels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>expected_labels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate classified labels against expected ones. </p>
<ul>
<li>All values should match </li>
</ul>

<p>Definition at line <a class="el" href="_validation_8cpp_source.xhtml#l00347">347</a> of file <a class="el" href="_validation_8cpp_source.xhtml">Validation.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    BOOST_TEST(expected_labels.size() != 0);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    BOOST_TEST(classified_labels.size() == expected_labels.size());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; expected_labels.size(); ++i)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        BOOST_TEST(classified_labels[i] == expected_labels[i]);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml">validation</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
