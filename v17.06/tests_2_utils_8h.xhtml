<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/Utils.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('tests_2_utils_8h.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Utils.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_coordinates_8h_source.xhtml">arm_compute/core/Coordinates.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_error_8h_source.xhtml">arm_compute/core/Error.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_fixed_point_8h_source.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_tensor_shape_8h_source.xhtml">arm_compute/core/TensorShape.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">arm_compute/core/Types.h</a>&quot;</code><br />
<code>#include &lt;cmath&gt;</code><br />
<code>#include &lt;cstddef&gt;</code><br />
<code>#include &lt;limits&gt;</code><br />
<code>#include &lt;memory&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;type_traits&gt;</code><br />
</div>
<p><a href="tests_2_utils_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml">_Unique_if&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">make_unqiue is missing in CPP11.  <a href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[]_4.xhtml">_Unique_if&lt; T[]&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.xhtml">_Unique_if&lt; T[N]&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote.xhtml">promote&lt; T &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.xhtml">promote&lt; uint8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.xhtml">promote&lt; int8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.xhtml">promote&lt; uint16_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.xhtml">promote&lt; int16_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.xhtml">promote&lt; uint32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.xhtml">promote&lt; int32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.xhtml">promote&lt; float &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml">common_promoted_signed_type&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the signed promoted common type.  <a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml">arm_compute::test</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1cpp11"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml">arm_compute::test::cpp11</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1cpp14"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp14.xhtml">arm_compute::test::cpp14</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1test_1_1traits"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml">arm_compute::test::traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ac20ca549fa27b2eed44367745055a233"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac20ca549fa27b2eed44367745055a233"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">promote_t</a> = typename promote&lt; T &gt;::type</td></tr>
<tr class="separator:ac20ca549fa27b2eed44367745055a233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a381020121bcfd7b20c6bc4ecb807caa1"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a381020121bcfd7b20c6bc4ecb807caa1"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1traits.xhtml#a381020121bcfd7b20c6bc4ecb807caa1">make_signed_conditional_t</a> = typename std::conditional&lt; std::is_integral&lt; T &gt;::value, std::make_signed&lt; T &gt;, std::common_type&lt; T &gt;&gt;::type</td></tr>
<tr class="separator:a381020121bcfd7b20c6bc4ecb807caa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab2182d3de5899d24c8815f8df940bbc0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab2182d3de5899d24c8815f8df940bbc0"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">to_string</a> (T &amp;&amp;value)</td></tr>
<tr class="memdesc:ab2182d3de5899d24c8815f8df940bbc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer and float values to string.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">More...</a><br /></td></tr>
<tr class="separator:ab2182d3de5899d24c8815f8df940bbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">stoi</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to integer.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">More...</a><br /></td></tr>
<tr class="separator:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">stoul</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a42d7dd749c32cb5d140cbc27a991c17b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to unsigned long.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">More...</a><br /></td></tr>
<tr class="separator:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740c4a41f6fce7cd8421b37f536314a8"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a740c4a41f6fce7cd8421b37f536314a8"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">stof</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a740c4a41f6fce7cd8421b37f536314a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to float.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">More...</a><br /></td></tr>
<tr class="separator:a740c4a41f6fce7cd8421b37f536314a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a368408d8f055f372488126469ff01c"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a5a368408d8f055f372488126469ff01c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">round</a> (T value)</td></tr>
<tr class="memdesc:a5a368408d8f055f372488126469ff01c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">More...</a><br /></td></tr>
<tr class="separator:a5a368408d8f055f372488126469ff01c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">trunc</a> (T value)</td></tr>
<tr class="memdesc:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate floating-point value.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">More...</a><br /></td></tr>
<tr class="separator:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a921d858259fce667e4680f419b5db6d5"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a921d858259fce667e4680f419b5db6d5"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">copysign</a> (T x, T y)</td></tr>
<tr class="memdesc:a921d858259fce667e4680f419b5db6d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">More...</a><br /></td></tr>
<tr class="separator:a921d858259fce667e4680f419b5db6d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad473ea84f8bab197d5e32d7693f3f121"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ad473ea84f8bab197d5e32d7693f3f121"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">round_half_up</a> (T value)</td></tr>
<tr class="memdesc:ad473ea84f8bab197d5e32d7693f3f121"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to positive infinity.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">More...</a><br /></td></tr>
<tr class="separator:ad473ea84f8bab197d5e32d7693f3f121"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac60e291929bd45df7800bb860f7bf4f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:aac60e291929bd45df7800bb860f7bf4f"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">round_half_even</a> (T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</td></tr>
<tr class="memdesc:aac60e291929bd45df7800bb860f7bf4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to nearest even.  <a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">More...</a><br /></td></tr>
<tr class="separator:aac60e291929bd45df7800bb860f7bf4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c2ef4dca85bd72e5c86a8ca68e92fa"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:ab7c2ef4dca85bd72e5c86a8ca68e92fa"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Single_object&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#ab7c2ef4dca85bd72e5c86a8ca68e92fa">make_unique</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:ab7c2ef4dca85bd72e5c86a8ca68e92fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1911aa34fd4c2a7d3a3a3c4a12bf6af"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ad1911aa34fd4c2a7d3a3a3c4a12bf6af"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Unknown_bound&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#ad1911aa34fd4c2a7d3a3a3c4a12bf6af">make_unique</a> (size_t n)</td></tr>
<tr class="separator:ad1911aa34fd4c2a7d3a3a3c4a12bf6af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1b87b35be0492ab16d5c7030f9ded1"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:a5d1b87b35be0492ab16d5c7030f9ded1"><td class="memTemplItemLeft" align="right" valign="top">_Unique_if&lt; T &gt;::_Known_bound&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp14.xhtml#a5d1b87b35be0492ab16d5c7030f9ded1">make_unique</a> (Args &amp;&amp;...)=delete</td></tr>
<tr class="separator:a5d1b87b35be0492ab16d5c7030f9ded1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa337ab76176f3c4193642ac6de3a61cf"><td class="memItemLeft" align="right" valign="top">Format&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a> (Channel channel)</td></tr>
<tr class="memdesc:aa337ab76176f3c4193642ac6de3a61cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Look up the format corresponding to a channel.  <a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">More...</a><br /></td></tr>
<tr class="separator:aa337ab76176f3c4193642ac6de3a61cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memItemLeft" align="right" valign="top">Format&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">get_channel_format</a> (Channel channel)</td></tr>
<tr class="memdesc:ac7dbe33793790fc37a5eda11ed6b0273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the format of a channel.  <a href="namespacearm__compute_1_1test.xhtml#ac7dbe33793790fc37a5eda11ed6b0273">More...</a><br /></td></tr>
<tr class="separator:ac7dbe33793790fc37a5eda11ed6b0273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T &gt; </td></tr>
<tr class="memitem:a1ebbb23b0094d47c51226d58e17e6447"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">foldl</a> (F &amp;&amp;, const T &amp;value)</td></tr>
<tr class="memdesc:a1ebbb23b0094d47c51226d58e17e6447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#a1ebbb23b0094d47c51226d58e17e6447">More...</a><br /></td></tr>
<tr class="separator:a1ebbb23b0094d47c51226d58e17e6447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename U &gt; </td></tr>
<tr class="memitem:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">foldl</a> (F &amp;&amp;func, T &amp;&amp;value1, U &amp;&amp;value2) -&gt; decltype(func(value1, value2))</td></tr>
<tr class="memdesc:ad933f996ccb22854ae56dd86de8cbbfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base case of foldl.  <a href="namespacearm__compute_1_1test.xhtml#ad933f996ccb22854ae56dd86de8cbbfe">More...</a><br /></td></tr>
<tr class="separator:ad933f996ccb22854ae56dd86de8cbbfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89322cccde5e0a27d3a41085d3fd366c"><td class="memTemplParams" colspan="2">template&lt;typename F , typename I , typename T , typename... Vs&gt; </td></tr>
<tr class="memitem:a89322cccde5e0a27d3a41085d3fd366c"><td class="memTemplItemLeft" align="right" valign="top">I&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a89322cccde5e0a27d3a41085d3fd366c">foldl</a> (F &amp;&amp;func, I &amp;&amp;initial, T &amp;&amp;value, Vs &amp;&amp;...values)</td></tr>
<tr class="memdesc:a89322cccde5e0a27d3a41085d3fd366c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fold left.  <a href="namespacearm__compute_1_1test.xhtml#a89322cccde5e0a27d3a41085d3fd366c">More...</a><br /></td></tr>
<tr class="separator:a89322cccde5e0a27d3a41085d3fd366c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a670cba074b4be0bf9af03e48250bd616"><td class="memItemLeft" align="right" valign="top">ValidRegion&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">shape_to_valid_region</a> (TensorShape shape)</td></tr>
<tr class="memdesc:a670cba074b4be0bf9af03e48250bd616"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region covering the enitre tensor shape.  <a href="namespacearm__compute_1_1test.xhtml#a670cba074b4be0bf9af03e48250bd616">More...</a><br /></td></tr>
<tr class="separator:a670cba074b4be0bf9af03e48250bd616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b97d7bba7b5cee833eb5c2282e8d246"><td class="memItemLeft" align="right" valign="top">ValidRegion&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">shape_to_valid_region_undefined_border</a> (TensorShape shape, BorderSize border_size)</td></tr>
<tr class="memdesc:a6b97d7bba7b5cee833eb5c2282e8d246"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a valid region covering the tensor shape with UNDEFINED border mode and specified border size.  <a href="namespacearm__compute_1_1test.xhtml#a6b97d7bba7b5cee833eb5c2282e8d246">More...</a><br /></td></tr>
<tr class="separator:a6b97d7bba7b5cee833eb5c2282e8d246"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a356470553f2afd5673a41cf4da48e33b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">required_padding</a> (int size, int step)</td></tr>
<tr class="memdesc:a356470553f2afd5673a41cf4da48e33b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the required padding given the available <code>size</code> and the required.  <a href="namespacearm__compute_1_1test.xhtml#a356470553f2afd5673a41cf4da48e33b">More...</a><br /></td></tr>
<tr class="separator:a356470553f2afd5673a41cf4da48e33b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08e86555c8b4d8ae148173d0bda4552f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a08e86555c8b4d8ae148173d0bda4552f">required_padding_undefined_border_write</a> (int size, int step, int border_size)</td></tr>
<tr class="memdesc:a08e86555c8b4d8ae148173d0bda4552f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the required padding for writing operation with UNDEFINED border mode.  <a href="namespacearm__compute_1_1test.xhtml#a08e86555c8b4d8ae148173d0bda4552f">More...</a><br /></td></tr>
<tr class="separator:a08e86555c8b4d8ae148173d0bda4552f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa9677420848c94f3a8fd0c3bb0d1fc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#aaaa9677420848c94f3a8fd0c3bb0d1fc">required_padding_undefined_border_read</a> (int size, int read_step, int process_step)</td></tr>
<tr class="memdesc:aaaa9677420848c94f3a8fd0c3bb0d1fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate the required padding for reading operation with UNDEFINED border mode.  <a href="namespacearm__compute_1_1test.xhtml#aaaa9677420848c94f3a8fd0c3bb0d1fc">More...</a><br /></td></tr>
<tr class="separator:aaaa9677420848c94f3a8fd0c3bb0d1fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1e6934e95738573214c2ce1d6648d116"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a> (void *ptr, T value, DataType data_type)</td></tr>
<tr class="memdesc:a1e6934e95738573214c2ce1d6648d116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write the value after casting the pointer according to <code>data_type</code>.  <a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">More...</a><br /></td></tr>
<tr class="separator:a1e6934e95738573214c2ce1d6648d116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplParams" colspan="2">template&lt;typename U , typename T &gt; </td></tr>
<tr class="memitem:a4965b2f6821e0cf0afee738158bd8377"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">saturate_cast</a> (T val)</td></tr>
<tr class="memdesc:a4965b2f6821e0cf0afee738158bd8377"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturate a value of type T against the numeric limits of type U.  <a href="namespacearm__compute_1_1test.xhtml#a4965b2f6821e0cf0afee738158bd8377">More...</a><br /></td></tr>
<tr class="separator:a4965b2f6821e0cf0afee738158bd8377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memItemLeft" align="right" valign="top">Coordinates&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a> (const TensorShape &amp;shape, int index)</td></tr>
<tr class="memdesc:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a linear index into n-dimensional coordinates.  <a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">More...</a><br /></td></tr>
<tr class="separator:a24d8c0391cfa38e78969b6ad97c0ff09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a> (const TensorShape &amp;shape, const Coordinates &amp;coord)</td></tr>
<tr class="memdesc:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearise the given coordinate.  <a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">More...</a><br /></td></tr>
<tr class="separator:a9be4cb7e6ee20063a4a10bc3abb750b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58ee979a599b3b6a2587964106b1910c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">is_in_valid_region</a> (const ValidRegion &amp;valid_region, const Coordinates &amp;coord)</td></tr>
<tr class="memdesc:a58ee979a599b3b6a2587964106b1910c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a coordinate is within a valid region.  <a href="namespacearm__compute_1_1test.xhtml#a58ee979a599b3b6a2587964106b1910c">More...</a><br /></td></tr>
<tr class="separator:a58ee979a599b3b6a2587964106b1910c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="tests_2_utils_8h.xhtml">Utils.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
