<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::test::cpp11 Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1test_1_1cpp11.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::test::cpp11 Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab2182d3de5899d24c8815f8df940bbc0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab2182d3de5899d24c8815f8df940bbc0"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">to_string</a> (T &amp;&amp;value)</td></tr>
<tr class="memdesc:ab2182d3de5899d24c8815f8df940bbc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer and float values to string.  <a href="#ab2182d3de5899d24c8815f8df940bbc0">More...</a><br /></td></tr>
<tr class="separator:ab2182d3de5899d24c8815f8df940bbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">stoi</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to integer.  <a href="#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">More...</a><br /></td></tr>
<tr class="separator:a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">stoul</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a42d7dd749c32cb5d140cbc27a991c17b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to unsigned long.  <a href="#a42d7dd749c32cb5d140cbc27a991c17b">More...</a><br /></td></tr>
<tr class="separator:a42d7dd749c32cb5d140cbc27a991c17b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740c4a41f6fce7cd8421b37f536314a8"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a740c4a41f6fce7cd8421b37f536314a8"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">stof</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a740c4a41f6fce7cd8421b37f536314a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to float.  <a href="#a740c4a41f6fce7cd8421b37f536314a8">More...</a><br /></td></tr>
<tr class="separator:a740c4a41f6fce7cd8421b37f536314a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a368408d8f055f372488126469ff01c"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a5a368408d8f055f372488126469ff01c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">round</a> (T value)</td></tr>
<tr class="memdesc:a5a368408d8f055f372488126469ff01c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero.  <a href="#a5a368408d8f055f372488126469ff01c">More...</a><br /></td></tr>
<tr class="separator:a5a368408d8f055f372488126469ff01c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">trunc</a> (T value)</td></tr>
<tr class="memdesc:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate floating-point value.  <a href="#ae8ee44ec85e2dd519488bfccf91db2dc">More...</a><br /></td></tr>
<tr class="separator:ae8ee44ec85e2dd519488bfccf91db2dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a921d858259fce667e4680f419b5db6d5"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a921d858259fce667e4680f419b5db6d5"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">copysign</a> (T x, T y)</td></tr>
<tr class="memdesc:a921d858259fce667e4680f419b5db6d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.  <a href="#a921d858259fce667e4680f419b5db6d5">More...</a><br /></td></tr>
<tr class="separator:a921d858259fce667e4680f419b5db6d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad473ea84f8bab197d5e32d7693f3f121"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ad473ea84f8bab197d5e32d7693f3f121"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ad473ea84f8bab197d5e32d7693f3f121">round_half_up</a> (T value)</td></tr>
<tr class="memdesc:ad473ea84f8bab197d5e32d7693f3f121"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to positive infinity.  <a href="#ad473ea84f8bab197d5e32d7693f3f121">More...</a><br /></td></tr>
<tr class="separator:ad473ea84f8bab197d5e32d7693f3f121"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac60e291929bd45df7800bb860f7bf4f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:aac60e291929bd45df7800bb860f7bf4f"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#aac60e291929bd45df7800bb860f7bf4f">round_half_even</a> (T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</td></tr>
<tr class="memdesc:aac60e291929bd45df7800bb860f7bf4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding to nearest even.  <a href="#aac60e291929bd45df7800bb860f7bf4f">More...</a><br /></td></tr>
<tr class="separator:aac60e291929bd45df7800bb860f7bf4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a921d858259fce667e4680f419b5db6d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::cpp11::copysign </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::copysign except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>value that contains the magnitued to be used in constructing the result. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>value that contains the sign to be used in constructin the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value with magnitude of <code>x</code> and sign of <code>y</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00263">263</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p>Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00289">round_half_even()</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">std::copysign</a>(x, y);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a921d858259fce667e4680f419b5db6d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">arm_compute::test::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00263">Utils.h:263</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a5a368408d8f055f372488126469ff01c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::cpp11::round </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding away from zero. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::round except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00232">232</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p>Referenced by <a class="el" href="optical__flow__pyramid__lk_8cl_source.xhtml#l00157">finalize()</a>, <a class="el" href="optical__flow__pyramid__lk_8cl_source.xhtml#l00207">lktracker_stage0()</a>, <a class="el" href="optical__flow__pyramid__lk_8cl_source.xhtml#l00358">lktracker_stage1()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00289">round_half_even()</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">std::round</a>(value);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a5a368408d8f055f372488126469ff01c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">arm_compute::test::cpp11::round</a></div><div class="ttdeci">T round(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00232">Utils.h:232</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aac60e291929bd45df7800bb860f7bf4f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::cpp11::round_half_even </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>std::numeric_limits&lt;T&gt;::epsilon()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to nearest even. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>precision.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00289">289</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p>References <a class="el" href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">arm_compute::test::fixed_point_arithmetic::detail::abs()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00263">copysign()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00232">round()</a>.</p>

<p>Referenced by <a class="el" href="_tensor_operations_8h_source.xhtml#l00579">arm_compute::test::validation::tensor_operations::pixel_wise_multiplication()</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    T positive_value = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(value);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    T ipart          = 0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::modf(positive_value, &amp;ipart);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// If &#39;value&#39; is exactly halfway between two integers</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">std::abs</a>(positive_value - (ipart + 0.5f)) &lt; epsilon)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="comment">// If &#39;ipart&#39; is even then return &#39;ipart&#39;</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span>(std::fmod(ipart, 2.f) &lt; epsilon)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(ipart, value);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="comment">// Else return the nearest even integer</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(std::ceil(ipart + 0.5f), value);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// Otherwise use the usual round to closest</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">cpp11::copysign</a>(<a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">cpp11::round</a>(positive_value), value);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a921d858259fce667e4680f419b5db6d5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a921d858259fce667e4680f419b5db6d5">arm_compute::test::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00263">Utils.h:263</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a5a368408d8f055f372488126469ff01c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a5a368408d8f055f372488126469ff01c">arm_compute::test::cpp11::round</a></div><div class="ttdeci">T round(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00232">Utils.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_ae115fc750a92fb6a5e094998b56fcc56"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#ae115fc750a92fb6a5e094998b56fcc56">arm_compute::test::fixed_point_arithmetic::detail::abs</a></div><div class="ttdeci">fixed_point&lt; T &gt; abs(fixed_point&lt; T &gt; x)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00905">FixedPoint.h:905</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad473ea84f8bab197d5e32d7693f3f121"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::cpp11::round_half_up </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding to positive infinity. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00276">276</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p>Referenced by <a class="el" href="_tensor_operations_8h_source.xhtml#l00579">arm_compute::test::validation::tensor_operations::pixel_wise_multiplication()</a>.</p>
<div class="fragment"><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> std::floor(value + 0.5f);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a740c4a41f6fce7cd8421b37f536314a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::test::cpp11::stof </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert string values to float. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::stof. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::stof.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Float representation of input string. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00217">217</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">return ::std::stof</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a740c4a41f6fce7cd8421b37f536314a8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a740c4a41f6fce7cd8421b37f536314a8">arm_compute::test::cpp11::stof</a></div><div class="ttdeci">int stof(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to float. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00217">Utils.h:217</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1d7f71d57a2d1c69a6e883f1a2b4d1a1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::test::cpp11::stoi </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert string values to integer. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::stoi. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::stoi.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer representation of input string. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00187">187</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">return ::std::stoi</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a1d7f71d57a2d1c69a6e883f1a2b4d1a1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a1d7f71d57a2d1c69a6e883f1a2b4d1a1">arm_compute::test::cpp11::stoi</a></div><div class="ttdeci">int stoi(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to integer. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00187">Utils.h:187</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a42d7dd749c32cb5d140cbc27a991c17b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::test::cpp11::stoul </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert string values to unsigned long. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::stoul. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::stoul.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Unsigned long representation of input string. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00202">202</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">return ::std::stoul</a>(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_a42d7dd749c32cb5d140cbc27a991c17b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#a42d7dd749c32cb5d140cbc27a991c17b">arm_compute::test::cpp11::stoul</a></div><div class="ttdeci">int stoul(Ts &amp;&amp;...args)</div><div class="ttdoc">Convert string values to unsigned long. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00202">Utils.h:202</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ab2182d3de5899d24c8815f8df940bbc0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::test::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert integer and float values to string. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::to_string. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be converted to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representation of <code>value</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00172">172</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">return ::std::to_string</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ab2182d3de5899d24c8815f8df940bbc0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ab2182d3de5899d24c8815f8df940bbc0">arm_compute::test::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00172">Utils.h:172</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae8ee44ec85e2dd519488bfccf91db2dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::test::cpp11::trunc </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate floating-point value. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::truncate except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be truncated.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of truncated <code>value</code>. </dd></dl>

<p>Definition at line <a class="el" href="tests_2_utils_8h_source.xhtml#l00247">247</a> of file <a class="el" href="tests_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p>Referenced by <a class="el" href="_tensor_operations_8h_source.xhtml#l00579">arm_compute::test::validation::tensor_operations::pixel_wise_multiplication()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">std::trunc</a>(value);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1cpp11_xhtml_ae8ee44ec85e2dd519488bfccf91db2dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1cpp11.xhtml#ae8ee44ec85e2dd519488bfccf91db2dc">arm_compute::test::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00247">Utils.h:247</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1cpp11.xhtml">cpp11</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
