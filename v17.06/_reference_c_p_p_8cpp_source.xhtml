<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/ReferenceCPP.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_reference_c_p_p_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ReferenceCPP.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_reference_c_p_p_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_reference_c_p_p_8h.xhtml">ReferenceCPP.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_factory_8h.xhtml">TensorFactory.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_operations_8h.xhtml">TensorOperations.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_visitors_8h.xhtml">TensorVisitors.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_type_printer_8h.xhtml">TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boost__wrapper_8h.xhtml">boost_wrapper.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml">arm_compute::test::validation::tensor_visitors</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">// Absolute difference</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">   52</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">ReferenceCPP::absolute_difference</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">absolute_difference_visitor</a>(), s1, s2, d);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">// Integral image</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">   60</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">ReferenceCPP::integral_image</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint32_t&gt;</a>      d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">tensor_operations::integral_image</a>(s, d);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">// Accumulate</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">   68</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">ReferenceCPP::accumulate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int16_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">tensor_operations::accumulate</a>(s, d);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">// Accumulate squared</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">   77</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">ReferenceCPP::accumulate_squared</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint32_t shift)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;int16_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">tensor_operations::accumulate_squared</a>(s, d, shift);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">// Accumulate weighted</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">   86</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">ReferenceCPP::accumulate_weighted</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> alpha)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">tensor_operations::accumulate_weighted</a>(s, d, alpha);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">// Arithmetic addition</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">   95</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">ReferenceCPP::arithmetic_addition</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arithmetic_addition_visitor</a>(convert_policy), s1, s2, d);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">// Arithmetic subtraction</span></div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">  104</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">ReferenceCPP::arithmetic_subtraction</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arithmetic_subtraction_visitor</a>(convert_policy), s1, s2, d);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">// Bitwise and</span></div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">  113</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">ReferenceCPP::bitwise_and</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s1(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s2(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">tensor_operations::bitwise_and</a>(s1, s2, d);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">// Bitwise or</span></div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">  123</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">ReferenceCPP::bitwise_or</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s1(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s2(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">tensor_operations::bitwise_or</a>(s1, s2, d);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">// Bitwise xor</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">  133</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">ReferenceCPP::bitwise_xor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s1(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s2(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src2.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">tensor_operations::bitwise_xor</a>(s1, s2, d);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">// Bitwise not</span></div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">  143</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">ReferenceCPP::bitwise_not</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">tensor_operations::bitwise_not</a>(s, d);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">// 3-by-3 box filter</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">  152</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">ReferenceCPP::box3x3</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">tensor_operations::box3x3</a>(s, d);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">// Depth conversion</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">  161</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">ReferenceCPP::depth_convert</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml">tensor_visitors::depth_convert_visitor</a>(policy, shift), s, d);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">// GEMM</span></div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">  169</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">ReferenceCPP::gemm</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src3,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> alpha, <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s3 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src3);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml">tensor_visitors::gemm_visitor</a>(s1, s2, s3, alpha, beta), d);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">// Pixel-wise multiplication</span></div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">  181</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">ReferenceCPP::pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">pixel_wise_multiplication_visitor</a>(scale, convert_policy, rounding_policy), s1, s2, d);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">// Fixed-point Pixel-wise multiplication</span></div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">  190</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">ReferenceCPP::fixed_point_pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src2, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s1 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src1);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s2 = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src2);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d  = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml">tensor_visitors::fixed_point_pixel_wise_multiplication_visitor</a>(s1, s2, scale, convert_policy, rounding_policy), d);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">// Threshold</span></div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">  199</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">ReferenceCPP::threshold</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>, uint8_t false_value, uint8_t true_value, <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> s(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(src.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a>       d(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">shape</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>(), dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">fixed_point_position</a>(), <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(dst.<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">data</a>()));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">threshold_operation</a>(s, d, threshold, false_value, true_value, type, upper);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">// Activation layer</span></div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">  208</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">ReferenceCPP::activation_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;input, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;output, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(input);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(output);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml">tensor_visitors::activation_layer_visitor</a>(s, act_info), d);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">// Batch Normalization Layer</span></div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">  216</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">ReferenceCPP::batch_normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;mean, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;var, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;beta, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;gamma, <span class="keywordtype">float</span> epsilon,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                             <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> m = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(mean);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> v = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(var);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(beta);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> g = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(gamma);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml">tensor_visitors::batch_normalization_layer_visitor</a>(s, m, v, b, g, epsilon, fixed_point_position), d);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">// Convolution Layer</span></div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">  229</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">ReferenceCPP::convolution_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> w = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(weights);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(bias);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml">tensor_visitors::convolution_layer_visitor</a>(s, w, b, conv_info), d);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">// Fully connected layer</span></div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">  239</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">ReferenceCPP::fully_connected_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;bias, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> w = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(weights);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> b = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(bias);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml">tensor_visitors::fully_connected_layer_visitor</a>(s, w, b), d);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">// Normalization Layer</span></div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">  249</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">ReferenceCPP::normalization_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml">tensor_visitors::normalization_layer_visitor</a>(s, norm_info), d);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">// Pooling Layer</span></div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">  257</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">ReferenceCPP::pooling_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, <span class="keywordtype">int</span> fixed_point_position)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml">tensor_visitors::pooling_layer_visitor</a>(s, pool_info, fixed_point_position), d);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">// Softmax Layer</span></div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">  265</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">ReferenceCPP::softmax_layer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml">tensor_visitors::softmax_layer_visitor</a>(s), d);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">// Fixed point operation</span></div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">  273</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">ReferenceCPP::fixed_point_operation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;src, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;dst, <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> s = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(src);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>       d = <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">TensorFactory::get_tensor</a>(dst);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    boost::apply_visitor(<a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml">tensor_visitors::fixed_point_operation_visitor</a>(s, op), d);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a99422cae0054f3a9d4b6eb87402d8f11"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a99422cae0054f3a9d4b6eb87402d8f11">arm_compute::test::validation::ReferenceCPP::gemm</a></div><div class="ttdeci">static void gemm(const RawTensor &amp;src1, const RawTensor &amp;src2, const RawTensor &amp;src3, RawTensor &amp;dst, float alpha, float beta)</div><div class="ttdoc">Compute GEMM function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00169">ReferenceCPP.cpp:169</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::convolution_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00232">TensorVisitors.h:232</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00047">RawTensor.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a53a4d082f0a3ae1523d728a4f1a5f22b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a53a4d082f0a3ae1523d728a4f1a5f22b">arm_compute::test::validation::tensor_operations::accumulate_squared</a></div><div class="ttdeci">void accumulate_squared(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00296">TensorOperations.h:296</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae158c03947db37d706260574866586e8"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae158c03947db37d706260574866586e8">arm_compute::test::validation::ReferenceCPP::pooling_layer</a></div><div class="ttdeci">static void pooling_layer(const RawTensor &amp;src, RawTensor &amp;dst, PoolingLayerInfo pool_info, int fixed_point_position=0)</div><div class="ttdoc">Pooling layer of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00257">ReferenceCPP.cpp:257</a></div></div>
<div class="ttc" id="arm__compute_2runtime_2_tensor_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a934ba47d23b89b5868c6fad054e5a59d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a934ba47d23b89b5868c6fad054e5a59d">arm_compute::test::validation::tensor_operations::box3x3</a></div><div class="ttdeci">void box3x3(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00397">TensorOperations.h:397</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aeef005a6d652352fd78acf84fd8fdb0e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeef005a6d652352fd78acf84fd8fdb0e">arm_compute::test::validation::tensor_operations::bitwise_xor</a></div><div class="ttdeci">void bitwise_xor(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00377">TensorOperations.h:377</a></div></div>
<div class="ttc" id="_tensor_factory_8h_xhtml"><div class="ttname"><a href="_tensor_factory_8h.xhtml">TensorFactory.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_abf10dbf9017acc5b941ca80879ed3650"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#abf10dbf9017acc5b941ca80879ed3650">arm_compute::test::validation::ReferenceCPP::bitwise_and</a></div><div class="ttdeci">static void bitwise_and(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise and between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00113">ReferenceCPP.cpp:113</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::softmax_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00320">TensorVisitors.h:320</a></div></div>
<div class="ttc" id="_reference_c_p_p_8h_xhtml"><div class="ttname"><a href="_reference_c_p_p_8h.xhtml">ReferenceCPP.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae1d31eb9d1ad6273e35c0b012c9b2cd1"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae1d31eb9d1ad6273e35c0b012c9b2cd1">arm_compute::test::validation::ReferenceCPP::depth_convert</a></div><div class="ttdeci">static void depth_convert(const RawTensor &amp;src, RawTensor &amp;dst, ConvertPolicy policy, uint32_t shift)</div><div class="ttdoc">Depth conversion from src to dst. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00161">ReferenceCPP.cpp:161</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">Unknown image format. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fully_connected_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00256">TensorVisitors.h:256</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a16bb8940c9d6aff998db9bd0ba011ffe"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a16bb8940c9d6aff998db9bd0ba011ffe">arm_compute::test::RawTensor::fixed_point_position</a></div><div class="ttdeci">int fixed_point_position() const </div><div class="ttdoc">The number of bits for the fractional part of the fixed point numbers. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00096">RawTensor.cpp:96</a></div></div>
<div class="ttc" id="_tensor_visitors_8h_xhtml"><div class="ttname"><a href="_tensor_visitors_8h.xhtml">TensorVisitors.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a15536b2ec56dc51d7dc9ac09bd6a5d76"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a15536b2ec56dc51d7dc9ac09bd6a5d76">arm_compute::test::validation::ReferenceCPP::absolute_difference</a></div><div class="ttdeci">static void absolute_difference(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the absolute difference between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00052">ReferenceCPP.cpp:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00506">Types.h:506</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ab09b1a280817a388ed7bed899088ba0b"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ab09b1a280817a388ed7bed899088ba0b">arm_compute::test::validation::ReferenceCPP::arithmetic_subtraction</a></div><div class="ttdeci">static void arithmetic_subtraction(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, ConvertPolicy convert_policy)</div><div class="ttdoc">Arithmetic subtraction of src2 from src1. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00104">ReferenceCPP.cpp:104</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00124">Error.h:124</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::normalization_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00279">TensorVisitors.h:279</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">arm_compute::test::validation::Tensor</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a600c009e5d449079fed05eb741e2e943"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a600c009e5d449079fed05eb741e2e943">arm_compute::test::validation::ReferenceCPP::integral_image</a></div><div class="ttdeci">static void integral_image(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the integral image of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00060">ReferenceCPP.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dc"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">arm_compute::FixedPointOp</a></div><div class="ttdeci">FixedPointOp</div><div class="ttdoc">Fixed point operation. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00029">Types.h:29</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a69eb15dea2a0579d8c33e2b9e07a2fb1"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a69eb15dea2a0579d8c33e2b9e07a2fb1">arm_compute::test::validation::ReferenceCPP::fully_connected_layer</a></div><div class="ttdeci">static void fully_connected_layer(const RawTensor &amp;src, const RawTensor &amp;weights, const RawTensor &amp;bias, RawTensor &amp;dst)</div><div class="ttdoc">Fully connected layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00239">ReferenceCPP.cpp:239</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">arm_compute::ThresholdType</a></div><div class="ttdeci">ThresholdType</div><div class="ttdoc">Threshold mode. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00226">Types.h:226</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a13761831550669f43f4edee978181c46"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a13761831550669f43f4edee978181c46">arm_compute::test::RawTensor::shape</a></div><div class="ttdeci">TensorShape shape() const </div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00086">RawTensor.cpp:86</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_factory_xhtml_a274412527b3a8887c3ccd50de85de522"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor_factory.xhtml#a274412527b3a8887c3ccd50de85de522">arm_compute::test::validation::TensorFactory::get_tensor</a></div><div class="ttdeci">static TensorVariant get_tensor(R &amp;&amp;raw)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00058">TensorFactory.h:58</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a6d1292bec01869fc5efd1e39d3496dc3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a6d1292bec01869fc5efd1e39d3496dc3">arm_compute::test::validation::ReferenceCPP::bitwise_xor</a></div><div class="ttdeci">static void bitwise_xor(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise xor between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00133">ReferenceCPP.cpp:133</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::activation_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00186">TensorVisitors.h:186</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="_tensor_operations_8h_xhtml"><div class="ttname"><a href="_tensor_operations_8h.xhtml">TensorOperations.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_subtraction_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00072">TensorVisitors.h:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a6e865331e6ad22ab8c6a47c836068eae"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a6e865331e6ad22ab8c6a47c836068eae">arm_compute::test::validation::tensor_operations::bitwise_and</a></div><div class="ttdeci">void bitwise_and(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00357">TensorOperations.h:357</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a28b261146dafd6effae75dfbfe411b29"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a28b261146dafd6effae75dfbfe411b29">arm_compute::test::validation::ReferenceCPP::convolution_layer</a></div><div class="ttdeci">static void convolution_layer(const RawTensor &amp;src, const RawTensor &amp;weights, const RawTensor &amp;bias, RawTensor &amp;dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Convolution layer function. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00229">ReferenceCPP.cpp:229</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0aa8da1953b7cb44b1b75aec737adb48"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0aa8da1953b7cb44b1b75aec737adb48">arm_compute::test::validation::ReferenceCPP::accumulate</a></div><div class="ttdeci">static void accumulate(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to accumulate an input tensor into an output tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00068">ReferenceCPP.cpp:68</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a110ef9b03fb51be2f000391a300d1a2a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a110ef9b03fb51be2f000391a300d1a2a">arm_compute::test::validation::ReferenceCPP::accumulate_weighted</a></div><div class="ttdeci">static void accumulate_weighted(const RawTensor &amp;src, RawTensor &amp;dst, float alpha)</div><div class="ttdoc">Function to accumulate a weighted value from an input tensor to an output tensor. ...</div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00086">ReferenceCPP.cpp:86</a></div></div>
<div class="ttc" id="_type_printer_8h_xhtml"><div class="ttname"><a href="_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aa2a75d7fb5a1cca91d6eab7888fc3431"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">arm_compute::test::validation::tensor_operations::threshold</a></div><div class="ttdeci">void threshold(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00651">TensorOperations.h:651</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa72a69edbdb11aaa12f83881e038f1d5"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa72a69edbdb11aaa12f83881e038f1d5">arm_compute::test::validation::ReferenceCPP::fixed_point_operation</a></div><div class="ttdeci">static void fixed_point_operation(const RawTensor &amp;src, RawTensor &amp;dst, FixedPointOp op)</div><div class="ttdoc">Fixed point operations of src. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00273">ReferenceCPP.cpp:273</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a56c0f65e0e83ad40fe5ec3abfd16d7b9"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a56c0f65e0e83ad40fe5ec3abfd16d7b9">arm_compute::test::validation::ReferenceCPP::activation_layer</a></div><div class="ttdeci">static void activation_layer(const RawTensor &amp;input, RawTensor &amp;output, ActivationLayerInfo act_info)</div><div class="ttdoc">Activation layer of src base on information from act_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00208">ReferenceCPP.cpp:208</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors_xhtml_aea53d6aea9b7f639b49ace8a16f267f8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">arm_compute::test::validation::tensor_visitors::threshold_operation</a></div><div class="ttdeci">void threshold_operation(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00181">TensorVisitors.h:181</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0dbabc9ed277607491fa75e1b8096132"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dbabc9ed277607491fa75e1b8096132">arm_compute::test::validation::ReferenceCPP::threshold</a></div><div class="ttdeci">static void threshold(const RawTensor &amp;src, RawTensor &amp;dst, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdoc">Threshold ofsrc to dst. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00199">ReferenceCPP.cpp:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa07ff8d0956d3fb1a0ff2223d8ab7a93"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa07ff8d0956d3fb1a0ff2223d8ab7a93">arm_compute::test::validation::ReferenceCPP::fixed_point_pixel_wise_multiplication</a></div><div class="ttdeci">static void fixed_point_pixel_wise_multiplication(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Fixed-point Pixel-wise multiplication of src1 by src2. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00190">ReferenceCPP.cpp:190</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ad9c7e06a7125cdef72a0d0b8cd5c9440"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ad9c7e06a7125cdef72a0d0b8cd5c9440">arm_compute::test::validation::ReferenceCPP::bitwise_or</a></div><div class="ttdeci">static void bitwise_or(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise or between two tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00123">ReferenceCPP.cpp:123</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00233">Types.h:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a3242afdd5be299ca6260c2dcce581f75"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a3242afdd5be299ca6260c2dcce581f75">arm_compute::test::validation::ReferenceCPP::bitwise_not</a></div><div class="ttdeci">static void bitwise_not(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute the bitwise not of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00143">ReferenceCPP.cpp:143</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a2265d2e4d72f0095de962e5d9c5f9dc2"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a2265d2e4d72f0095de962e5d9c5f9dc2">arm_compute::test::validation::ReferenceCPP::pixel_wise_multiplication</a></div><div class="ttdeci">static void pixel_wise_multiplication(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdoc">Element-wise multiplication of src1, src2 and scale. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00181">ReferenceCPP.cpp:181</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_addition_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00054">TensorVisitors.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::pooling_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00299">TensorVisitors.h:299</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fixed_point_pixel_wise_multiplication_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00152">TensorVisitors.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a0dec321c30d2695ac8f9c20e8928543a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a0dec321c30d2695ac8f9c20e8928543a">arm_compute::test::validation::ReferenceCPP::accumulate_squared</a></div><div class="ttdeci">static void accumulate_squared(const RawTensor &amp;src, RawTensor &amp;dst, uint32_t shift)</div><div class="ttdoc">Function to accumulate a squared value from an input tensor to an output tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00077">ReferenceCPP.cpp:77</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml">arm_compute::test::validation::tensor_visitors::depth_convert_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00090">TensorVisitors.h:90</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_afabf1ef7194a0156c90b3393e2a90cfa"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#afabf1ef7194a0156c90b3393e2a90cfa">arm_compute::test::validation::tensor_operations::accumulate_weighted</a></div><div class="ttdeci">void accumulate_weighted(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00314">TensorOperations.h:314</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a524e781138b8143ce949f16aca47632d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a524e781138b8143ce949f16aca47632d">arm_compute::test::validation::tensor_operations::bitwise_or</a></div><div class="ttdeci">void bitwise_or(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00367">TensorOperations.h:367</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_af995ccfae7ea6d83f47d1212c3c7af28"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af995ccfae7ea6d83f47d1212c3c7af28">arm_compute::test::validation::tensor_operations::accumulate</a></div><div class="ttdeci">void accumulate(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00283">TensorOperations.h:283</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml">arm_compute::test::validation::tensor_visitors</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00041">TensorVisitors.h:41</a></div></div>
<div class="ttc" id="boost__wrapper_8h_xhtml"><div class="ttname"><a href="boost__wrapper_8h.xhtml">boost_wrapper.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">arm_compute::test::validation::tensor_visitors::absolute_difference_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00044">TensorVisitors.h:44</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml">arm_compute::test::validation::tensor_visitors::gemm_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00109">TensorVisitors.h:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ac9fec1f76f1b3b4cae3b7feb19e397c3"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ac9fec1f76f1b3b4cae3b7feb19e397c3">arm_compute::test::validation::ReferenceCPP::batch_normalization_layer</a></div><div class="ttdeci">static void batch_normalization_layer(const RawTensor &amp;src, RawTensor &amp;dst, const RawTensor &amp;mean, const RawTensor &amp;var, const RawTensor &amp;beta, const RawTensor &amp;gamma, float epsilon, int fixed_point_position=0)</div><div class="ttdoc">Batch Normalization of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00216">ReferenceCPP.cpp:216</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a068d9be2e13dddcb8c8ab9f91e934a75"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a068d9be2e13dddcb8c8ab9f91e934a75">arm_compute::test::validation::tensor_operations::integral_image</a></div><div class="ttdeci">void integral_image(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint32_t &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00225">TensorOperations.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a7b53deaf986aa58ffa0090cc241dec64"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a7b53deaf986aa58ffa0090cc241dec64">arm_compute::test::RawTensor::data</a></div><div class="ttdeci">const BufferType * data() const </div><div class="ttdoc">Constant pointer to the underlying buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00148">RawTensor.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_af7b729e6ded963c8bf9ead4012f17e02"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#af7b729e6ded963c8bf9ead4012f17e02">arm_compute::test::validation::ReferenceCPP::box3x3</a></div><div class="ttdeci">static void box3x3(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Function to compute 3-by-3 box filtered result tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00152">ReferenceCPP.cpp:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_aa3379b88d6d53ab3c1d89b3df4f0dd4a"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#aa3379b88d6d53ab3c1d89b3df4f0dd4a">arm_compute::test::validation::ReferenceCPP::softmax_layer</a></div><div class="ttdeci">static void softmax_layer(const RawTensor &amp;src, RawTensor &amp;dst)</div><div class="ttdoc">Softmax Layer of src. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00265">ReferenceCPP.cpp:265</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">arm_compute::test::validation::tensor_visitors::pixel_wise_multiplication_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00132">TensorVisitors.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a9629af50ada3b5dca5f23a639f6c8045"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a9629af50ada3b5dca5f23a639f6c8045">arm_compute::test::validation::tensor_operations::bitwise_not</a></div><div class="ttdeci">void bitwise_not(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00387">TensorOperations.h:387</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_ae87f25d124d6c66c839ac929702aee11"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#ae87f25d124d6c66c839ac929702aee11">arm_compute::test::validation::ReferenceCPP::arithmetic_addition</a></div><div class="ttdeci">static void arithmetic_addition(const RawTensor &amp;src1, const RawTensor &amp;src2, RawTensor &amp;dst, ConvertPolicy convert_policy)</div><div class="ttdoc">Arithmetic addition of src1 and src2. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00095">ReferenceCPP.cpp:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p_xhtml_a7552cc54ae47676e4ea4842233d79587"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_reference_c_p_p.xhtml#a7552cc54ae47676e4ea4842233d79587">arm_compute::test::validation::ReferenceCPP::normalization_layer</a></div><div class="ttdeci">static void normalization_layer(const RawTensor &amp;src, RawTensor &amp;dst, NormalizationLayerInfo norm_info)</div><div class="ttdoc">Normalization of src based on the information from norm_info. </div><div class="ttdef"><b>Definition:</b> <a href="_reference_c_p_p_8cpp_source.xhtml#l00249">ReferenceCPP.cpp:249</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00425">Types.h:425</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fixed_point_operation_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00339">TensorVisitors.h:339</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00204">Types.h:204</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::batch_normalization_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00206">TensorVisitors.h:206</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml_a45cc7b9a37aa9f0e7d479248a27e1f58"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">arm_compute::test::RawTensor::data_type</a></div><div class="ttdeci">DataType data_type() const </div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8cpp_source.xhtml#l00112">RawTensor.cpp:112</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_reference_c_p_p_8cpp.xhtml">ReferenceCPP.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
