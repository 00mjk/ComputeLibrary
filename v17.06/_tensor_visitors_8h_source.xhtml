<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/TensorVisitors.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">v17.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_visitors_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TensorVisitors.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tensor_visitors_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_TEST_TENSOR_VISITORS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_TEST_TENSOR_VISITORS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_tensor_8h.xhtml">Tensor.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_operations_8h.xhtml">TensorOperations.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boost__wrapper_8h.xhtml">boost_wrapper.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml">   41</a></span>&#160;<span class="keyword">namespace </span>tensor_visitors</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Absolute Difference visitor</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">   44</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">absolute_difference_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">   48</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">tensor_operations::absolute_difference</a>(in1, in2, out);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">// Arithmetic Addition visitor</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">   54</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arithmetic_addition_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#adcc8209ec4c8324f86e4e83feacb7515">   57</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#adcc8209ec4c8324f86e4e83feacb7515">arithmetic_addition_visitor</a>(<a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        : _policy(convert_policy)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">   63</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">tensor_operations::arithmetic_addition</a>(in1, in2, out, _policy);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">// Arithmetic Subtraction visitor</span></div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">   72</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arithmetic_subtraction_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a56db7a03357ceaa165c86fa20aae5b85">   75</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a56db7a03357ceaa165c86fa20aae5b85">arithmetic_subtraction_visitor</a>(<a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        : _policy(convert_policy)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">   81</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">tensor_operations::arithmetic_subtraction</a>(in1, in2, out, _policy);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">// Depth Convert visitor</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml">   90</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml">depth_convert_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#aeff0d4dbd1ee9e40b60316424276f389">   93</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#aeff0d4dbd1ee9e40b60316424276f389">depth_convert_visitor</a>(<a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, uint32_t shift)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        : _policy(policy), _shift(shift)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#a0702ed0d2d969f4b5e055e8022846ba1">   99</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#a0702ed0d2d969f4b5e055e8022846ba1">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">tensor_operations::depth_convert</a>(in, out, _policy, _shift);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    uint32_t      _shift;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">// GEMM visitor</span></div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml">  109</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml">gemm_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#ae766e828cddee08ec8260e1f46c836a6">  112</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#ae766e828cddee08ec8260e1f46c836a6">gemm_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in2, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in3, <span class="keywordtype">float</span> alpha, <span class="keywordtype">float</span> beta)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        : _in1(in1), _in2(in2), _in3(in3), _alpha(alpha), _beta(beta)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  118</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1 = boost::get&lt;Tensor&lt;T&gt;&gt;(_in1);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2 = boost::get&lt;Tensor&lt;T&gt;&gt;(_in2);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in3 = boost::get&lt;Tensor&lt;T&gt;&gt;(_in3);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">tensor_operations::gemm</a>(in1, in2, in3, out, _alpha, _beta);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in1, &amp;_in2, &amp;_in3;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">float</span>                _alpha;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">float</span>                _beta;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">// Pixel-wise Multiplication visitor</span></div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">  132</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">pixel_wise_multiplication_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#ad8ac8fca7fa67fb15e5b43c556fb7265">  135</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#ad8ac8fca7fa67fb15e5b43c556fb7265">pixel_wise_multiplication_visitor</a>(<span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        : _scale(scale), _convert_policy(convert_policy), _rounding_policy(rounding_policy)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">  141</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T1&gt;</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T2&gt;</a> &amp;in2, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T3&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">tensor_operations::pixel_wise_multiplication</a>(in1, in2, out, _scale, _convert_policy, _rounding_policy);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">float</span>          _scale;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>  _convert_policy;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> _rounding_policy;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;};</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">// Fixed Point Pixel-wise Multiplication visitor</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml">  152</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml">fixed_point_pixel_wise_multiplication_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ae347a7e4d8d15797909d5ffaae062f37">  155</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ae347a7e4d8d15797909d5ffaae062f37">fixed_point_pixel_wise_multiplication_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in1, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in2, <span class="keywordtype">float</span> scale, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        : _in1(in1), _in2(in2), _scale(scale), _convert_policy(convert_policy), _rounding_policy(rounding_policy)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    template &lt;typename T, typename = typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">  161</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in1 = boost::get&lt;Tensor&lt;T&gt;&gt;(_in1);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in2 = boost::get&lt;Tensor&lt;T&gt;&gt;(_in2);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">tensor_operations::fixed_point_pixel_wise_multiplication</a>(in1, in2, out, _scale, _convert_policy, _rounding_policy);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    template &lt; typename T, typename std::enable_if &lt; !std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span> &gt;::type = 0 &gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">  168</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in1;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in2;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">float</span>                _scale;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>        _convert_policy;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>       _rounding_policy;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;};</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">// Threshold operation</span></div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">  181</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">threshold_operation</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;in, <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;uint8_t&gt;</a> &amp;out, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">threshold</a>, uint8_t false_value, uint8_t true_value, <a class="code" href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">ThresholdType</a> type, uint8_t upper)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">tensor_operations::threshold</a>(in, out, threshold, false_value, true_value, type, upper);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">// Activation layer visitor</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml">  186</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml">activation_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#af3aa3af523567ddde49a2e972e009e41">  189</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#af3aa3af523567ddde49a2e972e009e41">activation_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        : _in(in), _act_info(act_info)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  195</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">tensor_operations::activation_layer</a>(in, out, _act_info);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>      &amp;_in;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> _act_info;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;};</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">// Batch Normalization Layer visitor</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml">  206</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml">batch_normalization_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#aa04d65cdc78a365ce1151b4302aafe56">  209</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#aa04d65cdc78a365ce1151b4302aafe56">batch_normalization_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;mean, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;var, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;beta, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;gamma, <span class="keywordtype">float</span> epsilon,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                               <span class="keywordtype">int</span> fixed_point_position = 0)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        : _in(in), _mean(mean), _var(var), _beta(beta), _gamma(gamma), _epsilon(epsilon), _fixed_point_position(fixed_point_position)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  216</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in    = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;mean  = boost::get&lt;Tensor&lt;T&gt;&gt;(_mean);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;var   = boost::get&lt;Tensor&lt;T&gt;&gt;(_var);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;beta  = boost::get&lt;Tensor&lt;T&gt;&gt;(_beta);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;gamma = boost::get&lt;Tensor&lt;T&gt;&gt;(_gamma);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">tensor_operations::batch_normalization_layer</a>(in, out, mean, var, beta, gamma, _epsilon, _fixed_point_position);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in, &amp;_mean, &amp;_var, &amp;_beta, &amp;_gamma;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">float</span>                _epsilon;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">int</span>                  _fixed_point_position;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">// Convolution Layer visitor</span></div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml">  232</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml">convolution_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a94c8b66e6324b09323ed7346be8a7cfc">  235</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a94c8b66e6324b09323ed7346be8a7cfc">convolution_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;bias, <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        : _in(in), _weights(weights), _bias(bias), _conv_info(conv_info)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  241</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in      = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;weights = boost::get&lt;Tensor&lt;T&gt;&gt;(_weights);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;bias    = boost::get&lt;Tensor&lt;T&gt;&gt;(_bias);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">tensor_operations::convolution_layer</a>(in, weights, bias, out, _conv_info);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_weights;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_bias;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>        _conv_info;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;};</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml">  256</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml">fully_connected_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a5f9bbb7aa8db60b6a259ef1145c3e048">  259</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a5f9bbb7aa8db60b6a259ef1145c3e048">fully_connected_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;weights, <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;bias)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        : _in(in), _weights(weights), _bias(bias)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  264</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in      = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;weights = boost::get&lt;Tensor&lt;T&gt;&gt;(_weights);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;bias    = boost::get&lt;Tensor&lt;T&gt;&gt;(_bias);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">tensor_operations::fully_connected_layer</a>(in, weights, bias, out);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_weights;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_bias;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;};</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">// Normalization Layer visitor</span></div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml">  279</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml">normalization_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a5ee0219b7e3def0b11c63be55752f0ff">  282</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a5ee0219b7e3def0b11c63be55752f0ff">normalization_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        : _in(in), _norm_info(norm_info)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  288</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">tensor_operations::normalization_layer</a>(in, out, _norm_info);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a>   &amp;_in;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> _norm_info;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;};</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">// Pooling layer</span></div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml">  299</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml">pooling_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a9cdc7d9839f2920ba99e0d3722c27177">  302</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a9cdc7d9839f2920ba99e0d3722c27177">pooling_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info, <span class="keywordtype">int</span> fixed_point_position = 0)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        : _in(in), _pool_info(pool_info), _fixed_point_position(fixed_point_position)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  308</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">tensor_operations::pooling_layer</a>(in, out, _pool_info, _fixed_point_position);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="classarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>     _pool_info;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">int</span>                  _fixed_point_position;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;};</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">// Softmax Layer visitor</span></div><div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml">  320</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml">softmax_layer_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a09d46c7c2f42f074c50bd00492059be9">  323</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a09d46c7c2f42f074c50bd00492059be9">softmax_layer_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        : _in(in)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">  329</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">tensor_operations::softmax_layer</a>(in, out);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;};</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">// Fixed Point operations visitor</span></div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml">  339</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml">fixed_point_operation_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#a05d2d5024a44a12f31eaedb4c045061c">  342</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#a05d2d5024a44a12f31eaedb4c045061c">fixed_point_operation_visitor</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;in, <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a> op)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        : _in(in), _op(op)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    template &lt;typename T, typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">  348</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in = boost::get&lt;Tensor&lt;T&gt;&gt;(_in);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">tensor_operations::fixed_point_operation</a>(in, out, _op);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    template &lt; typename T, typename std::enable_if &lt; !std::is_integral&lt;T&gt;::value, <span class="keywordtype">int</span> &gt;::type = 0 &gt;</div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">  354</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">operator()</a>(<a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;out)<span class="keyword"> const</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">TensorVariant</a> &amp;_in;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">FixedPointOp</a>         _op;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;};</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">// Print Tensor visitor</span></div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml">  364</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml">print_visitor</a> : <span class="keyword">public</span> boost::static_visitor&lt;&gt;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a7ee5fc80d2bf45b3a709d384b2393aac">  367</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a7ee5fc80d2bf45b3a709d384b2393aac">print_visitor</a>(std::ostream &amp;out)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        : _out(out)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a4e7c9d3ac80e1515c48fef53b0ce8f65">  373</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a4e7c9d3ac80e1515c48fef53b0ce8f65">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">Tensor&lt;T&gt;</a> &amp;in)<span class="keyword"> const</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">tensor_operations::print</a>(in, _out);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    std::ostream &amp;_out;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;};</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;} <span class="comment">// namespace tensor_visitors</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_TEST_TENSOR_VISITORS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a8db9e6c61d6d8399da28198a81a2c92b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8db9e6c61d6d8399da28198a81a2c92b">arm_compute::test::validation::tensor_operations::softmax_layer</a></div><div class="ttdeci">void softmax_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01240">TensorOperations.h:1240</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a05b19c75afe9c24200a62b9724734bbd"><div class="ttname"><a href="_error_8h.xhtml#a05b19c75afe9c24200a62b9724734bbd">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00031">Error.h:31</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::convolution_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00232">TensorVisitors.h:232</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a590f86899d2cdff14487c16ce361d2a9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a590f86899d2cdff14487c16ce361d2a9">arm_compute::test::validation::tensor_operations::fully_connected_layer</a></div><div class="ttdeci">void fully_connected_layer(const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00899">TensorOperations.h:899</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::gemm_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00118">TensorVisitors.h:118</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab777a17078ddd8365094354ca90057ca"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab777a17078ddd8365094354ca90057ca">arm_compute::test::validation::TensorVariant</a></div><div class="ttdeci">boost::variant&lt; Tensor&lt; uint8_t &gt;, Tensor&lt; int8_t &gt;, Tensor&lt; uint16_t &gt;, Tensor&lt; int16_t &gt;, Tensor&lt; uint32_t &gt;, Tensor&lt; int32_t &gt;, Tensor&lt; float &gt;&gt; TensorVariant</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_factory_8h_source.xhtml#l00045">TensorFactory.h:45</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor_xhtml_aeff0d4dbd1ee9e40b60316424276f389"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#aeff0d4dbd1ee9e40b60316424276f389">arm_compute::test::validation::tensor_visitors::depth_convert_visitor::depth_convert_visitor</a></div><div class="ttdeci">depth_convert_visitor(ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00093">TensorVisitors.h:93</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor_xhtml_a450c355b0e5757e57233cea981c09a81"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">arm_compute::test::validation::tensor_visitors::absolute_difference_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00048">TensorVisitors.h:48</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::softmax_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00320">TensorVisitors.h:320</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fully_connected_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00256">TensorVisitors.h:256</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor_xhtml_a5f9bbb7aa8db60b6a259ef1145c3e048"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a5f9bbb7aa8db60b6a259ef1145c3e048">arm_compute::test::validation::tensor_visitors::fully_connected_layer_visitor::fully_connected_layer_visitor</a></div><div class="ttdeci">fully_connected_layer_visitor(const TensorVariant &amp;in, const TensorVariant &amp;weights, const TensorVariant &amp;bias)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00259">TensorVisitors.h:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1_normalization_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a></div><div class="ttdoc">Normalization Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00506">Types.h:506</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aeffa8efd0492f825570507bc628e2968"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aeffa8efd0492f825570507bc628e2968">arm_compute::test::validation::tensor_operations::fixed_point_operation</a></div><div class="ttdeci">void fixed_point_operation(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, FixedPointOp op)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01319">TensorOperations.h:1319</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::normalization_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00279">TensorVisitors.h:279</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_tensor.xhtml">arm_compute::test::validation::Tensor</a></div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dc"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dc">arm_compute::FixedPointOp</a></div><div class="ttdeci">FixedPointOp</div><div class="ttdoc">Fixed point operation. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00029">Types.h:29</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a3e6b23e675649b83240691abbc42a649"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e6b23e675649b83240691abbc42a649">arm_compute::ThresholdType</a></div><div class="ttdeci">ThresholdType</div><div class="ttdoc">Threshold mode. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00226">Types.h:226</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor_xhtml_a450c355b0e5757e57233cea981c09a81"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">arm_compute::test::validation::tensor_visitors::arithmetic_subtraction_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00081">TensorVisitors.h:81</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00458">Types.h:458</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::activation_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00186">TensorVisitors.h:186</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::softmax_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00329">TensorVisitors.h:329</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a4a10dcdb4134d755119468d8464d7604"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4a10dcdb4134d755119468d8464d7604">arm_compute::test::validation::tensor_operations::print</a></div><div class="ttdeci">void print(const Tensor&lt; T &gt; &amp;in, std::ostream &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01356">TensorOperations.h:1356</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ae19ece6824a2bc089edcc619124d95d3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ae19ece6824a2bc089edcc619124d95d3">arm_compute::test::validation::tensor_operations::convolution_layer</a></div><div class="ttdeci">void convolution_layer(const Tensor&lt; T &gt; &amp;in, const Tensor&lt; T &gt; &amp;weights, const Tensor&lt; T &gt; &amp;bias, Tensor&lt; T &gt; &amp;out, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00847">TensorOperations.h:847</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="_tensor_operations_8h_xhtml"><div class="ttname"><a href="_tensor_operations_8h.xhtml">TensorOperations.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ab508d3cd11ab140d782c716debfcb25f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab508d3cd11ab140d782c716debfcb25f">arm_compute::test::validation::tensor_operations::absolute_difference</a></div><div class="ttdeci">void absolute_difference(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00270">TensorOperations.h:270</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a31ecd095dd99ad3b8527bb4736c79f4d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a31ecd095dd99ad3b8527bb4736c79f4d">arm_compute::test::validation::tensor_operations::normalization_layer</a></div><div class="ttdeci">void normalization_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, NormalizationLayerInfo norm_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00921">TensorOperations.h:921</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ab8680238fafb5a48dc1ebe47217f54e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ab8680238fafb5a48dc1ebe47217f54e0">arm_compute::test::validation::tensor_operations::batch_normalization_layer</a></div><div class="ttdeci">void batch_normalization_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, const Tensor&lt; T &gt; &amp;mean, const Tensor&lt; T &gt; &amp;var, const Tensor&lt; T &gt; &amp;beta, const Tensor&lt; T &gt; &amp;gamma, float epsilon, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00783">TensorOperations.h:783</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_subtraction_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00072">TensorVisitors.h:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_ac41b6c35f336e0a97f9b8823ff7fcd05"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#ac41b6c35f336e0a97f9b8823ff7fcd05">arm_compute::test::validation::tensor_operations::activation_layer</a></div><div class="ttdeci">void activation_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, ActivationLayerInfo act_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00686">TensorOperations.h:686</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml">arm_compute::test::validation::tensor_visitors::print_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00364">TensorVisitors.h:364</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::pooling_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00308">TensorVisitors.h:308</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor_xhtml_af3aa3af523567ddde49a2e972e009e41"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#af3aa3af523567ddde49a2e972e009e41">arm_compute::test::validation::tensor_visitors::activation_layer_visitor::activation_layer_visitor</a></div><div class="ttdeci">activation_layer_visitor(const TensorVariant &amp;in, ActivationLayerInfo act_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00189">TensorVisitors.h:189</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor_xhtml_ad8ac8fca7fa67fb15e5b43c556fb7265"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#ad8ac8fca7fa67fb15e5b43c556fb7265">arm_compute::test::validation::tensor_visitors::pixel_wise_multiplication_visitor::pixel_wise_multiplication_visitor</a></div><div class="ttdeci">pixel_wise_multiplication_visitor(float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00135">TensorVisitors.h:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aa2a75d7fb5a1cca91d6eab7888fc3431"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aa2a75d7fb5a1cca91d6eab7888fc3431">arm_compute::test::validation::tensor_operations::threshold</a></div><div class="ttdeci">void threshold(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00651">TensorOperations.h:651</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor_xhtml_ad4daf49b5d7c078507f1458a52f5c664"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">arm_compute::test::validation::tensor_visitors::fixed_point_operation_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00348">TensorVisitors.h:348</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor_xhtml_a5ee0219b7e3def0b11c63be55752f0ff"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a5ee0219b7e3def0b11c63be55752f0ff">arm_compute::test::validation::tensor_visitors::normalization_layer_visitor::normalization_layer_visitor</a></div><div class="ttdeci">normalization_layer_visitor(const TensorVariant &amp;in, NormalizationLayerInfo norm_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00282">TensorVisitors.h:282</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_aca1385f622ea543d14bdd997a2bcebcf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#aca1385f622ea543d14bdd997a2bcebcf">arm_compute::test::validation::tensor_operations::gemm</a></div><div class="ttdeci">void gemm(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, const Tensor&lt; T &gt; &amp;in3, Tensor&lt; T &gt; &amp;out, float alpha, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00506">TensorOperations.h:506</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor_xhtml_ae766e828cddee08ec8260e1f46c836a6"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml#ae766e828cddee08ec8260e1f46c836a6">arm_compute::test::validation::tensor_visitors::gemm_visitor::gemm_visitor</a></div><div class="ttdeci">gemm_visitor(const TensorVariant &amp;in1, const TensorVariant &amp;in2, const TensorVariant &amp;in3, float alpha, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00112">TensorVisitors.h:112</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor_xhtml_a09d46c7c2f42f074c50bd00492059be9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1softmax__layer__visitor.xhtml#a09d46c7c2f42f074c50bd00492059be9">arm_compute::test::validation::tensor_visitors::softmax_layer_visitor::softmax_layer_visitor</a></div><div class="ttdeci">softmax_layer_visitor(const TensorVariant &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00323">TensorVisitors.h:323</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor_xhtml_ae347a7e4d8d15797909d5ffaae062f37"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ae347a7e4d8d15797909d5ffaae062f37">arm_compute::test::validation::tensor_visitors::fixed_point_pixel_wise_multiplication_visitor::fixed_point_pixel_wise_multiplication_visitor</a></div><div class="ttdeci">fixed_point_pixel_wise_multiplication_visitor(const TensorVariant &amp;in1, const TensorVariant &amp;in2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00155">TensorVisitors.h:155</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors_xhtml_aea53d6aea9b7f639b49ace8a16f267f8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__visitors.xhtml#aea53d6aea9b7f639b49ace8a16f267f8">arm_compute::test::validation::tensor_visitors::threshold_operation</a></div><div class="ttdeci">void threshold_operation(const Tensor&lt; uint8_t &gt; &amp;in, Tensor&lt; uint8_t &gt; &amp;out, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00181">TensorVisitors.h:181</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor_xhtml_ad4daf49b5d7c078507f1458a52f5c664"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml#ad4daf49b5d7c078507f1458a52f5c664">arm_compute::test::validation::tensor_visitors::fixed_point_pixel_wise_multiplication_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00161">TensorVisitors.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_af8ba83a7ab2a51404613c27f4bf1b502"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#af8ba83a7ab2a51404613c27f4bf1b502">arm_compute::test::validation::tensor_operations::fixed_point_pixel_wise_multiplication</a></div><div class="ttdeci">void fixed_point_pixel_wise_multiplication(const Tensor&lt; T &gt; &amp;in1, const Tensor&lt; T &gt; &amp;in2, Tensor&lt; T &gt; &amp;out, int scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00617">TensorOperations.h:617</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00233">Types.h:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00386">Types.h:386</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml">arm_compute::test::validation::tensor_visitors::arithmetic_addition_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00054">TensorVisitors.h:54</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::pooling_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00299">TensorVisitors.h:299</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor_xhtml_a4e7c9d3ac80e1515c48fef53b0ce8f65"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a4e7c9d3ac80e1515c48fef53b0ce8f65">arm_compute::test::validation::tensor_visitors::print_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T &gt; &amp;in) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00373">TensorVisitors.h:373</a></div></div>
<div class="ttc" id="tests_2validation_2_tensor_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a0500e22e76099c68d3e41b46e0cdd54c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a0500e22e76099c68d3e41b46e0cdd54c">arm_compute::test::validation::tensor_operations::arithmetic_addition</a></div><div class="ttdeci">void arithmetic_addition(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00331">TensorOperations.h:331</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a4485bbf8646087afcb6d724e613da68f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a4485bbf8646087afcb6d724e613da68f">arm_compute::test::validation::tensor_operations::depth_convert</a></div><div class="ttdeci">void depth_convert(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out, ConvertPolicy policy, uint32_t shift)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00414">TensorOperations.h:414</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__pixel__wise__multiplication__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fixed_point_pixel_wise_multiplication_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00152">TensorVisitors.h:152</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml">arm_compute::test::validation::tensor_visitors::depth_convert_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00090">TensorVisitors.h:90</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor_xhtml_a450c355b0e5757e57233cea981c09a81"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">arm_compute::test::validation::tensor_visitors::pixel_wise_multiplication_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00141">TensorVisitors.h:141</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor_xhtml_aa04d65cdc78a365ce1151b4302aafe56"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#aa04d65cdc78a365ce1151b4302aafe56">arm_compute::test::validation::tensor_visitors::batch_normalization_layer_visitor::batch_normalization_layer_visitor</a></div><div class="ttdeci">batch_normalization_layer_visitor(const TensorVariant &amp;in, const TensorVariant &amp;mean, const TensorVariant &amp;var, const TensorVariant &amp;beta, const TensorVariant &amp;gamma, float epsilon, int fixed_point_position=0)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00209">TensorVisitors.h:209</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor_xhtml_adcc8209ec4c8324f86e4e83feacb7515"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#adcc8209ec4c8324f86e4e83feacb7515">arm_compute::test::validation::tensor_visitors::arithmetic_addition_visitor::arithmetic_addition_visitor</a></div><div class="ttdeci">arithmetic_addition_visitor(ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00057">TensorVisitors.h:57</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1activation__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::activation_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00195">TensorVisitors.h:195</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_acee95d0eabaf4dc59612123c1fbbffb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#acee95d0eabaf4dc59612123c1fbbffb1">arm_compute::test::validation::tensor_operations::pixel_wise_multiplication</a></div><div class="ttdeci">void pixel_wise_multiplication(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00579">TensorOperations.h:579</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::normalization_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00288">TensorVisitors.h:288</a></div></div>
<div class="ttc" id="boost__wrapper_8h_xhtml"><div class="ttname"><a href="boost__wrapper_8h.xhtml">boost_wrapper.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1absolute__difference__visitor.xhtml">arm_compute::test::validation::tensor_visitors::absolute_difference_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00044">TensorVisitors.h:44</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1gemm__visitor.xhtml">arm_compute::test::validation::tensor_visitors::gemm_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00109">TensorVisitors.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor_xhtml_a56db7a03357ceaa165c86fa20aae5b85"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__subtraction__visitor.xhtml#a56db7a03357ceaa165c86fa20aae5b85">arm_compute::test::validation::tensor_visitors::arithmetic_subtraction_visitor::arithmetic_subtraction_visitor</a></div><div class="ttdeci">arithmetic_subtraction_visitor(ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00075">TensorVisitors.h:75</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::batch_normalization_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00216">TensorVisitors.h:216</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor_xhtml_a450c355b0e5757e57233cea981c09a81"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1arithmetic__addition__visitor.xhtml#a450c355b0e5757e57233cea981c09a81">arm_compute::test::validation::tensor_visitors::arithmetic_addition_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00063">TensorVisitors.h:63</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a8e93dde24e9dfb46feaec452e192977c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a8e93dde24e9dfb46feaec452e192977c">arm_compute::test::validation::tensor_operations::pooling_layer</a></div><div class="ttdeci">void pooling_layer(const Tensor&lt; T &gt; &amp;in, Tensor&lt; T &gt; &amp;out, PoolingLayerInfo pool_info, int fixed_point_position)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l01123">TensorOperations.h:1123</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor_xhtml_a9cdc7d9839f2920ba99e0d3722c27177"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pooling__layer__visitor.xhtml#a9cdc7d9839f2920ba99e0d3722c27177">arm_compute::test::validation::tensor_visitors::pooling_layer_visitor::pooling_layer_visitor</a></div><div class="ttdeci">pooling_layer_visitor(const TensorVariant &amp;in, PoolingLayerInfo pool_info, int fixed_point_position=0)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00302">TensorVisitors.h:302</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor_xhtml_a05d2d5024a44a12f31eaedb4c045061c"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml#a05d2d5024a44a12f31eaedb4c045061c">arm_compute::test::validation::tensor_visitors::fixed_point_operation_visitor::fixed_point_operation_visitor</a></div><div class="ttdeci">fixed_point_operation_visitor(const TensorVariant &amp;in, FixedPointOp op)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00342">TensorVisitors.h:342</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1pixel__wise__multiplication__visitor.xhtml">arm_compute::test::validation::tensor_visitors::pixel_wise_multiplication_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00132">TensorVisitors.h:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations_xhtml_a135ce9546985c784175156c32fa014af"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1tensor__operations.xhtml#a135ce9546985c784175156c32fa014af">arm_compute::test::validation::tensor_operations::arithmetic_subtraction</a></div><div class="ttdeci">void arithmetic_subtraction(const Tensor&lt; T1 &gt; &amp;in1, const Tensor&lt; T2 &gt; &amp;in2, Tensor&lt; T3 &gt; &amp;out, ConvertPolicy convert_policy)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_operations_8h_source.xhtml#l00344">TensorOperations.h:344</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor_xhtml_a0702ed0d2d969f4b5e055e8022846ba1"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1depth__convert__visitor.xhtml#a0702ed0d2d969f4b5e055e8022846ba1">arm_compute::test::validation::tensor_visitors::depth_convert_visitor::operator()</a></div><div class="ttdeci">void operator()(const Tensor&lt; T1 &gt; &amp;in, Tensor&lt; T2 &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00099">TensorVisitors.h:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00425">Types.h:425</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fixed__point__operation__visitor.xhtml">arm_compute::test::validation::tensor_visitors::fixed_point_operation_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00339">TensorVisitors.h:339</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::convolution_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00241">TensorVisitors.h:241</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00204">Types.h:204</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor_xhtml_a7ee5fc80d2bf45b3a709d384b2393aac"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1print__visitor.xhtml#a7ee5fc80d2bf45b3a709d384b2393aac">arm_compute::test::validation::tensor_visitors::print_visitor::print_visitor</a></div><div class="ttdeci">print_visitor(std::ostream &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00367">TensorVisitors.h:367</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor_xhtml_a94c8b66e6324b09323ed7346be8a7cfc"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1convolution__layer__visitor.xhtml#a94c8b66e6324b09323ed7346be8a7cfc">arm_compute::test::validation::tensor_visitors::convolution_layer_visitor::convolution_layer_visitor</a></div><div class="ttdeci">convolution_layer_visitor(const TensorVariant &amp;in, const TensorVariant &amp;weights, const TensorVariant &amp;bias, PadStrideInfo conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00235">TensorVisitors.h:235</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor_xhtml_a00910777bbe7aa1f19676619bcc61ea9"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1fully__connected__layer__visitor.xhtml#a00910777bbe7aa1f19676619bcc61ea9">arm_compute::test::validation::tensor_visitors::fully_connected_layer_visitor::operator()</a></div><div class="ttdeci">void operator()(Tensor&lt; T &gt; &amp;out) const </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00264">TensorVisitors.h:264</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1validation_1_1tensor__visitors_1_1batch__normalization__layer__visitor.xhtml">arm_compute::test::validation::tensor_visitors::batch_normalization_layer_visitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_visitors_8h_source.xhtml#l00206">TensorVisitors.h:206</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="_tensor_visitors_8h.xhtml">TensorVisitors.h</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 15:44:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
