<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLGEMM Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_g_e_m_m.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLGEMM Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to execute GEMM on OpenCL.  
 <a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLGEMM:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_g_e_m_m__coll__graph.svg" width="91" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa970e5dc11c839c0729f64114cac2324"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa970e5dc11c839c0729f64114cac2324">CLGEMM</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr, <a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a> *weights_manager=nullptr)</td></tr>
<tr class="memdesc:aa970e5dc11c839c0729f64114cac2324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aa970e5dc11c839c0729f64114cac2324">More...</a><br /></td></tr>
<tr class="separator:aa970e5dc11c839c0729f64114cac2324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3d6349f009b4f8b0cede0b6bd0a65e71">CLGEMM</a> (const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;)=delete</td></tr>
<tr class="memdesc:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a3d6349f009b4f8b0cede0b6bd0a65e71">More...</a><br /></td></tr>
<tr class="separator:a3d6349f009b4f8b0cede0b6bd0a65e71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19d221206d1e442f4b5dd29ecb582a70"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a19d221206d1e442f4b5dd29ecb582a70">CLGEMM</a> (<a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a19d221206d1e442f4b5dd29ecb582a70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="#a19d221206d1e442f4b5dd29ecb582a70">More...</a><br /></td></tr>
<tr class="separator:a19d221206d1e442f4b5dd29ecb582a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebefa7576807b8b316ea46c242949039"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aebefa7576807b8b316ea46c242949039">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;)=delete</td></tr>
<tr class="memdesc:aebefa7576807b8b316ea46c242949039"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#aebefa7576807b8b316ea46c242949039">More...</a><br /></td></tr>
<tr class="separator:aebefa7576807b8b316ea46c242949039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83a121357a2121ef7f0670b3f81e4645"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a83a121357a2121ef7f0670b3f81e4645">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a83a121357a2121ef7f0670b3f81e4645"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="#a83a121357a2121ef7f0670b3f81e4645">More...</a><br /></td></tr>
<tr class="separator:a83a121357a2121ef7f0670b3f81e4645"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a988e0461be772834f2a2f0a90e672f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a0a988e0461be772834f2a2f0a90e672f">~CLGEMM</a> ()</td></tr>
<tr class="memdesc:a0a988e0461be772834f2a2f0a90e672f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a0a988e0461be772834f2a2f0a90e672f">More...</a><br /></td></tr>
<tr class="separator:a0a988e0461be772834f2a2f0a90e672f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34e7b882208ff6720bad2e4f2c7565c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">configure</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *a, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *b, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *c, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, float alpha, float beta, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info=<a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>())</td></tr>
<tr class="memdesc:a34e7b882208ff6720bad2e4f2c7565c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's inputs and output.  <a href="#a34e7b882208ff6720bad2e4f2c7565c5">More...</a><br /></td></tr>
<tr class="separator:a34e7b882208ff6720bad2e4f2c7565c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3ff5978316fd9378bf312e148797ee5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa3ff5978316fd9378bf312e148797ee5">configure</a> (const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *a, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *b, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *c, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, float alpha, float beta, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info=<a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>())</td></tr>
<tr class="memdesc:aa3ff5978316fd9378bf312e148797ee5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's inputs and output.  <a href="#aa3ff5978316fd9378bf312e148797ee5">More...</a><br /></td></tr>
<tr class="separator:aa3ff5978316fd9378bf312e148797ee5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a> () override</td></tr>
<tr class="memdesc:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">More...</a><br /></td></tr>
<tr class="separator:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3493ba7d1f2057740ff5931fa00a44ac"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *a, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *b, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, float alpha, float beta, const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;gemm_info=<a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>())</td></tr>
<tr class="memdesc:a3493ba7d1f2057740ff5931fa00a44ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>.  <a href="#a3493ba7d1f2057740ff5931fa00a44ac">More...</a><br /></td></tr>
<tr class="separator:a3493ba7d1f2057740ff5931fa00a44ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to execute GEMM on OpenCL. </p>
<p>This function calls the following OpenCL kernels:</p>
<ol type="1">
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel.xhtml">CLGEMMReshapeLHSMatrixKernel</a> (only if the RESHAPED_V1 is selected by the heuristic model)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel.xhtml">CLGEMMReshapeRHSMatrixKernel</a> (only if either the RESHAPED_V1 or RESHAPED_ONLY_RHS is selected by the select_gemm_kernel method())</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml">CLGEMMMatrixMultiplyKernel</a> (only if either the NATIVE or RESHAPED_V1 is selected by the select_gemm_kernel method())</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_kernel.xhtml">CLGEMMMatrixMultiplyReshapedKernel</a> (only if RESHAPED_V1 is selected by the select_gemm_kernel method())</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel.xhtml">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel</a> (only if RESHAPED_ONLY_RHS is selected by the select_gemm_kernel method()) </li>
</ol>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8h_source.xhtml#l00108">108</a> of file <a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa970e5dc11c839c0729f64114cac2324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa970e5dc11c839c0729f64114cac2324">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a> *&#160;</td>
          <td class="paramname"><em>weights_manager</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">memory_manager</td><td>(Optional) <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> manager. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_manager</td><td>(Optional) Weights manager. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    : _memory_group(std::move(memory_manager)),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      _weights_manager(weights_manager),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      _mm_kernel(std::make_unique&lt;CLGEMMMatrixMultiplyKernel&gt;()),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      _reshape_lhs_kernel(std::make_unique&lt;CLGEMMReshapeLHSMatrixKernel&gt;()),</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      _reshape_rhs_kernel(std::make_unique&lt;CLGEMMReshapeRHSMatrixKernel&gt;()),</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      _reshape_rhs_kernel_managed(std::make_unique&lt;weights_transformations::CLGEMMReshapeRHSMatrixKernelManaged&gt;()),</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      _mm_reshaped_kernel(std::make_unique&lt;CLGEMMMatrixMultiplyReshapedKernel&gt;()),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      _mm_reshaped_only_rhs_kernel(std::make_unique&lt;CLGEMMMatrixMultiplyReshapedOnlyRHSKernel&gt;()),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      _mm_reshaped_only_rhs_fallback_kernel(std::make_unique&lt;CLGEMMMatrixMultiplyReshapedOnlyRHSKernel&gt;()),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      _tmp_a(),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      _tmp_b(),</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      _original_b(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      _lhs(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      _dst(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      _reshape_b_only_on_first_run(<span class="keyword">false</span>),</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      _is_prepared(<span class="keyword">false</span>),</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      _gemm_kernel_type(<a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">CLGEMMKernelType::NATIVE_V1</a>)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::CLGEMMKernelType::NATIVE_V1</a></div><div class="ttdoc">Native GEMM kernel with fixed block size. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3d6349f009b4f8b0cede0b6bd0a65e71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d6349f009b4f8b0cede0b6bd0a65e71">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a19d221206d1e442f4b5dd29ecb582a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19d221206d1e442f4b5dd29ecb582a70">&#9670;&nbsp;</a></span>CLGEMM() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<a id="a0a988e0461be772834f2a2f0a90e672f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a988e0461be772834f2a2f0a90e672f">&#9670;&nbsp;</a></span>~CLGEMM()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a34e7b882208ff6720bad2e4f2c7565c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34e7b882208ff6720bad2e4f2c7565c5">&#9670;&nbsp;</a></span>configure() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em> = <code><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's inputs and output. </p>
<dl class="section note"><dt>Note</dt><dd>GEMM: General Matrix Multiply - [alpha * A * B + beta * C].</dd>
<dd>
All tensors must have the same data type.</dd>
<dd>
Whilst the first input tensor can be a vector, the second input tensor must be at least a matrix</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>First input tensor (Matrix or <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> A). Data types supported: F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Second input tensor (Matrix B). Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Third input tensor (Matrix C). It can be a nullptr if just the multiplication between <code>a</code> and <code>b</code> is needed. Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output tensor. Data type supported: same as <code>a</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of matrix C </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>(Optional) Specifies if the matrix A and/or matrix B have been reshaped and if the reshape of matrix B should happen only for the first run. <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class. ">GEMMInfo</a> also contains information about the reshaping in case matrix A and matrix B have been already transformed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00666">666</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01119">CLKernelLibrary::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00091">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00114">CLWinogradConvolutionLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00235">CLGEMMDeconvolutionLayer::configure()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00082">CLLSTMLayer::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, output, alpha, beta, gemm_info);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01119">CLKernelLibrary.cpp:1119</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a34e7b882208ff6720bad2e4f2c7565c5"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a34e7b882208ff6720bad2e4f2c7565c5">arm_compute::CLGEMM::configure</a></div><div class="ttdeci">void configure(const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Initialise the kernel&amp;#39;s inputs and output. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00666">CLGEMM.cpp:666</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3ff5978316fd9378bf312e148797ee5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3ff5978316fd9378bf312e148797ee5">&#9670;&nbsp;</a></span>configure() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td>
          <td class="paramname"><em>compile_context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em> = <code><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's inputs and output. </p>
<dl class="section note"><dt>Note</dt><dd>GEMM: General Matrix Multiply - [alpha * A * B + beta * C].</dd>
<dd>
All tensors must have the same data type.</dd>
<dd>
Whilst the first input tensor can be a vector, the second input tensor must be at least a matrix</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">compile_context</td><td>The compile context to be used. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>First input tensor (Matrix or <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> A). Data types supported: F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Second input tensor (Matrix B). Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Third input tensor (Matrix C). It can be a nullptr if just the multiplication between <code>a</code> and <code>b</code> is needed. Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Output tensor. Data type supported: same as <code>a</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of matrix C </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>(Optional) Specifies if the matrix A and/or matrix B have been reshaped and if the reshape of matrix B should happen only for the first run. <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class. ">GEMMInfo</a> also contains information about the reshaping in case matrix A and matrix B have been already transformed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00671">671</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler::get()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00109">arm_compute::helpers::float_ops::is_zero()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::NATIVE_V1</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02090">GEMMInfo::reinterpret_input_as_3d()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02074">GEMMInfo::reshape_b_only_on_first_run()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::RESHAPED</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::RESHAPED_ONLY_RHS</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::RESHAPED_V1</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02098">GEMMInfo::retain_internal_weights()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00047">CLScheduler::target()</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00727">CLGEMM::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, output);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="comment">// Perform validation step</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">validate</a>(a-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>-&gt;info(), c != <span class="keyword">nullptr</span> ? c-&gt;info() : <span class="keyword">nullptr</span>, output-&gt;info(), alpha, beta, gemm_info));</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="comment">// Check if we need to reshape the matrix B only on the first run</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    _reshape_b_only_on_first_run = gemm_info.reshape_b_only_on_first_run();</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    _is_prepared                 = gemm_info.retain_internal_weights();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    _original_b                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    _lhs                         = a;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    _dst                         = output;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordtype">bool</span>               reinterpret_input_as_3d = gemm_info.reinterpret_input_as_3d();</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m                       = reinterpret_input_as_3d ? (a-&gt;info()-&gt;dimension(1) * a-&gt;info()-&gt;dimension(2)) : a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k                       = a-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size              = reinterpret_input_as_3d ? a-&gt;info()-&gt;dimension(3) : a-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// Select GEMMType</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    _gemm_kernel_type = auto_select_gemm_kernel(<a class="code" href="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query.xhtml">auto_heuristics::CommonQuery</a>{ <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>(), a-&gt;info()-&gt;data_type(), m, n, k, batch_size }, _reshape_b_only_on_first_run);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> fuse_add_c = (!(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#a3bd19352aed7410633d1f9b95d74a809">helpers::float_ops::is_zero</a>(beta)) &amp;&amp; c != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keyword">const</span> ICLTensor *c_to_use = fuse_add_c ? c : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">switch</span>(_gemm_kernel_type)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    {</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">CLGEMMKernelType::NATIVE_V1</a>:</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            configure_native_v1(compile_context, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">CLGEMMKernelType::RESHAPED_V1</a>:</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            configure_reshaped_v1(compile_context, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">CLGEMMKernelType::RESHAPED</a>:</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        {</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            configure_reshaped_v2(compile_context, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">CLGEMMKernelType::RESHAPED_ONLY_RHS</a>:</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        {</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            configure_reshaped_only_rhs(compile_context, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        }</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        {</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;GEMMType not supported&quot;</span>);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        }</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler.cpp:104</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00047">CLScheduler.cpp:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query_xhtml"><div class="ttname"><a href="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query.xhtml">arm_compute::cl_gemm::auto_heuristics::CommonQuery</a></div><div class="ttdoc">A collection of adaptor functions that enable the auto selection between mlgo-based heuristics and de...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_auto_heuristics_8h_source.xhtml#l00040">CLGEMMAutoHeuristics.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::CLGEMMKernelType::RESHAPED_ONLY_RHS</a></div><div class="ttdoc">Reshaped GEMM kernel where only the rhs matrix is reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::CLGEMMKernelType::RESHAPED</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::CLGEMMKernelType::NATIVE_V1</a></div><div class="ttdoc">Native GEMM kernel with fixed block size. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1float__ops_xhtml_a3bd19352aed7410633d1f9b95d74a809"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#a3bd19352aed7410633d1f9b95d74a809">arm_compute::helpers::float_ops::is_zero</a></div><div class="ttdeci">bool is_zero(float a, float epsilon=0.00001f)</div><div class="ttdoc">Checks if the input floating point number is 0.0f checking if the difference is within a range define...</div><div class="ttdef"><b>Definition:</b> <a href="float__ops_8h_source.xhtml#l00109">float_ops.h:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_a3493ba7d1f2057740ff5931fa00a44ac"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">arm_compute::CLGEMM::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMM. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00727">CLGEMM.cpp:727</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::CLGEMMKernelType::RESHAPED_V1</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aebefa7576807b8b316ea46c242949039"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebefa7576807b8b316ea46c242949039">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a83a121357a2121ef7f0670b3f81e4645"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83a121357a2121ef7f0670b3f81e4645">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="aa9b93ef660fc3c5b4b19d3fc7b891b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00870">870</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor::allocator()</a>, <a class="el" href="_i_weights_manager_8cpp_source.xhtml#l00112">IWeightsManager::are_weights_managed()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00183">CLScheduler::enqueue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler::get()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00168">ITensor::mark_as_unused()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::NATIVE_V1</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler::queue()</a>, and <a class="el" href="_i_weights_manager_8cpp_source.xhtml#l00051">IWeightsManager::run()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00142">CLRNNLayer::prepare()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00234">CLWinogradConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00389">CLGEMMDeconvolutionLayer::prepare()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00441">CLFullyConnectedLayer::prepare()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00660">CLGEMMConvolutionLayer::prepare()</a>, and <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00778">CLGEMM::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;{</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    {</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <span class="keywordflow">if</span>(_gemm_kernel_type != <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">CLGEMMKernelType::NATIVE_V1</a> &amp;&amp; _reshape_b_only_on_first_run)</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        {</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(_original_b))</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            {</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(_original_b, _reshape_rhs_kernel_managed.get());</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            }</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            {</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                <span class="comment">// Run transpose kernel and mark original weights tensor as unused</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                _tmp_b.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                _original_b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        }</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>().finish();</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    }</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler.cpp:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a9bc00234de9adf8c99a21eb1d7d494c2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">arm_compute::ITensor::mark_as_unused</a></div><div class="ttdeci">void mark_as_unused() const</div><div class="ttdoc">Marks a tensor as unused. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8cpp_source.xhtml#l00168">ITensor.cpp:168</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::CLGEMMKernelType::NATIVE_V1</a></div><div class="ttdoc">Native GEMM kernel with fixed block size. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a386f2182d06bad88bffebd18ace91f46"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">arm_compute::IWeightsManager::are_weights_managed</a></div><div class="ttdeci">bool are_weights_managed(const ITensor *weights)</div><div class="ttdoc">Check if the weights are managed. </div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00112">IWeightsManager.cpp:112</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00183">CLScheduler.cpp:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a73808ac61e51d72c7d6349d6d51dcf37"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">arm_compute::IWeightsManager::run</a></div><div class="ttdeci">ITensor * run(const ITensor *weights, ITransformWeights *weights_transform)</div><div class="ttdoc">Run the reshape function. </div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00051">IWeightsManager.cpp:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For Neon kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue. ">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77" title="Prepare the function for executing. ">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00778">778</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

<p class="reference">References <a class="el" href="_i_weights_manager_8cpp_source.xhtml#l00112">IWeightsManager::are_weights_managed()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00377">BorderSize::bottom</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00183">CLScheduler::enqueue()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler::get()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::NATIVE_V1</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo::padding()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00870">CLGEMM::prepare()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::RESHAPED</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::RESHAPED_ONLY_RHS</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::RESHAPED_V1</a>, <a class="el" href="_i_weights_manager_8cpp_source.xhtml#l00051">IWeightsManager::run()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00375">BorderSize::top</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00127">CLRNNLayer::run()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00218">CLWinogradConvolutionLayer::run()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00356">CLGEMMDeconvolutionLayer::run()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00418">CLFullyConnectedLayer::run()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00635">CLLSTMLayer::run()</a>, and <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00623">CLGEMMConvolutionLayer::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;{</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    MemoryGroupResourceScope scope_mg(_memory_group);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="comment">// Run matrix multiply kernel</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">switch</span>(_gemm_kernel_type)</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    {</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">CLGEMMKernelType::NATIVE_V1</a>:</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_mm_kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">CLGEMMKernelType::RESHAPED_V1</a>:</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="comment">// Run interleave kernel</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_lhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                <span class="comment">// Run transpose kernel</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(_original_b))</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                {</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                    _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(_original_b, _reshape_rhs_kernel_managed.get());</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                }</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                {</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            }</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_mm_kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">CLGEMMKernelType::RESHAPED</a>:</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        {</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="comment">// Run interleave kernel</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_lhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            {</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                <span class="comment">// Run transpose kernel</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(_original_b))</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                {</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                    _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(_original_b, _reshape_rhs_kernel_managed.get());</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                }</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                }</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            }</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_mm_reshaped_kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        }</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">CLGEMMKernelType::RESHAPED_ONLY_RHS</a>:</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        {</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            <span class="keywordflow">if</span>(!_reshape_b_only_on_first_run)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            {</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                <span class="comment">// Run transpose kernel</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                <span class="keywordflow">if</span>(_weights_manager &amp;&amp; _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">are_weights_managed</a>(_original_b))</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                {</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                    _weights_manager-&gt;<a class="code" href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">run</a>(_original_b, _reshape_rhs_kernel_managed.get());</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                }</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_reshape_rhs_kernel, <span class="keyword">false</span>);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                }</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            }</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            <span class="comment">// In case of RESHAPED_ONLY_RHS, we need to check the padding requirement</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            <span class="comment">// Check if the lhs or dst tensors have padding</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cross_plane_pad_lhs = _lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> + _lhs-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cross_plane_pad_dst = _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> + _dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>().<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            <span class="keywordtype">bool</span> has_pad_y = (cross_plane_pad_lhs != 0) || (cross_plane_pad_dst != 0);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="keywordflow">if</span>(has_pad_y)</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            {</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_mm_reshaped_only_rhs_fallback_kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            }</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            {</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(*_mm_reshaped_only_rhs_kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        }</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        {</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;GEMMType not supported&quot;</span>);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        }</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00375">Types.h:375</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLGEMM::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_8cpp_source.xhtml#l00870">CLGEMM.cpp:870</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler.cpp:104</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00377">Types.h:377</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::CLGEMMKernelType::RESHAPED_ONLY_RHS</a></div><div class="ttdoc">Reshaped GEMM kernel where only the rhs matrix is reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::CLGEMMKernelType::RESHAPED</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::CLGEMMKernelType::NATIVE_V1</a></div><div class="ttdoc">Native GEMM kernel with fixed block size. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a386f2182d06bad88bffebd18ace91f46"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a386f2182d06bad88bffebd18ace91f46">arm_compute::IWeightsManager::are_weights_managed</a></div><div class="ttdeci">bool are_weights_managed(const ITensor *weights)</div><div class="ttdoc">Check if the weights are managed. </div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00112">IWeightsManager.cpp:112</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a07b929c34ad1dc823d8315876aa403ce"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">arm_compute::ITensorInfo::padding</a></div><div class="ttdeci">virtual PaddingSize padding() const =0</div><div class="ttdoc">Padding of tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00183">CLScheduler.cpp:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_weights_manager_xhtml_a73808ac61e51d72c7d6349d6d51dcf37"><div class="ttname"><a href="classarm__compute_1_1_i_weights_manager.xhtml#a73808ac61e51d72c7d6349d6d51dcf37">arm_compute::IWeightsManager::run</a></div><div class="ttdeci">ITensor * run(const ITensor *weights, ITransformWeights *weights_transform)</div><div class="ttdoc">Run the reshape function. </div><div class="ttdef"><b>Definition:</b> <a href="_i_weights_manager_8cpp_source.xhtml#l00051">IWeightsManager.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::CLGEMMKernelType::RESHAPED_V1</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3493ba7d1f2057740ff5931fa00a44ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3493ba7d1f2057740ff5931fa00a44ac">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gemm_info</em> = <code><a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml">GEMMInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>First input tensor info (Matrix or <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> A). Data types supported: F16/F32 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Second input tensor info (Matrix B). Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>Third input tensor info (Matrix C). It can be a nullptr if just the multiplication between <code>a</code> and <code>b</code> is needed. Data type supported: same as <code>a</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Output tensor info. Data type supported: same as <code>a</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Weight of the matrix product </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Weight of matrix C </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_info</td><td>(Optional) Specifies if the matrix A and/or matrix B have been reshaped and if the reshape of matrix B should happen only for the first run</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00727">727</a> of file <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00194">ARM_COMPUTE_RETURN_ERROR_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler::get()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00109">arm_compute::helpers::float_ops::is_zero()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::NATIVE_V1</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02090">GEMMInfo::reinterpret_input_as_3d()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02074">GEMMInfo::reshape_b_only_on_first_run()</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::RESHAPED</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::RESHAPED_ONLY_RHS</a>, <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::RESHAPED_V1</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00047">CLScheduler::target()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00671">CLGEMM::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00056">CLRNNLayer::validate()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00167">CLWinogradConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00135">CLGEMMDeconvolutionLayer::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00404">CLLSTMLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;{</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="comment">// Get the GPU target</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordtype">bool</span>               reinterpret_input_as_3d = gemm_info.reinterpret_input_as_3d();</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m                       = reinterpret_input_as_3d ? (a-&gt;dimension(1) * a-&gt;dimension(2)) : a-&gt;dimension(1);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>-&gt;dimension(0);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k                       = a-&gt;dimension(0);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size              = reinterpret_input_as_3d ? a-&gt;dimension(3) : a-&gt;dimension(2);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="comment">// Select GEMMType</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> gemm_kernel_type = auto_select_gemm_kernel(<a class="code" href="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query.xhtml">auto_heuristics::CommonQuery</a></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>(), a-&gt;data_type(), m, n, k, batch_size,</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    },</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    gemm_info.reshape_b_only_on_first_run());</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> fuse_add_c = (!(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#a3bd19352aed7410633d1f9b95d74a809">helpers::float_ops::is_zero</a>(beta)) &amp;&amp; c != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keyword">const</span> ITensorInfo *c_to_use = fuse_add_c ? c : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">switch</span>(gemm_kernel_type)</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    {</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">CLGEMMKernelType::NATIVE_V1</a>:</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        {</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_native_v1(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info));</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">CLGEMMKernelType::RESHAPED_V1</a>:</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_reshaped_v1(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info));</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        }</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">CLGEMMKernelType::RESHAPED</a>:</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        {</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_reshaped(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info));</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">CLGEMMKernelType::RESHAPED_ONLY_RHS</a>:</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_reshaped_only_rhs(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c_to_use, output, alpha, beta, gemm_info));</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        {</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <a class="code" href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a>(<span class="stringliteral">&quot;GEMMType not supported&quot;</span>);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        }</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00104">CLScheduler.cpp:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00047">CLScheduler.cpp:47</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query_xhtml"><div class="ttname"><a href="structarm__compute_1_1cl__gemm_1_1auto__heuristics_1_1_common_query.xhtml">arm_compute::cl_gemm::auto_heuristics::CommonQuery</a></div><div class="ttdoc">A collection of adaptor functions that enable the auto selection between mlgo-based heuristics and de...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_auto_heuristics_8h_source.xhtml#l00040">CLGEMMAutoHeuristics.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aae5baae53d329b252d56acec1bc0b5868">arm_compute::CLGEMMKernelType::RESHAPED_ONLY_RHS</a></div><div class="ttdoc">Reshaped GEMM kernel where only the rhs matrix is reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612a"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">arm_compute::CLGEMMKernelType</a></div><div class="ttdeci">CLGEMMKernelType</div><div class="ttdoc">OpenCL GEMM kernel types. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00031">CLTypes.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa6cee782c1c68991f5738005f33558df6">arm_compute::CLGEMMKernelType::RESHAPED</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aad1737a5cc6fc78ea577be59e25b67da6">arm_compute::CLGEMMKernelType::NATIVE_V1</a></div><div class="ttdoc">Native GEMM kernel with fixed block size. </div></div>
<div class="ttc" id="_error_8h_xhtml_a9561091f3566e78ad3aa39259bc4126a"><div class="ttname"><a href="_error_8h.xhtml#a9561091f3566e78ad3aa39259bc4126a">ARM_COMPUTE_RETURN_ERROR_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_MSG(...)</div><div class="ttdoc">An error is returned with the given description. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00194">Error.h:194</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1helpers_1_1float__ops_xhtml_a3bd19352aed7410633d1f9b95d74a809"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#a3bd19352aed7410633d1f9b95d74a809">arm_compute::helpers::float_ops::is_zero</a></div><div class="ttdeci">bool is_zero(float a, float epsilon=0.00001f)</div><div class="ttdoc">Checks if the input floating point number is 0.0f checking if the difference is within a range define...</div><div class="ttdef"><b>Definition:</b> <a href="float__ops_8h_source.xhtml#l00109">float_ops.h:109</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825"><div class="ttname"><a href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612aa98032d1fe61a8745281dbd3269082825">arm_compute::CLGEMMKernelType::RESHAPED_V1</a></div><div class="ttdoc">Reshaped GEMM kernel where both lhs and rhs matrices are reshaped. </div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_g_e_m_m_8h_source.xhtml">CLGEMM.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml">CLGEMM.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:17:45 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
