<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLKernelLibrary Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_kernel_library.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLKernelLibrary Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> class.  
 <a href="classarm__compute_1_1_c_l_kernel_library.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_kernel_library_8h_source.xhtml">CLKernelLibrary.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9f976367edcd9ab787375373e050b94b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a> (std::string kernel_path, cl::Context <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>, cl::Device device)</td></tr>
<tr class="memdesc:a9f976367edcd9ab787375373e050b94b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the kernel library.  <a href="#a9f976367edcd9ab787375373e050b94b">More...</a><br /></td></tr>
<tr class="separator:a9f976367edcd9ab787375373e050b94b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66a558a56f5d0dcd6305c405ebc38cc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a66a558a56f5d0dcd6305c405ebc38cc2">set_kernel_path</a> (const std::string &amp;kernel_path)</td></tr>
<tr class="memdesc:a66a558a56f5d0dcd6305c405ebc38cc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the path that the kernels reside in.  <a href="#a66a558a56f5d0dcd6305c405ebc38cc2">More...</a><br /></td></tr>
<tr class="separator:a66a558a56f5d0dcd6305c405ebc38cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7395c158d8e31b9af211b9bc1f65a08"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#ad7395c158d8e31b9af211b9bc1f65a08">get_kernel_path</a> ()</td></tr>
<tr class="memdesc:ad7395c158d8e31b9af211b9bc1f65a08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the path that the kernels reside in.  <a href="#ad7395c158d8e31b9af211b9bc1f65a08">More...</a><br /></td></tr>
<tr class="separator:ad7395c158d8e31b9af211b9bc1f65a08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a545c28170311fa375be5684ba6f271bc"><td class="memItemLeft" align="right" valign="top">std::pair&lt; std::string, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a545c28170311fa375be5684ba6f271bc">get_program</a> (const std::string &amp;program_name) const</td></tr>
<tr class="memdesc:a545c28170311fa375be5684ba6f271bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the source of the selected program.  <a href="#a545c28170311fa375be5684ba6f271bc">More...</a><br /></td></tr>
<tr class="separator:a545c28170311fa375be5684ba6f271bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86409f541991c3ac377c2a6b7d1f832d"><td class="memItemLeft" align="right" valign="top">cl::Context &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a> ()</td></tr>
<tr class="memdesc:a86409f541991c3ac377c2a6b7d1f832d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated CL context.  <a href="#a86409f541991c3ac377c2a6b7d1f832d">More...</a><br /></td></tr>
<tr class="separator:a86409f541991c3ac377c2a6b7d1f832d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3919fb1e9372257947abe01e74e3d4"><td class="memItemLeft" align="right" valign="top">const cl::Device &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">get_device</a> ()</td></tr>
<tr class="memdesc:a1b3919fb1e9372257947abe01e74e3d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the CL device for which the programs are created.  <a href="#a1b3919fb1e9372257947abe01e74e3d4">More...</a><br /></td></tr>
<tr class="separator:a1b3919fb1e9372257947abe01e74e3d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6865d04c8d3348860f3cb8100fdb97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">set_device</a> (cl::Device device)</td></tr>
<tr class="memdesc:a5a6865d04c8d3348860f3cb8100fdb97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the CL device for which the programs are created.  <a href="#a5a6865d04c8d3348860f3cb8100fdb97">More...</a><br /></td></tr>
<tr class="separator:a5a6865d04c8d3348860f3cb8100fdb97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef78b2e57b5203f8a184465e2da020ef"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aef78b2e57b5203f8a184465e2da020ef">get_device_version</a> ()</td></tr>
<tr class="memdesc:aef78b2e57b5203f8a184465e2da020ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the device version.  <a href="#aef78b2e57b5203f8a184465e2da020ef">More...</a><br /></td></tr>
<tr class="separator:aef78b2e57b5203f8a184465e2da020ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70696e3d56dcbcdc1f493dec744bc581"><td class="memItemLeft" align="right" valign="top">cl_uint&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a70696e3d56dcbcdc1f493dec744bc581">get_num_compute_units</a> ()</td></tr>
<tr class="memdesc:a70696e3d56dcbcdc1f493dec744bc581"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the maximum number of compute units in the device.  <a href="#a70696e3d56dcbcdc1f493dec744bc581">More...</a><br /></td></tr>
<tr class="separator:a70696e3d56dcbcdc1f493dec744bc581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb732d747d949ff2113f19d6d70d8ecb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_kernel.xhtml">Kernel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#afb732d747d949ff2113f19d6d70d8ecb">create_kernel</a> (const std::string &amp;<a class="el" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, const std::set&lt; std::string &gt; &amp;build_options_set={}) const</td></tr>
<tr class="memdesc:afb732d747d949ff2113f19d6d70d8ecb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a kernel from the kernel library.  <a href="#afb732d747d949ff2113f19d6d70d8ecb">More...</a><br /></td></tr>
<tr class="separator:afb732d747d949ff2113f19d6d70d8ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeda307cc2131afa8a4764e38373f94e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aaeda307cc2131afa8a4764e38373f94e">max_local_workgroup_size</a> (const cl::Kernel &amp;kernel) const</td></tr>
<tr class="memdesc:aaeda307cc2131afa8a4764e38373f94e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the maximum number of local work items in a workgroup can be supported for the kernel.  <a href="#aaeda307cc2131afa8a4764e38373f94e">More...</a><br /></td></tr>
<tr class="separator:aaeda307cc2131afa8a4764e38373f94e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb48a1da7dc6b6f3c1a424d21e1ac1f8"><td class="memItemLeft" align="right" valign="top">cl::NDRange&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">default_ndrange</a> () const</td></tr>
<tr class="memdesc:adb48a1da7dc6b6f3c1a424d21e1ac1f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the default NDRange for the device.  <a href="#adb48a1da7dc6b6f3c1a424d21e1ac1f8">More...</a><br /></td></tr>
<tr class="separator:adb48a1da7dc6b6f3c1a424d21e1ac1f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ad613086cc79a2e32d5b87bcefc7488"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">clear_programs_cache</a> ()</td></tr>
<tr class="memdesc:a0ad613086cc79a2e32d5b87bcefc7488"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the library's cache of binary programs.  <a href="#a0ad613086cc79a2e32d5b87bcefc7488">More...</a><br /></td></tr>
<tr class="separator:a0ad613086cc79a2e32d5b87bcefc7488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54bb195c770b747d87af7506c2032aa4"><td class="memItemLeft" align="right" valign="top">const std::map&lt; std::string, cl::Program &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54bb195c770b747d87af7506c2032aa4">get_built_programs</a> () const</td></tr>
<tr class="memdesc:a54bb195c770b747d87af7506c2032aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the cache of built OpenCL programs.  <a href="#a54bb195c770b747d87af7506c2032aa4">More...</a><br /></td></tr>
<tr class="separator:a54bb195c770b747d87af7506c2032aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6726708fe8f69a84845af570a6cadc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1e6726708fe8f69a84845af570a6cadc">add_built_program</a> (const std::string &amp;built_program_name, const cl::Program &amp;program)</td></tr>
<tr class="memdesc:a1e6726708fe8f69a84845af570a6cadc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new built program to the cache.  <a href="#a1e6726708fe8f69a84845af570a6cadc">More...</a><br /></td></tr>
<tr class="separator:a1e6726708fe8f69a84845af570a6cadc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f51d241825bd6710fe81b581068ba1e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a4f51d241825bd6710fe81b581068ba1e">fp16_supported</a> () const</td></tr>
<tr class="memdesc:a4f51d241825bd6710fe81b581068ba1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if FP16 is supported by the CL device.  <a href="#a4f51d241825bd6710fe81b581068ba1e">More...</a><br /></td></tr>
<tr class="separator:a4f51d241825bd6710fe81b581068ba1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7406f704be6891f5a9a1c6dbc3e882df"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a7406f704be6891f5a9a1c6dbc3e882df">int64_base_atomics_supported</a> () const</td></tr>
<tr class="memdesc:a7406f704be6891f5a9a1c6dbc3e882df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if int64_base_atomics extension is supported by the CL device.  <a href="#a7406f704be6891f5a9a1c6dbc3e882df">More...</a><br /></td></tr>
<tr class="separator:a7406f704be6891f5a9a1c6dbc3e882df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a697a3f93a94d06390e777fd6e5cb7024"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a697a3f93a94d06390e777fd6e5cb7024">get_program_name</a> (const std::string &amp;<a class="el" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>) const</td></tr>
<tr class="memdesc:a697a3f93a94d06390e777fd6e5cb7024"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the program name given a kernel name.  <a href="#a697a3f93a94d06390e777fd6e5cb7024">More...</a><br /></td></tr>
<tr class="separator:a697a3f93a94d06390e777fd6e5cb7024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a543610db0a6e5120dfb943e12a62909b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a543610db0a6e5120dfb943e12a62909b">is_wbsm_supported</a> ()</td></tr>
<tr class="separator:a543610db0a6e5120dfb943e12a62909b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293edc1bbcbddffb7228ac97917ed107"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a> (cl::Context <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>)</td></tr>
<tr class="memdesc:a293edc1bbcbddffb7228ac97917ed107"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the CL context used to create programs.  <a href="#a293edc1bbcbddffb7228ac97917ed107">More...</a><br /></td></tr>
<tr class="separator:a293edc1bbcbddffb7228ac97917ed107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a0137545ce1771423fbde2ce494a81"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a10a0137545ce1771423fbde2ce494a81">get_compile_context</a> ()</td></tr>
<tr class="memdesc:a10a0137545ce1771423fbde2ce494a81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the compile context used.  <a href="#a10a0137545ce1771423fbde2ce494a81">More...</a><br /></td></tr>
<tr class="separator:a10a0137545ce1771423fbde2ce494a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:acba005f5ce2c62cbf3f94d074d9007aa"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">get</a> ()</td></tr>
<tr class="memdesc:acba005f5ce2c62cbf3f94d074d9007aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the KernelLibrary singleton.  <a href="#acba005f5ce2c62cbf3f94d074d9007aa">More...</a><br /></td></tr>
<tr class="separator:acba005f5ce2c62cbf3f94d074d9007aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> class. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_c_l_kernel_library_8h_source.xhtml">CLKernelLibrary.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a1e6726708fe8f69a84845af570a6cadc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e6726708fe8f69a84845af570a6cadc">&#9670;&nbsp;</a></span>add_built_program()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_built_program </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>built_program_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::Program &amp;&#160;</td>
          <td class="paramname"><em>program</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new built program to the cache. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">built_program_name</td><td>Name of the program </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">program</td><td>Built program to add to the cache </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01194">1194</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00294">CLCompileContext::add_built_program()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>.</p>
<div class="fragment"><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;{</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a251e0ce50dc147c782cad51f4bee32ea">add_built_program</a>(built_program_name, program);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a251e0ce50dc147c782cad51f4bee32ea"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a251e0ce50dc147c782cad51f4bee32ea">arm_compute::CLCompileContext::add_built_program</a></div><div class="ttdeci">void add_built_program(const std::string &amp;built_program_name, const cl::Program &amp;program) const</div><div class="ttdoc">Add a new built program to the cache. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00294">CLCompileContext.cpp:294</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0ad613086cc79a2e32d5b87bcefc7488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ad613086cc79a2e32d5b87bcefc7488">&#9670;&nbsp;</a></span>clear_programs_cache()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void clear_programs_cache </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the library's cache of binary programs. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01184">1184</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00299">CLCompileContext::clear_programs_cache()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_framework_8cpp_source.xhtml#l00540">Framework::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;{</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">clear_programs_cache</a>();</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a0ad613086cc79a2e32d5b87bcefc7488"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a0ad613086cc79a2e32d5b87bcefc7488">arm_compute::CLCompileContext::clear_programs_cache</a></div><div class="ttdeci">void clear_programs_cache()</div><div class="ttdoc">Clear the library&amp;#39;s cache of binary programs. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00299">CLCompileContext.cpp:299</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a86409f541991c3ac377c2a6b7d1f832d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86409f541991c3ac377c2a6b7d1f832d">&#9670;&nbsp;</a></span>context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Context &amp; context </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor for the associated CL context. </p>
<dl class="section return"><dt>Returns</dt><dd>A CL context. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01159">1159</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00310">CLCompileContext::context()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00034">CLScheduler::context()</a>.</p>
<div class="fragment"><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;{</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>();</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLCompileContext::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00310">CLCompileContext.cpp:310</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb732d747d949ff2113f19d6d70d8ecb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb732d747d949ff2113f19d6d70d8ecb">&#9670;&nbsp;</a></span>create_kernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_kernel.xhtml">Kernel</a> create_kernel </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>build_options_set</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a kernel from the kernel library. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_name</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> name. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">build_options_set</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> build options as a set.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The created kernel. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01125">1125</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00152">CLCompileContext::create_kernel()</a>, <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01214">CLKernelLibrary::get_program()</a>, and <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01133">CLKernelLibrary::get_program_name()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00389">arm_compute::create_opencl_kernel()</a>.</p>
<div class="fragment"><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;{</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="keyword">const</span> std::string program_name = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a697a3f93a94d06390e777fd6e5cb7024">get_program_name</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>);</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keyword">auto</span>              program      = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a545c28170311fa375be5684ba6f271bc">get_program</a>(program_name);</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a3dd891a07efcd9a5ae685f834973666d">create_kernel</a>(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, program_name, program.first, _kernel_path, build_options_set, program.second);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a545c28170311fa375be5684ba6f271bc"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a545c28170311fa375be5684ba6f271bc">arm_compute::CLKernelLibrary::get_program</a></div><div class="ttdeci">std::pair&lt; std::string, bool &gt; get_program(const std::string &amp;program_name) const</div><div class="ttdoc">Gets the source of the selected program. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01214">CLKernelLibrary.cpp:1214</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00052">CLIm2ColKernel.cpp:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a3dd891a07efcd9a5ae685f834973666d"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a3dd891a07efcd9a5ae685f834973666d">arm_compute::CLCompileContext::create_kernel</a></div><div class="ttdeci">Kernel create_kernel(const std::string &amp;kernel_name, const std::string &amp;program_name, const std::string &amp;program_source, const std::string &amp;kernel_path, const StringSet &amp;build_options_set, bool is_binary) const</div><div class="ttdoc">Creates an OpenCL kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00152">CLCompileContext.cpp:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a697a3f93a94d06390e777fd6e5cb7024"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a697a3f93a94d06390e777fd6e5cb7024">arm_compute::CLKernelLibrary::get_program_name</a></div><div class="ttdeci">std::string get_program_name(const std::string &amp;kernel_name) const</div><div class="ttdoc">Returns the program name given a kernel name. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01133">CLKernelLibrary.cpp:1133</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adb48a1da7dc6b6f3c1a424d21e1ac1f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb48a1da7dc6b6f3c1a424d21e1ac1f8">&#9670;&nbsp;</a></span>default_ndrange()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::NDRange default_ndrange </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the default NDRange for the device. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01270">1270</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00326">CLCompileContext::default_ndrange()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00136">CLReductionOperationKernel::configure()</a>, and <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00079">CLArgMinMaxLayerKernel::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;{</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">default_ndrange</a>();</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_adb48a1da7dc6b6f3c1a424d21e1ac1f8"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#adb48a1da7dc6b6f3c1a424d21e1ac1f8">arm_compute::CLCompileContext::default_ndrange</a></div><div class="ttdeci">cl::NDRange default_ndrange() const</div><div class="ttdoc">Return the default NDRange for the device. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00326">CLCompileContext.cpp:326</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f51d241825bd6710fe81b581068ba1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f51d241825bd6710fe81b581068ba1e">&#9670;&nbsp;</a></span>fp16_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fp16_supported </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if FP16 is supported by the CL device. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the CL device supports FP16 </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01199">1199</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00271">CLCompileContext::fp16_supported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;{</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a4f51d241825bd6710fe81b581068ba1e">fp16_supported</a>();</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a4f51d241825bd6710fe81b581068ba1e"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a4f51d241825bd6710fe81b581068ba1e">arm_compute::CLCompileContext::fp16_supported</a></div><div class="ttdeci">bool fp16_supported() const</div><div class="ttdoc">Returns true if FP16 is supported by the CL device. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00271">CLCompileContext.cpp:271</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acba005f5ce2c62cbf3f94d074d9007aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba005f5ce2c62cbf3f94d074d9007aa">&#9670;&nbsp;</a></span>get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> &amp; get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the KernelLibrary singleton. </p>
<p>This method has been deprecated and will be removed in future releases </p><dl class="section return"><dt>Returns</dt><dd>The KernelLibrary instance. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01119">1119</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00031">CLRuntimeContext::CLRuntimeContext()</a>, <a class="el" href="_c_l_gaussian5x5_kernel_8cpp_source.xhtml#l00030">CLGaussian5x5HorKernel::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00039">CLIntegralImageHorKernel::configure()</a>, <a class="el" href="_c_l_warp_perspective_kernel_8cpp_source.xhtml#l00062">CLWarpPerspectiveKernel::configure()</a>, <a class="el" href="_c_l_table_lookup_kernel_8cpp_source.xhtml#l00039">CLTableLookupKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_default_config_native_valhall_8cpp_source.xhtml#l00043">CLGEMMDefaultConfigNativeValhall::configure()</a>, <a class="el" href="_c_l_g_e_m_m_default_config_native_bifrost_8cpp_source.xhtml#l00043">CLGEMMDefaultConfigNativeBifrost::configure()</a>, <a class="el" href="_c_l_g_e_m_m_default_config_reshaped_r_h_s_only_bifrost_8cpp_source.xhtml#l00048">CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure()</a>, <a class="el" href="_c_l_g_e_m_m_default_config_reshaped_bifrost_8cpp_source.xhtml#l00048">CLGEMMDefaultConfigReshapedBifrost::configure()</a>, <a class="el" href="_c_l_table_lookup_8cpp_source.xhtml#l00032">CLTableLookup::configure()</a>, <a class="el" href="_c_l_box3x3_kernel_8cpp_source.xhtml#l00042">CLBox3x3Kernel::configure()</a>, <a class="el" href="_c_l_dilate_kernel_8cpp_source.xhtml#l00039">CLDilateKernel::configure()</a>, <a class="el" href="_c_l_erode_kernel_8cpp_source.xhtml#l00039">CLErodeKernel::configure()</a>, <a class="el" href="_c_l_median3x3_kernel_8cpp_source.xhtml#l00040">CLMedian3x3Kernel::configure()</a>, <a class="el" href="_c_l_gaussian3x3_kernel_8cpp_source.xhtml#l00042">CLGaussian3x3Kernel::configure()</a>, <a class="el" href="_c_l_scale_kernel_8cpp_source.xhtml#l00159">CLScaleKernel::configure()</a>, <a class="el" href="_c_l_threshold_kernel_8cpp_source.xhtml#l00037">CLThresholdKernel::configure()</a>, <a class="el" href="_c_l_transpose_kernel_8cpp_source.xhtml#l00079">CLTransposeKernel::configure()</a>, <a class="el" href="_c_l_warp_affine_kernel_8cpp_source.xhtml#l00063">CLWarpAffineKernel::configure()</a>, <a class="el" href="_c_l_reverse_8cpp_source.xhtml#l00031">CLReverse::configure()</a>, <a class="el" href="_c_l_tile_8cpp_source.xhtml#l00030">CLTile::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_8cpp_source.xhtml#l00032">CLDepthToSpaceLayer::configure()</a>, <a class="el" href="_c_l_non_maxima_suppression3x3_kernel_8cpp_source.xhtml#l00045">CLNonMaximaSuppression3x3Kernel::configure()</a>, <a class="el" href="_c_l_bitwise_not_8cpp_source.xhtml#l00032">CLBitwiseNot::configure()</a>, <a class="el" href="_c_l_fill_border_8cpp_source.xhtml#l00032">CLFillBorder::configure()</a>, <a class="el" href="_c_l_accumulate_kernel_8cpp_source.xhtml#l00041">CLAccumulateKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00031">CLMeanStdDevNormalizationLayer::configure()</a>, <a class="el" href="_c_l_select_8cpp_source.xhtml#l00034">CLSelect::configure()</a>, <a class="el" href="_c_l_bitwise_and_8cpp_source.xhtml#l00032">CLBitwiseAnd::configure()</a>, <a class="el" href="_c_l_bitwise_or_8cpp_source.xhtml#l00032">CLBitwiseOr::configure()</a>, <a class="el" href="_c_l_bitwise_xor_8cpp_source.xhtml#l00032">CLBitwiseXor::configure()</a>, <a class="el" href="_c_l_dequantization_layer_8cpp_source.xhtml#l00030">CLDequantizationLayer::configure()</a>, <a class="el" href="_c_l_gather_8cpp_source.xhtml#l00031">CLGather::configure()</a>, <a class="el" href="_c_l_reorg_layer_8cpp_source.xhtml#l00036">CLReorgLayer::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00045">ClFillKernel::configure()</a>, <a class="el" href="_c_l_transpose_8cpp_source.xhtml#l00032">CLTranspose::configure()</a>, <a class="el" href="_c_l_accumulate_8cpp_source.xhtml#l00032">CLAccumulate::configure()</a>, <a class="el" href="_c_l_phase_8cpp_source.xhtml#l00032">CLPhase::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00033">CLComparison::configure()</a>, <a class="el" href="_c_l_magnitude_8cpp_source.xhtml#l00032">CLMagnitude::configure()</a>, <a class="el" href="_c_l_prior_box_layer_8cpp_source.xhtml#l00042">CLPriorBoxLayer::configure()</a>, <a class="el" href="_c_l_range_8cpp_source.xhtml#l00034">CLRange::configure()</a>, <a class="el" href="_c_l_absolute_difference_8cpp_source.xhtml#l00032">CLAbsoluteDifference::configure()</a>, <a class="el" href="_c_l_channel_extract_8cpp_source.xhtml#l00032">CLChannelExtract::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_8cpp_source.xhtml#l00031">CLChannelShuffleLayer::configure()</a>, <a class="el" href="_c_l_channel_combine_8cpp_source.xhtml#l00032">CLChannelCombine::configure()</a>, <a class="el" href="_c_l_convert_fully_connected_weights_8cpp_source.xhtml#l00030">CLConvertFullyConnectedWeights::configure()</a>, <a class="el" href="_c_l_non_linear_filter_kernel_8cpp_source.xhtml#l00055">CLNonLinearFilterKernel::configure()</a>, <a class="el" href="_c_l_flatten_layer_8cpp_source.xhtml#l00036">CLFlattenLayer::configure()</a>, <a class="el" href="_c_l_quantization_layer_8cpp_source.xhtml#l00030">CLQuantizationLayer::configure()</a>, <a class="el" href="_c_l_threshold_8cpp_source.xhtml#l00032">CLThreshold::configure()</a>, <a class="el" href="_c_l_color_convert_8cpp_source.xhtml#l00032">CLColorConvert::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00040">CLLKTrackerInitKernel::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00144">CLFullyConnectedLayerReshapeWeights::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_8cpp_source.xhtml#l00033">CLNormalizePlanarYUVLayer::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00080">ClPermuteKernel::configure()</a>, <a class="el" href="_c_l_warp_perspective_8cpp_source.xhtml#l00034">CLWarpPerspective::configure()</a>, <a class="el" href="_c_l_dequantization_layer_kernel_8cpp_source.xhtml#l00063">CLDequantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_reshape_weights_kernel_8cpp_source.xhtml#l00088">CLDepthwiseConvolutionLayerReshapeWeightsKernel::configure()</a>, <a class="el" href="_c_l_min_max_layer_kernel_8cpp_source.xhtml#l00090">CLMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00042">CLGradientKernel::configure()</a>, <a class="el" href="_c_l_median3x3_8cpp_source.xhtml#l00034">CLMedian3x3::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00107">CLReduceMean::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00045">ClCropKernel::configure()</a>, <a class="el" href="_c_l_warp_affine_8cpp_source.xhtml#l00034">CLWarpAffine::configure()</a>, <a class="el" href="_c_l_box3x3_8cpp_source.xhtml#l00034">CLBox3x3::configure()</a>, <a class="el" href="_c_l_dilate_8cpp_source.xhtml#l00034">CLDilate::configure()</a>, <a class="el" href="_c_l_erode_8cpp_source.xhtml#l00034">CLErode::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00066">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_gaussian3x3_8cpp_source.xhtml#l00034">CLGaussian3x3::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00093">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00046">CLGaussianPyramidHorKernel::configure()</a>, <a class="el" href="_c_l_non_maxima_suppression3x3_8cpp_source.xhtml#l00033">CLNonMaximaSuppression3x3::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00071">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00075">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00070">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00052">CLHistogramKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_8cpp_source.xhtml#l00030">CLBoundingBoxTransform::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00088">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00111">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_8cpp_source.xhtml#l00036">CLInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00089">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00062">CLTileKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00069">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00062">CLUnstack::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel_8cpp_source.xhtml#l00248">CLDepthwiseConvolutionLayer3x3NCHWKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00044">CLDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_min_max_location_kernel_8cpp_source.xhtml#l00064">CLMinMaxKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00136">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00081">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00073">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_remap_kernel_8cpp_source.xhtml#l00049">CLRemapKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00111">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_reshape_layer_8cpp_source.xhtml#l00052">CLReshapeLayer::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_8cpp_source.xhtml#l00030">CLROIPoolingLayer::configure()</a>, <a class="el" href="_c_l_scharr3x3_8cpp_source.xhtml#l00034">CLScharr3x3::configure()</a>, <a class="el" href="_c_l_depth_convert_layer_kernel_8cpp_source.xhtml#l00076">CLDepthConvertLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel_8cpp_source.xhtml#l00195">CLDepthwiseConvolutionLayer3x3NHWCKernel::configure()</a>, <a class="el" href="_c_l_derivative_kernel_8cpp_source.xhtml#l00049">CLDerivativeKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00085">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00079">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_sobel3x3_kernel_8cpp_source.xhtml#l00049">CLSobel3x3Kernel::configure()</a>, <a class="el" href="_c_l_remap_8cpp_source.xhtml#l00038">CLRemap::configure()</a>, <a class="el" href="_c_l_winograd_input_transform_8cpp_source.xhtml#l00033">CLWinogradInputTransform::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00047">CLHOGOrientationBinningKernel::configure()</a>, <a class="el" href="_c_l_derivative_8cpp_source.xhtml#l00034">CLDerivative::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00076">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00099">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_fill_8cpp_source.xhtml#l00052">CLFill::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00072">CLPadLayerKernel::configure()</a>, <a class="el" href="_c_l_quantization_layer_kernel_8cpp_source.xhtml#l00062">CLQuantizationLayerKernel::configure()</a>, <a class="el" href="_c_l_histogram_8cpp_source.xhtml#l00035">CLHistogram::configure()</a>, <a class="el" href="_c_l_sobel5x5_kernel_8cpp_source.xhtml#l00049">CLSobel5x5HorKernel::configure()</a>, <a class="el" href="_c_l_sobel7x7_kernel_8cpp_source.xhtml#l00049">CLSobel7x7HorKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00158">CLLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_absolute_difference_kernel_8cpp_source.xhtml#l00044">CLAbsoluteDifferenceKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00161">CLGEMMLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_8cpp_source.xhtml#l00039">CLROIAlignLayer::configure()</a>, <a class="el" href="_c_l_cast_8cpp_source.xhtml#l00032">CLCast::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00079">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_copy_8cpp_source.xhtml#l00052">CLCopy::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00049">CLRsqrtLayer::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_floor_8cpp_source.xhtml#l00050">CLFloor::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00104">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_channel_extract_kernel_8cpp_source.xhtml#l00049">CLChannelExtractKernel::configure()</a>, <a class="el" href="_c_l_non_linear_filter_8cpp_source.xhtml#l00033">CLNonLinearFilter::configure()</a>, <a class="el" href="_c_l_color_convert_kernel_8cpp_source.xhtml#l00047">CLColorConvertKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_8cpp_source.xhtml#l00043">CLSpaceToDepthLayer::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00092">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00099">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_convert_layer_8cpp_source.xhtml#l00032">CLDepthConvertLayer::configure()</a>, <a class="el" href="_c_l_magnitude_phase_kernel_8cpp_source.xhtml#l00046">CLMagnitudePhaseKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_kernel_8cpp_source.xhtml#l00064">CLMeanStdDevKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00073">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00131">CLReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_permute_8cpp_source.xhtml#l00050">CLPermute::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00085">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_8cpp_source.xhtml#l00044">CLBatchToSpaceLayer::configure()</a>, <a class="el" href="_c_l_pooling_layer_8cpp_source.xhtml#l00047">CLPoolingLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00087">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_c_l_integral_image_8cpp_source.xhtml#l00039">CLIntegralImage::configure()</a>, <a class="el" href="_c_l_channel_combine_kernel_8cpp_source.xhtml#l00052">CLChannelCombineKernel::configure()</a>, <a class="el" href="_c_l_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00042">CLConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00081">CLStackLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_l_h_s_matrix_kernel_8cpp_source.xhtml#l00116">CLGEMMReshapeLHSMatrixKernel::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00061">CLConvolutionKernel&lt; matrix_size &gt;::configure()</a>, <a class="el" href="_c_l_mean_std_dev_8cpp_source.xhtml#l00072">CLMeanStdDev::configure()</a>, <a class="el" href="_c_l_winograd_input_transform_kernel_8cpp_source.xhtml#l00108">CLWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_logical_not_8cpp_source.xhtml#l00048">CLLogicalNot::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_native_kernel_8cpp_source.xhtml#l00206">CLGEMMMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_f_f_t2_d_8cpp_source.xhtml#l00042">CLFFT2D::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00108">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_h_o_g_gradient_8cpp_source.xhtml#l00043">CLHOGGradient::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00075">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_sobel3x3_8cpp_source.xhtml#l00036">CLSobel3x3::configure()</a>, <a class="el" href="_c_l_winograd_filter_transform_kernel_8cpp_source.xhtml#l00097">CLWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00114">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_crop_8cpp_source.xhtml#l00052">CLCrop::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00086">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00135">CLGEMMLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_scale_8cpp_source.xhtml#l00038">CLScale::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00074">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_kernel_8cpp_source.xhtml#l00054">CLHarrisScoreKernel::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_8cpp_source.xhtml#l00044">CLDirectConvolutionLayer::configure()</a>, <a class="el" href="_c_l_equalize_histogram_8cpp_source.xhtml#l00099">CLEqualizeHistogram::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00045">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_c_l_winograd_output_transform_kernel_8cpp_source.xhtml#l00127">CLWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_convolution_8cpp_source.xhtml#l00041">CLConvolution3x3::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00140">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00048">CLDeconvolutionLayerUpsample::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00050">CLFFT1D::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00049">CLFastCornersKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00057">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_gaussian5x5_kernel_8cpp_source.xhtml#l00043">CLGaussian5x5VertKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_8cpp_source.xhtml#l00042">CLMaxUnpoolingLayer::configure()</a>, <a class="el" href="_c_l_stack_layer_8cpp_source.xhtml#l00048">CLStackLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00084">CLGEMMLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_c_l_activation_layer_8cpp_source.xhtml#l00052">CLActivationLayer::configure()</a>, <a class="el" href="_c_l_h_o_g_detector_kernel_8cpp_source.xhtml#l00043">CLHOGDetectorKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00079">CLGEMMLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_8cpp_source.xhtml#l00069">CLStridedSlice::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_kernel_8cpp_source.xhtml#l00275">CLGEMMMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00118">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_direct_convolution_layer_kernel_8cpp_source.xhtml#l00329">CLDirectConvolutionLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_8cpp_source.xhtml#l00038">CLPadLayer::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_8cpp_source.xhtml#l00050">CLHOGDescriptor::configure()</a>, <a class="el" href="_c_l_integral_image_kernel_8cpp_source.xhtml#l00090">CLIntegralImageVertKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_8cpp_source.xhtml#l00046">CLNormalizationLayer::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_8cpp_source.xhtml#l00042">CLFuseBatchNormalization::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00102">CLGEMMLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00133">CLGEMMLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00193">CLReductionOperation::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00569">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_scharr3x3_kernel_8cpp_source.xhtml#l00048">CLScharr3x3Kernel::configure()</a>, <a class="el" href="_c_l_accumulate_8cpp_source.xhtml#l00044">CLAccumulateWeighted::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00114">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00053">CLL2NormalizeLayer::configure()</a>, <a class="el" href="_c_l_laplacian_pyramid_8cpp_source.xhtml#l00052">CLLaplacianPyramid::configure()</a>, <a class="el" href="_c_l_col2_im_kernel_8cpp_source.xhtml#l00092">CLCol2ImKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_reshape_r_h_s_matrix_kernel_8cpp_source.xhtml#l00114">CLGEMMReshapeRHSMatrixKernel::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00148">CLPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00066">CLConvolutionLayerReshapeWeights::configure()</a>, <a class="el" href="_c_l_min_max_location_8cpp_source.xhtml#l00046">CLMinMaxLocation::configure()</a>, <a class="el" href="_c_l_concatenate_layer_8cpp_source.xhtml#l00052">CLConcatenateLayer::configure()</a>, <a class="el" href="_c_l_h_o_g_detector_8cpp_source.xhtml#l00041">CLHOGDetector::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00296">CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_accumulate_kernel_8cpp_source.xhtml#l00058">CLAccumulateWeightedKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_8cpp_source.xhtml#l00044">CLBatchNormalizationLayer::configure()</a>, <a class="el" href="_c_l_sobel7x7_8cpp_source.xhtml#l00049">CLSobel7x7::configure()</a>, <a class="el" href="_c_l_canny_edge_8cpp_source.xhtml#l00063">CLCannyEdge::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00084">CLCropResize::configure()</a>, <a class="el" href="_c_l_sobel5x5_8cpp_source.xhtml#l00049">CLSobel5x5::configure()</a>, <a class="el" href="_c_l_fast_corners_8cpp_source.xhtml#l00058">CLFastCorners::configure()</a>, <a class="el" href="_c_l_gaussian5x5_8cpp_source.xhtml#l00050">CLGaussian5x5::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00223">CLGEMMLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00191">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::configure()</a>, <a class="el" href="_c_l_winograd_convolution_layer_8cpp_source.xhtml#l00108">CLWinogradConvolutionLayer::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00053">CLArithmeticAddition::configure()</a>, <a class="el" href="_c_l_weights_reshape_kernel_8cpp_source.xhtml#l00074">CLWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00059">CLSoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_c_l_laplacian_reconstruct_8cpp_source.xhtml#l00046">CLLaplacianReconstruct::configure()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00089">CLGEMMReshapeRHSMatrixKernelManaged::configure()</a>, <a class="el" href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00307">CLIm2ColKernel::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00095">CLLKTrackerFinalizeKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00212">CLGEMMMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_harris_corners_8cpp_source.xhtml#l00067">CLHarrisCorners::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00061">CLComparisonStatic&lt; COP &gt;::configure()</a>, <a class="el" href="_c_l_h_o_g_multi_detection_8cpp_source.xhtml#l00061">CLHOGMultiDetection::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00036">CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00072">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_logical_or_8cpp_source.xhtml#l00068">CLLogicalOr::configure()</a>, <a class="el" href="_c_l_logical_and_8cpp_source.xhtml#l00068">CLLogicalAnd::configure()</a>, <a class="el" href="_c_l_histogram_kernel_8cpp_source.xhtml#l00162">CLHistogramBorderKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_kernel_8cpp_source.xhtml#l00157">CLGaussianPyramidVertKernel::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00065">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_reduction_kernel_8cpp_source.xhtml#l00070">CLGEMMLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_c_l_accumulate_8cpp_source.xhtml#l00056">CLAccumulateSquared::configure()</a>, <a class="el" href="_c_l_optical_flow_8cpp_source.xhtml#l00062">CLOpticalFlow::configure()</a>, <a class="el" href="_c_l_p_relu_layer_8cpp_source.xhtml#l00072">CLPReluLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00110">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_min_max_location_kernel_8cpp_source.xhtml#l00176">CLMinMaxLocationKernel::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00127">CLEdgeNonMaxSuppressionKernel::configure()</a>, <a class="el" href="_c_l_accumulate_kernel_8cpp_source.xhtml#l00080">CLAccumulateSquaredKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00230">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_h_o_g_descriptor_kernel_8cpp_source.xhtml#l00143">CLHOGBlockNormalizationKernel::configure()</a>, <a class="el" href="_c_l_slice_8cpp_source.xhtml#l00084">CLSlice::configure()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00048">CLConvolutionLayer::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00137">CLSeparableConvolutionHorKernel&lt; matrix_size &gt;::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00091">CLExpLayer::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8h_source.xhtml#l00107">CLFullyConnectedLayerReshapeWeightsManaged::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00069">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_8cpp_source.xhtml#l00063">CLGaussianPyramidHalf::configure()</a>, <a class="el" href="_c_l_convert_fully_connected_weights_8h_source.xhtml#l00111">CLConvertFullyConnectedWeightsManaged::configure()</a>, <a class="el" href="_c_l_sobel5x5_kernel_8cpp_source.xhtml#l00152">CLSobel5x5VertKernel::configure()</a>, <a class="el" href="_c_l_sobel7x7_kernel_8cpp_source.xhtml#l00154">CLSobel7x7VertKernel::configure()</a>, <a class="el" href="_c_l_fast_corners_kernel_8cpp_source.xhtml#l00137">CLCopyToArrayKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00162">CLQLSTMLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8h_source.xhtml#l00116">CLConvolutionLayerReshapeWeightsTransform::configure()</a>, <a class="el" href="_c_l_convolution_8cpp_source.xhtml#l00066">CLConvolutionSquare&lt; matrix_size &gt;::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00134">CLLKTrackerStage0Kernel::configure()</a>, <a class="el" href="_c_l_softmax_layer_kernel_8cpp_source.xhtml#l00287">CLLogits1DNormKernel::configure()</a>, <a class="el" href="_c_l_gaussian_pyramid_8cpp_source.xhtml#l00152">CLGaussianPyramidOrb::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00212">CLSeparableConvolutionVertKernel&lt; matrix_size &gt;::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_reduction_kernel_8cpp_source.xhtml#l00151">CLGEMMLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_8cpp_source.xhtml#l00666">CLGEMM::configure()</a>, <a class="el" href="_c_l_canny_edge_kernel_8cpp_source.xhtml#l00206">CLEdgeTraceKernel::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00133">CLNegLayer::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00239">CLFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00386">CLComplexPixelWiseMultiplicationKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00069">CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint::configure()</a>, <a class="el" href="_c_l_convolution_8cpp_source.xhtml#l00131">CLConvolutionRectangle::configure()</a>, <a class="el" href="_c_l_l_k_tracker_kernel_8cpp_source.xhtml#l00232">CLLKTrackerStage1Kernel::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00099">CLArithmeticSubtraction::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00144">CLPixelWiseMultiplication::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00174">CLSinLayer::configure()</a>, <a class="el" href="_c_l_convolution_kernel_8cpp_source.xhtml#l00301">CLConvolutionRectangleKernel::configure()</a>, <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00206">CLGEMMConvolutionLayer::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00256">CLLogLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00102">CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00145">CLArithmeticDivision::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00192">CLComplexPixelWiseMultiplication::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00215">CLAbsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00134">CLGEMMLowpOutputStage::configure()</a>, <a class="el" href="_c_l_element_wise_unary_layer_8cpp_source.xhtml#l00297">CLRoundLayer::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00190">CLElementwiseMax::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00235">CLElementwiseMin::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00280">CLElementwiseSquaredDiff::configure()</a>, <a class="el" href="_c_l_2functions_2_c_l_elementwise_operations_8cpp_source.xhtml#l00325">CLElementwisePower::configure()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00034">CLScheduler::context()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00403">arm_compute::create_kernel()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00389">arm_compute::create_opencl_kernel()</a>, <a class="el" href="_g_e_m_m_matrix_multiply_reshaped_8cpp_source.xhtml#l00441">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00124">CLScheduler::default_init()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00111">CLScheduler::default_init_with_context()</a>, <a class="el" href="_c_l_validate_8h_source.xhtml#l00046">arm_compute::error_on_unsupported_int64_base_atomics()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00131">ICLKernel::get_max_workgroup_size()</a>, <a class="el" href="_c_l_2_i_c_l_kernel_8h_source.xhtml#l00336">ICLKernel::get_target()</a>, <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00046">CLRuntimeContext::kernel_library()</a>, <a class="el" href="main_8cpp_source.xhtml#l00098">main()</a>, <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>, <a class="el" href="_c_l_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_kernel_8cpp_source.xhtml#l00348">CLGEMMMatrixMultiplyReshapedOnlyRHSKernel::run()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00540">Framework::run()</a>, <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00097">arm_compute::utils::run_example()</a>, <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00073">arm_compute::save_program_cache_to_file()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00144">CLScheduler::set_context()</a>, <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00111">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00185">OpenCLMemoryUsage::test_measurements()</a>, <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00082">CLTuner::tune_kernel_dynamic()</a>, <a class="el" href="_gemm_tuner_helpers_8h_source.xhtml#l00034">examples::gemm_tuner_helpers::update_padding_for_cl_image()</a>, <a class="el" href="_c_l_g_e_m_m_helpers_8cpp_source.xhtml#l00071">arm_compute::cl_gemm::update_padding_for_cl_image()</a>, and <a class="el" href="_c_l_g_e_m_m_helpers_8cpp_source.xhtml#l00084">arm_compute::cl_gemm::validate_image2d_support_on_rhs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;{</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a> _kernel_library;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="keywordflow">return</span> _kernel_library;</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml">arm_compute::CLKernelLibrary</a></div><div class="ttdoc">CLKernelLibrary class. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00038">CLKernelLibrary.h:38</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a54bb195c770b747d87af7506c2032aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54bb195c770b747d87af7506c2032aa4">&#9670;&nbsp;</a></span>get_built_programs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::map&lt; std::string, cl::Program &gt; &amp; get_built_programs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Access the cache of built OpenCL programs. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01189">1189</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00305">CLCompileContext::get_built_programs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00073">arm_compute::save_program_cache_to_file()</a>, and <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00185">OpenCLMemoryUsage::test_measurements()</a>.</p>
<div class="fragment"><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;{</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a54bb195c770b747d87af7506c2032aa4">get_built_programs</a>();</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a54bb195c770b747d87af7506c2032aa4"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a54bb195c770b747d87af7506c2032aa4">arm_compute::CLCompileContext::get_built_programs</a></div><div class="ttdeci">const std::map&lt; std::string, cl::Program &gt; &amp; get_built_programs() const</div><div class="ttdoc">Access the cache of built OpenCL programs. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00305">CLCompileContext.cpp:305</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a10a0137545ce1771423fbde2ce494a81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10a0137545ce1771423fbde2ce494a81">&#9670;&nbsp;</a></span>get_compile_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp; get_compile_context </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the compile context used. </p>
<dl class="section return"><dt>Returns</dt><dd>The used compile context </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01285">1285</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;{</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <span class="keywordflow">return</span> _compile_context;</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1b3919fb1e9372257947abe01e74e3d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b3919fb1e9372257947abe01e74e3d4">&#9670;&nbsp;</a></span>get_device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const cl::Device &amp; get_device </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the CL device for which the programs are created. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01164">1164</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00315">CLCompileContext::get_device()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_g_e_m_m_matrix_multiply_reshaped_only_r_h_s_8cpp_source.xhtml#l00235">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00111">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_c_l_g_e_m_m_helpers_8cpp_source.xhtml#l00084">arm_compute::cl_gemm::validate_image2d_support_on_rhs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;{</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a8da9f7c295b65104343fac358924fc2c">get_device</a>();</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a8da9f7c295b65104343fac358924fc2c"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a8da9f7c295b65104343fac358924fc2c">arm_compute::CLCompileContext::get_device</a></div><div class="ttdeci">const cl::Device &amp; get_device() const</div><div class="ttdoc">Gets the CL device for which the programs are created. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00315">CLCompileContext.cpp:315</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef78b2e57b5203f8a184465e2da020ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef78b2e57b5203f8a184465e2da020ef">&#9670;&nbsp;</a></span>get_device_version()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_device_version </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the device version. </p>
<dl class="section return"><dt>Returns</dt><dd>The content of CL_DEVICE_VERSION </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01275">1275</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00367">CLCompileContext::get_device_version()</a>.</p>
<div class="fragment"><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;{</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a1d4cf09994ef5a094eed69cd37ca26ba">get_device_version</a>();</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a1d4cf09994ef5a094eed69cd37ca26ba"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a1d4cf09994ef5a094eed69cd37ca26ba">arm_compute::CLCompileContext::get_device_version</a></div><div class="ttdeci">std::string get_device_version() const</div><div class="ttdoc">Return the device version. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00367">CLCompileContext.cpp:367</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad7395c158d8e31b9af211b9bc1f65a08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7395c158d8e31b9af211b9bc1f65a08">&#9670;&nbsp;</a></span>get_kernel_path()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_kernel_path </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the path that the kernels reside in. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01179">1179</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00403">arm_compute::create_kernel()</a>, and <a class="el" href="_compile_context_8cpp_source.xhtml#l00042">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;{</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordflow">return</span> _kernel_path;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a70696e3d56dcbcdc1f493dec744bc581"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70696e3d56dcbcdc1f493dec744bc581">&#9670;&nbsp;</a></span>get_num_compute_units()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_uint get_num_compute_units </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the maximum number of compute units in the device. </p>
<dl class="section return"><dt>Returns</dt><dd>The content of CL_DEVICE_MAX_COMPUTE_UNITS </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01280">1280</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00372">CLCompileContext::get_num_compute_units()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00082">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;{</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a7ead2f03c59c553788947ea8a29b38f3">get_num_compute_units</a>();</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a7ead2f03c59c553788947ea8a29b38f3"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a7ead2f03c59c553788947ea8a29b38f3">arm_compute::CLCompileContext::get_num_compute_units</a></div><div class="ttdeci">cl_uint get_num_compute_units() const</div><div class="ttdoc">Return the maximum number of compute units in the device. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00372">CLCompileContext.cpp:372</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a545c28170311fa375be5684ba6f271bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a545c28170311fa375be5684ba6f271bc">&#9670;&nbsp;</a></span>get_program()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; std::string, bool &gt; get_program </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>program_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the source of the selected program. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">program_name</td><td><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class. ">Program</a> name.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair with the source (false) or the binary (true), of the selected program. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01214">1214</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, and <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00038">arm_compute::read_file()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01125">CLKernelLibrary::create_kernel()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00403">arm_compute::create_kernel()</a>, and <a class="el" href="_compile_context_8cpp_source.xhtml#l00042">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="preprocessor">#ifdef EMBEDDED_KERNELS</span></div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_COMPRESSED_KERNELS</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> inflatted_program_source_it = _decompressed_source_map.find(program_name);</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keywordflow">if</span>(inflatted_program_source_it != _decompressed_source_map.end())</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    {</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        <span class="keywordflow">return</span> std::make_pair(inflatted_program_source_it-&gt;second, <span class="keyword">false</span>);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    }</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_COMPRESSED_KERNELS */</span><span class="preprocessor"></span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> program_source_it = _program_source_map.find(program_name);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keywordflow">if</span>(program_source_it == _program_source_map.end())</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    {</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Embedded program for %s does not exist.&quot;</span>, program_name.c_str());</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    }</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    std::string program_source = program_source_it-&gt;second;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_COMPRESSED_KERNELS</span></div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    std::string decompressed_program_source = decompress_zlib(decode_base64(program_source_it-&gt;second));</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(decompressed_program_source.empty(), <span class="stringliteral">&quot;Cannot de-compress requested program&quot;</span>);</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    _decompressed_source_map.insert(std::make_pair(program_name, decompressed_program_source));</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    program_source = std::move(decompressed_program_source);</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_COMPRESSED_KERNELS */</span><span class="preprocessor"></span></div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <span class="keywordflow">return</span> std::make_pair(program_source, <span class="keyword">false</span>);</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* EMBEDDED_KERNELS */</span><span class="preprocessor"></span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <span class="comment">// Check for binary</span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    std::string source_name = _kernel_path + program_name;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    std::string binary_name = source_name + <span class="stringliteral">&quot;bin&quot;</span>;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    std::string program_source{};</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="keywordtype">bool</span>        is_binary = <span class="keyword">false</span>;</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keywordflow">if</span>(std::ifstream(binary_name).is_open())</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    {</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        program_source = <a class="code" href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">read_file</a>(binary_name, <span class="keyword">true</span>);</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        is_binary      = <span class="keyword">true</span>;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    }</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(std::ifstream(source_name).is_open())</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    {</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        program_source = <a class="code" href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">read_file</a>(source_name, <span class="keyword">false</span>);</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    }</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    {</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Kernel file %s does not exist.&quot;</span>, source_name.c_str());</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    }</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keywordflow">return</span> std::make_pair(program_source, is_binary);</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* EMBEDDED_KERNELS */</span><span class="preprocessor"></span></div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae0d288429eb20baf6da6109f3a21e6bb"><div class="ttname"><a href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">arm_compute::read_file</a></div><div class="ttdeci">std::string read_file(const std::string &amp;filename, bool binary)</div><div class="ttdoc">Load an entire file in memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00038">Utils.cpp:38</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a697a3f93a94d06390e777fd6e5cb7024"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a697a3f93a94d06390e777fd6e5cb7024">&#9670;&nbsp;</a></span>get_program_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string get_program_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the program name given a kernel name. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class. ">Program</a> name </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01133">1133</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01125">CLKernelLibrary::create_kernel()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00403">arm_compute::create_kernel()</a>, and <a class="el" href="_compile_context_8cpp_source.xhtml#l00042">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;{</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="comment">// Find which program contains the kernel</span></div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keyword">auto</span> kernel_program_it = _kernel_program_map.find(<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>);</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keywordflow">if</span>(_kernel_program_map.end() == kernel_program_it)</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    {</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Kernel %s not found in the CLKernelLibrary&quot;</span>, <a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>.c_str());</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    }</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keyword">const</span> std::string program_name = kernel_program_it-&gt;second;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keywordflow">return</span> program_name;</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00052">CLIm2ColKernel.cpp:52</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9f976367edcd9ab787375373e050b94b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f976367edcd9ab787375373e050b94b">&#9670;&nbsp;</a></span>init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>kernel_path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::Device&#160;</td>
          <td class="paramname"><em>device</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialises the kernel library. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_path</td><td>Path of the directory from which kernel sources are loaded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>CL context used to create programs. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>CL device for which the programs are created. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01148">1148</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00031">CLRuntimeContext::CLRuntimeContext()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00124">CLScheduler::default_init()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00111">CLScheduler::default_init_with_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;{</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    _compile_context = <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>, device);</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    _kernel_path     = kernel_path;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00202">CLCompileContext.h:202</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01159">CLKernelLibrary.cpp:1159</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7406f704be6891f5a9a1c6dbc3e882df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7406f704be6891f5a9a1c6dbc3e882df">&#9670;&nbsp;</a></span>int64_base_atomics_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool int64_base_atomics_supported </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if int64_base_atomics extension is supported by the CL device. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the CL device supports int64_base_atomics extension </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01204">1204</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00346">CLCompileContext::int64_base_atomics_supported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;{</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a7406f704be6891f5a9a1c6dbc3e882df">int64_base_atomics_supported</a>();</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a7406f704be6891f5a9a1c6dbc3e882df"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a7406f704be6891f5a9a1c6dbc3e882df">arm_compute::CLCompileContext::int64_base_atomics_supported</a></div><div class="ttdeci">bool int64_base_atomics_supported() const</div><div class="ttdoc">Returns true if int64_base_atomics extension is supported by the CL device. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00346">CLCompileContext.cpp:346</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a543610db0a6e5120dfb943e12a62909b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a543610db0a6e5120dfb943e12a62909b">&#9670;&nbsp;</a></span>is_wbsm_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_wbsm_supported </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01209">1209</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00351">CLCompileContext::is_wbsm_supported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;{</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#aab68e2f6c9f06a4db5bb7ceec9185615">is_wbsm_supported</a>();</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_aab68e2f6c9f06a4db5bb7ceec9185615"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#aab68e2f6c9f06a4db5bb7ceec9185615">arm_compute::CLCompileContext::is_wbsm_supported</a></div><div class="ttdeci">bool is_wbsm_supported() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00351">CLCompileContext.cpp:351</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaeda307cc2131afa8a4764e38373f94e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeda307cc2131afa8a4764e38373f94e">&#9670;&nbsp;</a></span>max_local_workgroup_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t max_local_workgroup_size </td>
          <td>(</td>
          <td class="paramtype">const cl::Kernel &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find the maximum number of local work items in a workgroup can be supported for the kernel. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01265">1265</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00356">CLCompileContext::max_local_workgroup_size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00131">ICLKernel::get_max_workgroup_size()</a>.</p>
<div class="fragment"><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;{</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <span class="keywordflow">return</span> _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#aaeda307cc2131afa8a4764e38373f94e">max_local_workgroup_size</a>(kernel);</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_aaeda307cc2131afa8a4764e38373f94e"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#aaeda307cc2131afa8a4764e38373f94e">arm_compute::CLCompileContext::max_local_workgroup_size</a></div><div class="ttdeci">size_t max_local_workgroup_size(const cl::Kernel &amp;kernel) const</div><div class="ttdoc">Find the maximum number of local work items in a workgroup can be supported for the kernel...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00356">CLCompileContext.cpp:356</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a293edc1bbcbddffb7228ac97917ed107"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293edc1bbcbddffb7228ac97917ed107">&#9670;&nbsp;</a></span>set_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_context </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the CL context used to create programs. </p>
<dl class="section note"><dt>Note</dt><dd>Setting the context also resets the device to the first one available in the new context.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>A CL context. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01174">1174</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00211">CLCompileContext::set_context()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00144">CLScheduler::set_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;{</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>);</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLCompileContext::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00211">CLCompileContext.cpp:211</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l01159">CLKernelLibrary.cpp:1159</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5a6865d04c8d3348860f3cb8100fdb97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a6865d04c8d3348860f3cb8100fdb97">&#9670;&nbsp;</a></span>set_device()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_device </td>
          <td>(</td>
          <td class="paramtype">cl::Device&#160;</td>
          <td class="paramname"><em>device</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the CL device for which the programs are created. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01169">1169</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00320">CLCompileContext::set_device()</a>.</p>
<div class="fragment"><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;{</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    _compile_context.<a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">set_device</a>(device);</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml_a5a6865d04c8d3348860f3cb8100fdb97"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml#a5a6865d04c8d3348860f3cb8100fdb97">arm_compute::CLCompileContext::set_device</a></div><div class="ttdeci">void set_device(cl::Device device)</div><div class="ttdoc">Sets the CL device for which the programs are created. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8cpp_source.xhtml#l00320">CLCompileContext.cpp:320</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a66a558a56f5d0dcd6305c405ebc38cc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66a558a56f5d0dcd6305c405ebc38cc2">&#9670;&nbsp;</a></span>set_kernel_path()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_kernel_path </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the path that the kernels reside in. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_path</td><td>Path of the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l01154">1154</a> of file <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;{</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    _kernel_path = std::move(kernel_path);</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/CL/<a class="el" href="_c_l_kernel_library_8h_source.xhtml">CLKernelLibrary.h</a></li>
<li>src/core/CL/<a class="el" href="_c_l_kernel_library_8cpp_source.xhtml">CLKernelLibrary.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:17:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
