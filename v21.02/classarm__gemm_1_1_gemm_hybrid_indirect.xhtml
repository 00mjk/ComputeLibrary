<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_hybrid_indirect.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_hybrid_indirect__coll__graph.svg" width="234" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac56a22200f2dc32c4a166ffb51fd6118"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac56a22200f2dc32c4a166ffb51fd6118">GemmHybridIndirect</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;)=delete</td></tr>
<tr class="separator:ac56a22200f2dc32c4a166ffb51fd6118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f134875119ebf78406ddc0f49eb5e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a98f134875119ebf78406ddc0f49eb5e8">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> &amp;)=delete</td></tr>
<tr class="separator:a98f134875119ebf78406ddc0f49eb5e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf3825f729cb74269c80674c27985902"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aaf3825f729cb74269c80674c27985902">GemmHybridIndirect</a> (const GemmArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:aaf3825f729cb74269c80674c27985902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf49fb074e8b7b29cb88fc2f8db0113b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#acf49fb074e8b7b29cb88fc2f8db0113b">GemmHybridIndirect</a> (const GemmArgs &amp;args)</td></tr>
<tr class="separator:acf49fb074e8b7b29cb88fc2f8db0113b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memItemLeft" align="right" valign="top">ndrange_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a> () const override</td></tr>
<tr class="separator:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1bb76b8a32e09fb5ffffd66e04d7f741">supports_dynamic_scheduling</a> () const override</td></tr>
<tr class="separator:a1bb76b8a32e09fb5ffffd66e04d7f741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d37407e8d582183b35dedbf7fa43b43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a1d37407e8d582183b35dedbf7fa43b43">execute</a> (const ndcoord_t &amp;work_range, const ndcoord_t &amp;, int) override</td></tr>
<tr class="separator:a1d37407e8d582183b35dedbf7fa43b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae385dce1a98e03f0a3ca311f031e5110"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:ae385dce1a98e03f0a3ca311f031e5110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f282c5814fcd207308c4737a1fc567b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a> (const int32_t *bias, size_t bias_multi_stride) override</td></tr>
<tr class="separator:a4f282c5814fcd207308c4737a1fc567b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82b688818137467809617daf73ffdc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a82b688818137467809617daf73ffdc11">set_indirect_parameters</a> (size_t string_len, const To *const *const *ptr) override</td></tr>
<tr class="separator:a82b688818137467809617daf73ffdc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">set_convolution_parameters</a> (ConvolutionParameters parms) override</td></tr>
<tr class="separator:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a3c84938f415e03a2f0e96f64f6f6d9f6"><td class="memItemLeft" align="right" valign="top">static uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml#a3c84938f415e03a2f0e96f64f6f6d9f6">estimate_cycles</a> (const GemmArgs &amp;args, const <a class="el" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> &amp;params, const OutputStage &amp;os={})</td></tr>
<tr class="separator:a3c84938f415e03a2f0e96f64f6f6d9f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr, typename OutputStage = Nothing, bool SeparateQuantize = false&gt;<br />
class arm_gemm::GemmHybridIndirect&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00156">156</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ac56a22200f2dc32c4a166ffb51fd6118"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac56a22200f2dc32c4a166ffb51fd6118">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaf3825f729cb74269c80674c27985902"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf3825f729cb74269c80674c27985902">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype">const GemmArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00280">280</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;              : _args(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), _os(os), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll())),</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                _k_block(compute_k_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _n_block(compute_n_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os)),</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, _n_block), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        _args._cfg = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00040">utils.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acf49fb074e8b7b29cb88fc2f8db0113b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf49fb074e8b7b29cb88fc2f8db0113b">&#9670;&nbsp;</a></span>GemmHybridIndirect() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a> </td>
          <td>(</td>
          <td class="paramtype">const GemmArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00294">294</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;              : _args(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll())),</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                _k_block(compute_k_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _n_block(compute_n_block(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                _window_range(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                              <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, _n_block), <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="comment">// We take a copy of the arguments (not a pointer or reference), but there is no lifetime requirement on the</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// GemmConfig.  Clear out the pointer to avoid accidents.</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        _args._cfg = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00040">utils.hpp:40</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00474">474</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                             {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00478">478</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                                  {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">return</span> (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a3c84938f415e03a2f0e96f64f6f6d9f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c84938f415e03a2f0e96f64f6f6d9f6">&#9670;&nbsp;</a></span>estimate_cycles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint64_t estimate_cycles </td>
          <td>(</td>
          <td class="paramtype">const GemmArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00576">576</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>

<p class="reference">References <a class="el" href="performance__parameters_8hpp_source.xhtml#l00029">PerformanceParameters::kernel_macs_cycle</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00045">arm_gemm::roundup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                                                                                                       {} ) {</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="comment">// Note: Current hybrid kernels don&#39;t actually round up height (they</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="comment">// have paths for each possible height).  Might need to make this</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="comment">// configurable in future.</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        uint64_t total_macs = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll());</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordtype">float</span> mac_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.kernel_macs_cycle;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="comment">// TODO: A bit of a kludge here: current hybrid kernels incur extra</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="comment">// overhead where the width is not a multiple of kernel width.  It&#39;s</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="comment">// most noticable where the overall width is quite low, so add 15%</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="comment">// penalty for such widths.</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        if ((<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &lt; strategy::out_width()) || (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &gt; strategy::out_width() &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize &lt; 2*strategy::out_width())) {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            mac_cycles *= 1.15f;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        uint64_t total_cycles = mac_cycles;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="comment">// Quantizing kernels with separate quantize need to add in the extra stages.</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value &amp;&amp; SeparateQuantize) {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keyword">const</span> Requantize32 *qp = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Requantize32 *<span class="keyword">&gt;</span>(&amp;os);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="comment">// Row sums: need to consider each value in A (batch * multi * M * K)...</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            uint64_t rowsum_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, strategy::k_unroll());</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="comment">// ... but row sums are skipped if B offset==0.</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="keywordflow">if</span> (qp-&gt;b_offset == 0) {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                rowsum_bytes = 0;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="comment">// Use &quot;prepare bytes per cycle&quot; to store &quot;row sum values per cycle&quot;.</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keywordtype">float</span> rowsum_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(rowsum_bytes) / params.prepare_bytes_cycle;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="comment">// Requantize: need to consider each value in C (batch * multi * M * N)</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            uint64_t requantize_bytes = static_cast&lt;uint64_t&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="comment">// Use &quot;merge bytes per cycle&quot; to store &quot;requantize values per cycle&quot;.</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keywordtype">float</span> requantize_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(requantize_bytes) / params.merge_bytes_cycle;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="comment">// Recalculate total_cycles with the extra components.</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            total_cycles = mac_cycles + rowsum_cycles + requantize_cycles;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">return</span> total_cycles;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1d37407e8d582183b35dedbf7fa43b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d37407e8d582183b35dedbf7fa43b43">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const ndcoord_t &amp;&#160;</td>
          <td class="paramname"><em>work_range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ndcoord_t &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00318">318</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                                               {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        profiler prof;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        strategy strat(_args._ci);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        std::vector&lt;const To *&gt;         in_row_ptrs;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        std::vector&lt;const To * const *&gt; in_row_strings;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        std::vector&lt;unsigned int&gt;       string_lengths;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">// In convolution mode, we need input pointers.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            in_row_ptrs = std::vector&lt;const To *&gt;(strategy::out_height() * _args._Ksections, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            in_row_strings = std::vector&lt;const To * const *&gt;(_args._Ksections, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args._Ksections; i++) {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                in_row_strings[i] = &amp;(in_row_ptrs[i * strategy::out_height()]);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="comment">// In any indirect mode, we need the string lengths.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span> (_args._indirect_input) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            string_lengths = std::vector&lt;unsigned int&gt;(_args._Ksections, 0);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        assert(_B_transposed);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        static_assert(std::is_same&lt;To, Toi&gt;::value, <span class="stringliteral">&quot;gemm_native: Operand types must be the same.&quot;</span>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">//        static_assert(std::is_same&lt;Tr, Tri&gt;::value, &quot;gemm_native: Result types must be the same.&quot;);</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="comment">/* For now, each work item implies all the K for a given output</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">         * pixel (so we don&#39;t need to synchronize access to the output</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">         * array).  So separate the loop over K blocks here.  */</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax   = std::min(k0 + _k_block, _Ktotal);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax-k0, strategy::k_unroll());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0 == 0);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass = (kmax == _Ktotal);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_section = (k0 / _rounded_Ksize);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_offset  = (k0 % _rounded_Ksize);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = kern_k;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>=0;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = first_offset;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">if</span> (_args._indirect_input) {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keywordflow">while</span> (kleft) {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    <span class="comment">// When chopping into sections: the amount that goes into &#39;string_lengths&#39; is the amount to be</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="comment">// processed (excluding padding).  But the amount we subtract from &#39;kleft&#39; takes account of any</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    <span class="comment">// padding applied.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    string_lengths[<a class="code" href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>] = std::min(kleft, _args._Ksize - offset);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    kleft -= std::min(kleft, _rounded_Ksize - offset);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    sections++;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    offset=0;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <span class="keyword">auto</span> p = _window_range.iterator(work_range.get_position(0), work_range.get_position_end(0));</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="keywordflow">if</span> (p.done()) {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="comment">// Process rows either &#39;out_height&#39; rows at a time, or do all valid rows at once with a single kernel call.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="comment">// The separate quantizer path only handles one block of rows at a time (as it has to store sums and intermediate results).</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="comment">// THe convolution path only generates the pointers for one block of rows at a time.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> process_all_rows = (!SeparateQuantize &amp;&amp; !_convolver);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_start = p.dim(0) * strategy::out_height();</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_end   = process_all_rows ? std::min(p.dim0_max() * strategy::out_height(), _args._Msize) : std::min(m_start + strategy::out_height(), _args._Msize);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">//                const unsigned int m_end   = std::min(m_start + strategy::out_height(), _args._Msize);</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch   = p.dim(1);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n0      = p.dim(2) * _n_block;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nmax    = std::min(n0 + _n_block, _args._Nsize);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi   = p.dim(3);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                <span class="keyword">const</span> Toi *b_panel = _B_transposed +</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                     (multi * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args._Nsize, strategy::out_width()) * _Ktotal) +</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                     (k0 * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args._Nsize, strategy::out_width())) +</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                     (n0 * kern_k);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;               IndirectOutputArg&lt;Tr&gt; out_arg(this-&gt;_Cptr + (multi * this-&gt;_C_multi_stride) + (batch * this-&gt;_C_batch_stride) + (m_start * this-&gt;_ldc) + n0, this-&gt;_ldc);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(m_end - m_start) * kern_k * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(nmax-n0, strategy::out_width()));</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                <span class="keywordflow">if</span> (_indirect_buf) {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize&gt;::run</a>(</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                 prof,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;#endif</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                 strat, sections, string_lengths.data(),</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                 IndirectInputArg&lt;To&gt;(_indirect_buf + (multi * _args._nbatches * _args._Ksections) + (batch * _args._Ksections) + first_section, m_start, first_offset),</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, out_arg,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                 last_pass ? _args._act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                 _os, _col_bias+(multi * _args._Nsize), n0);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    <span class="keyword">auto</span> conv_cols = _convolver-&gt;process_columns(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride), this-&gt;_lda, k0, kmax, _rounded_Ksize);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos=0;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                    <span class="keyword">auto</span> conv_rows = conv_cols.process_rows(m_start, m_end - m_start);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    <span class="keywordflow">while</span> (!conv_rows.finished()) {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, conv_offset;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                        assert(pos &lt; sections);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                        std::tie(width, conv_offset) = conv_rows.next_block(&amp;(in_row_ptrs[pos * strategy::out_height()]));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                        <span class="keywordflow">if</span> (pos==0) {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            assert(conv_offset == first_offset);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                        assert(width == string_lengths[pos]);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        pos++;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                    }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                    assert(pos == sections);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize&gt;::run</a>(</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                 prof,</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;#endif</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                 strat, sections, string_lengths.data(),</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                 IndirectInputArg&lt;To&gt;(in_row_strings.data(), 0, first_offset),</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, out_arg,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                 last_pass ? _args._act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                 _os, _col_bias+(multi * _args._Nsize), n0);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="comment">// Length to process.  This needs to exclude padding, but &#39;kmax&#39; potentially includes it.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len = (std::min(_args._Ksize, kmax) - k0);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run_hybrid_kernel&lt;OutputStage, SeparateQuantize&gt;::run</a>(</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                 prof,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;#endif</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                 strat, 1, &amp;len,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                 IndirectInputArg&lt;To&gt;(this-&gt;_Aptr + (multi * this-&gt;_A_multi_stride) + (batch * this-&gt;_A_batch_stride) + m_start * this-&gt;_lda + k0, this-&gt;_lda),</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                 (m_end - m_start), (nmax - n0), kern_k, b_panel, out_arg,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                 (this-&gt;_bias &amp;&amp; first_pass) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) + n0 : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                 last_pass ? _args._act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>(),</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                 !first_pass,</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                 <span class="comment">// Quantization parameters</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                 _os, _col_bias+(multi * _args._Nsize), n0);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            } <span class="keywordflow">while</span> (process_all_rows ? p.next_dim1() : p.next_dim0());</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00846">helpers.h:846</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00070">Types.h:70</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="_n_e_g_e_m_m_assembly_dispatch_8cpp_xhtml_ad92c19f85e6eee3a06810736da11329d"><div class="ttname"><a href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a></div><div class="ttdeci">unsigned int sections</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_g_e_m_m_assembly_dispatch_8cpp_source.xhtml#l00053">NEGEMMAssemblyDispatch.cpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00482">482</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>

<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00045">arm_gemm::roundup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                                           {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="comment">// Start with actual pretransposed buffer...</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordtype">size_t</span> size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args._Nsize, strategy::out_width()) * _Ktotal * _args._nmulti * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="comment">// Space for result row pointers (not strictly needed any more but retained for indirect output testing)</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        size += _args._Msize * _args._nbatches * _args._nmulti * <span class="keyword">sizeof</span>(<span class="keyword">const</span> Tr *);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            size += get_col_sum_size();</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8f983ca114ef72d25515a8651ea1d0e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f983ca114ef72d25515a8651ea1d0e7">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ndrange_t get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00308">308</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                               {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span> { _window_range.total_size() };</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a98f134875119ebf78406ddc0f49eb5e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98f134875119ebf78406ddc0f49eb5e8">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a>&lt; strategy, To, Tr, OutputStage, SeparateQuantize &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae385dce1a98e03f0a3ca311f031e5110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae385dce1a98e03f0a3ca311f031e5110">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00496">496</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                                                                                              {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            Requantize32 *qp_ptr = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_args._nmulti; i++) {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="comment">// The input is assumed not to have any padding between sections, so straightforward Ksize * Ksections computation gets the total size.</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(*qp_ptr, _args._Nsize, _args._Ksize * _args._Ksections, B + (i * B_multi_stride), ldb, _col_bias + (i * _args._Nsize), _args._Ksize * _args._Ksections, i, 0);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        Toi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        strategy strat(_args._ci);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_args._nmulti; multi++) {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax=std::min(k0 + _k_block, _Ktotal);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = kmax - k0;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="comment">// We need to insert padding at the end of each K section.</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <span class="comment">// The computation needed is a little delicate - the coordinates from the block walker are expressed in</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="comment">// terms of the full, padded, _Ktotal.</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <span class="comment">// But we need to transform each section with reference to the original, unpadded, input, letting the</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <span class="comment">// transform pad each section as needed.</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                <span class="comment">// This is needed for computations below.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_section_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_args._Ksize, strategy::k_unroll());</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                <span class="comment">// The expected output format is also an entire &lt;out_width&gt; columns interleaved, then the next set of</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="comment">// columns, and so on.  This means, as we are breaking it up vertically, we have to do it one column at</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                <span class="comment">// a time.</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=0; x0 &lt; _args._Nsize; x0 += strategy::out_width() ){</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0 + strategy::out_width(), _args._Nsize);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <span class="comment">// Track where we are and how much work is left.</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kpos  = k0;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = k_size;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    <span class="keywordflow">while</span> (kleft) {</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                        <span class="comment">// Which section are we in?  Based on the rounded-up section size.</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_section_base = kpos / rounded_section_size;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                        <span class="comment">// How far into the section are we?</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_offset = kpos - (k_section_base * rounded_section_size);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        <span class="comment">// We will either copy the rest of this section, or to the end of the requested length.</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_length = std::min(_args._Ksize - k_offset, kleft);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        strat.transforms.PrepareB(buffer, B + (multi * B_multi_stride), ldb,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                                  x0, xmax,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                                  (k_section_base * _args._Ksize) + k_offset,               <span class="comment">// K starting point - compute row to read based on our section and the true section length.</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                                  (k_section_base * _args._Ksize) + k_offset + k_length);   <span class="comment">// K end point - starting point plus length computed above.</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                        <span class="comment">// We need to modify our position based on the ROUNDED version of what we just did.</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padded_length = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_length, strategy::k_unroll());</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                        buffer += strategy::out_width() * padded_length;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                        kpos  += padded_length;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        kleft -= padded_length;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                }</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            }</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae7e6d203d0e3e46ebd521951b72c6f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7e6d203d0e3e46ebd521951b72c6f7c">&#9670;&nbsp;</a></span>set_convolution_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_convolution_parameters </td>
          <td>(</td>
          <td class="paramtype">ConvolutionParameters&#160;</td>
          <td class="paramname"><em>parms</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00636">636</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                                                          {</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        assert(parms.input_channels == _args._Ksize);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        _convolver = std::unique_ptr&lt;convolver&lt;To&gt;&gt;(<span class="keyword">new</span> convolver&lt;To&gt;(parms));</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a82b688818137467809617daf73ffdc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82b688818137467809617daf73ffdc11">&#9670;&nbsp;</a></span>set_indirect_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_indirect_parameters </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>string_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *const *const *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00631">631</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                                                            {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        assert(string_len == _args._Ksize);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        _indirect_buf = ptr;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00568">568</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                                            {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-transposing cases get_col_sum_size() == 0</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        _col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a4f282c5814fcd207308c4737a1fc567b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f282c5814fcd207308c4737a1fc567b">&#9670;&nbsp;</a></span>set_quantized_bias()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_quantized_bias </td>
          <td>(</td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bias_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00622">622</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                                                                    {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            Requantize32 *qp = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            qp-&gt;bias = bias;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            qp-&gt;bias_multi_stride = bias_multi_stride;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1bb76b8a32e09fb5ffffd66e04d7f741"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bb76b8a32e09fb5ffffd66e04d7f741">&#9670;&nbsp;</a></span>supports_dynamic_scheduling()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool supports_dynamic_scheduling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml#l00313">313</a> of file <a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                      {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__hybrid__indirect_8hpp_source.xhtml">gemm_hybrid_indirect.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_hybrid_indirect.xhtml">GemmHybridIndirect</a></li>
    <li class="footer">Generated on Thu Feb 25 2021 17:17:55 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
