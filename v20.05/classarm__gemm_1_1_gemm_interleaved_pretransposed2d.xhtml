<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_interleaved_pretransposed2d__coll__graph.svg" width="258" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1a12e7d5e0236aab8e417197704e4d81"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a1a12e7d5e0236aab8e417197704e4d81">GemmInterleavedPretransposed2d</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;)=delete</td></tr>
<tr class="separator:a1a12e7d5e0236aab8e417197704e4d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a58b10b9a21d1ad3dbb9cf9a1b1e8fdac">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> &amp;)=delete</td></tr>
<tr class="separator:a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63b1e682fe5886b27199ff95fb68660e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a63b1e682fe5886b27199ff95fb68660e">GemmInterleavedPretransposed2d</a> (const GemmArgs &amp;args)</td></tr>
<tr class="separator:a63b1e682fe5886b27199ff95fb68660e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memItemLeft" align="right" valign="top">ndrange_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a> () const override</td></tr>
<tr class="separator:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">set_nthreads</a> (int nthreads) override</td></tr>
<tr class="separator:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18e9a188320dd783a61cb41ff6ba357c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a18e9a188320dd783a61cb41ff6ba357c">execute</a> (const ndcoord_t &amp;work_range, const ndcoord_t &amp;thread_locator, int threadid) override</td></tr>
<tr class="separator:a18e9a188320dd783a61cb41ff6ba357c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace003f90d5d728a19d96f697db05f3dc"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ace003f90d5d728a19d96f697db05f3dc">get_working_size</a> () const override</td></tr>
<tr class="separator:ace003f90d5d728a19d96f697db05f3dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee006b8384820aa25720e84b91b32a27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#aee006b8384820aa25720e84b91b32a27">set_working_space</a> (void *working_space) override</td></tr>
<tr class="separator:aee006b8384820aa25720e84b91b32a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae385dce1a98e03f0a3ca311f031e5110"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:ae385dce1a98e03f0a3ca311f031e5110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47bdcc5ae45e222b87e2f1cbd0d24157"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml#a47bdcc5ae45e222b87e2f1cbd0d24157">~GemmInterleavedPretransposed2d</a> () override</td></tr>
<tr class="separator:a47bdcc5ae45e222b87e2f1cbd0d24157"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr&gt;<br />
class arm_gemm::GemmInterleavedPretransposed2d&lt; strategy, To, Tr &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1a12e7d5e0236aab8e417197704e4d81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a12e7d5e0236aab8e417197704e4d81">&#9670;&nbsp;</a></span>GemmInterleavedPretransposed2d() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&lt; strategy, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a63b1e682fe5886b27199ff95fb68660e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63b1e682fe5886b27199ff95fb68660e">&#9670;&nbsp;</a></span>GemmInterleavedPretransposed2d() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> </td>
          <td>(</td>
          <td class="paramtype">const GemmArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00316">316</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    :    _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    ,    _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    ,    _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    ,    _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    ,    _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    ,    _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    ,    _trA(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._trA)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    ,    _trB(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._trB)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    ,    _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    ,    _maxthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    ,    _nthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads) </div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// Work out the rounded size of M - needed for some buffers.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    ,    _Mround_div ( <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Msize, strategy::out_height()) )</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    ,    _Mround     ( _Mround_div * strategy::out_height()     )</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    ,    _Nround_div ( <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, strategy::out_width()) )</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    ,    _Nround     ( _Nround_div * strategy::out_width()     )</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        assert(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._pretransposed_hint);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        assert(_maxthreads &gt; 0);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = _ci-&gt;get_L1_cache_size();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = _ci-&gt;get_L2_cache_size();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">// Work out blocking parameters, or override from provided GemmConfig</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;inner_block_size) {</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            _k_block = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;inner_block_size;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="comment">// k_block: Find out how much of the larger array can be loaded into half the cache.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="comment">// This should account for associative caches.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            _k_block = (L1_size / 2) / (<span class="keyword">sizeof</span>(Toi) * (std::max(strategy::out_width(), strategy::out_height())));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="comment">// Needs to be (at least a single) multiple of the K unroll level.</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            _k_block /= strategy::k_unroll();</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            _k_block = std::max(_k_block, 1U) * strategy::k_unroll();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_k_blocks = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Ksize, _k_block);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            _k_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Ksize, num_k_blocks);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            _k_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_k_block, strategy::k_unroll());</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            _k_block *= strategy::k_unroll();</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg &amp;&amp; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            _x_block = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._cfg-&gt;outer_block_size;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="comment">// Don&#39;t allocate more than 90% of the L2 to allow for overheads, and subtract off the L1 contents.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            _x_block = (((L2_size * 9) / 10) - (_k_block * <span class="keyword">sizeof</span>(Toi) * (strategy::out_width() + strategy::out_height()))) /</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                      (<span class="keyword">sizeof</span>(Toi) * _k_block);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="comment">// Needs to be (at least a single) multiple of the kernel output width.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            _x_block /= strategy::out_width();</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            _x_block = std::max(_x_block, 1U) * strategy::out_width();</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_x_blocks = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, _x_block);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            _x_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_Nsize, num_x_blocks);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            _x_block = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(_x_block, strategy::out_width());</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            _x_block *= strategy::out_width();</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="ttc" id="utils_8hpp_xhtml_aa4508679e1d089c2bdcf000f72357683"><div class="ttname"><a href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00038">utils.hpp:38</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner.py:555</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00555">GemmTuner::args</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00038">iceildiv()</a>.</p>

</div>
</div>
<a id="a47bdcc5ae45e222b87e2f1cbd0d24157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47bdcc5ae45e222b87e2f1cbd0d24157">&#9670;&nbsp;</a></span>~GemmInterleavedPretransposed2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00511">511</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{ }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00451">451</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                             {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00455">455</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                                  {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">return</span> _B_transposed==<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a18e9a188320dd783a61cb41ff6ba357c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18e9a188320dd783a61cb41ff6ba357c">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const ndcoord_t &amp;&#160;</td>
          <td class="paramname"><em>work_range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ndcoord_t &amp;&#160;</td>
          <td class="paramname"><em>thread_locator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threadid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00400">400</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                                                                                      {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment">/* This particular GEMM implementation can only be broken up over the M &amp; N</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">         * dimensions, we inform the frame work of this limitation via the get_window_size function</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        assert(<a class="code" href="namespacearm__gemm.xhtml#a5ae6e68c54ce2851dea2ed20ac952850">ndrange_popcount</a>(work_range) &lt;= 2);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_start = work_range.get_position(0);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_start = work_range.get_position(1);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_size  = work_range.get_size(0);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_size  = work_range.get_size(1);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_end   = m_start + m_size;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_end   = n_start + n_size;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> m_threadid = thread_locator.get_position(0);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_threadid = thread_locator.get_position(1);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        execute_pretranspose(m_start, m_end, n_start, n_end, threadid, m_threadid, n_threadid);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div><div class="ttc" id="namespacearm__gemm_xhtml_a5ae6e68c54ce2851dea2ed20ac952850"><div class="ttname"><a href="namespacearm__gemm.xhtml#a5ae6e68c54ce2851dea2ed20ac952850">arm_gemm::ndrange_popcount</a></div><div class="ttdeci">std::size_t ndrange_popcount(const NDRange&lt; N &gt; &amp;ndr)</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00175">ndrange.hpp:175</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="ndrange_8hpp_source.xhtml#l00175">arm_gemm::ndrange_popcount()</a>.</p>

</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00460">460</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                                           {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordtype">size_t</span> total=0;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            x_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            k_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            total += x_size * k_size * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">return</span> total;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    }</div><div class="ttc" id="utils_8hpp_xhtml_aa4508679e1d089c2bdcf000f72357683"><div class="ttname"><a href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00038">utils.hpp:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00038">iceildiv()</a>.</p>

</div>
</div>
<a id="a8f983ca114ef72d25515a8651ea1d0e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f983ca114ef72d25515a8651ea1d0e7">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ndrange_t get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00388">388</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                               {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordtype">unsigned</span> m = (_Mround / strategy::out_height()) * _nbatches;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordtype">unsigned</span> n = _Nround_div;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">return</span> { m, n, 1u, 1u, 1u, 1u };</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ace003f90d5d728a19d96f697db05f3dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace003f90d5d728a19d96f697db05f3dc">&#9670;&nbsp;</a></span>get_working_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t get_working_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00419">419</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                               {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="comment">/* Because we do not know how schedular will break up</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">         * the task, we need to ensure that alloc enough</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">         * space to be able to handle the case where every thread</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">         * is parallelised across B AND also every thrread is parallelised across A</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">         * If we parallelise across A, then we only need one buffer of A and 64 buffers of B</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">         * If we parallelise across B, then we only need 64 buffer of B and</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">return</span> get_c_working_size() * _maxthreads</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;             + get_a_working_size() * _maxthreads</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;             + 64; <span class="comment">//to account for cacheline alignment</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a58b10b9a21d1ad3dbb9cf9a1b1e8fdac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58b10b9a21d1ad3dbb9cf9a1b1e8fdac">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a>&lt; strategy, To, Tr &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae385dce1a98e03f0a3ca311f031e5110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae385dce1a98e03f0a3ca311f031e5110">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00482">482</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                                                                                              {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        Toi *buffer = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        strategy strat(_ci);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = (current.xmax() - current.x0());</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="comment">/* Round sizes up as needed. */</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            x_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(x_size, strategy::out_width());</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            x_size *= strategy::out_width();</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            k_size = <a class="code" href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a>(k_size, strategy::k_unroll());</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            k_size *= strategy::k_unroll();</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                      current.x0(), current.xmax(), current.k0(), current.kmax(), _trB);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            buffer += (x_size * k_size);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        } <span class="keywordflow">while</span> (current.advance());</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    }</div><div class="ttc" id="utils_8hpp_xhtml_aa4508679e1d089c2bdcf000f72357683"><div class="ttname"><a href="utils_8hpp.xhtml#aa4508679e1d089c2bdcf000f72357683">iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00038">utils.hpp:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00038">iceildiv()</a>.</p>

</div>
</div>
<a id="a468e9c50d4decc2ba86f9bd393ba27d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a468e9c50d4decc2ba86f9bd393ba27d6">&#9670;&nbsp;</a></span>set_nthreads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_nthreads </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nthreads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00396">396</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                             {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        _nthreads = std::min(nthreads, _maxthreads);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00507">507</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                                            {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        _B_transposed = reinterpret_cast&lt;Toi *&gt;(in_buffer);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aee006b8384820aa25720e84b91b32a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee006b8384820aa25720e84b91b32a27">&#9670;&nbsp;</a></span>set_working_space()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_working_space </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>working_space</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml#l00434">434</a> of file <a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                                         {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="comment">// Make sure everything ends up cache line aligned</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        int8_t *working_space_bytes = reinterpret_cast&lt;int8_t *&gt;(working_space);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        intptr_t working_space_int  = reinterpret_cast&lt;intptr_t&gt;(working_space);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordtype">size_t</span> diff=0;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0x3F) {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            diff = 0x40 - (working_space_int &amp; 0x3F);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        working_space_bytes += diff;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        _working_space = reinterpret_cast&lt;void *&gt;(working_space_bytes);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__interleaved__pretransposed__2d_8hpp_source.xhtml">gemm_interleaved_pretransposed_2d.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_interleaved_pretransposed2d.xhtml">GemmInterleavedPretransposed2d</a></li>
    <li class="footer">Generated on Thu May 28 2020 12:10:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
