<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Gemm Tuner</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('md_examples_gemm_tuner__r_e_a_d_m_e.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Gemm Tuner </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h2>Introduction</h2>
<p>This is a set of 2 script tools for tuning the performance of OpenCL GEMM kernels (limited to Convolution layer functions only for now). Specifically, we tune 3 GEMM kernels, each has a different implementation <b>strategy</b> of the GEMM operation: <b>native</b>, <b>reshaped</b>, <b>reshaped only rhs</b>. The details of these strategies can be found in the documentations of the corresponding kernels: <b>CLGEMMMatrixMultiplyNativeKernel</b>, <b>CLGEMMMatrixMultiplyReshapedKernel</b> and <b>CLGEMMMatrixMultiplyReshapedOnlyRHSKernel</b>.</p>
<p>The outputs of the tuning process are 1 optimal configuration (called <b>GEMM Configuration</b> or <b>GEMMConfig</b>, for more details see Approach section) for each of the 3 strategies.</p>
<h2>Location</h2>
<p>The 2 scripts <b>benchmark_gemm_examples.sh</b> and <b><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a></b> can be found under $ACL_ROOT/examples/gemm_tuner.</p>
<h2>Pre-requisite</h2>
<ul>
<li>A target device to be tuned, plus the following on the device:<ul>
<li>Android or Linux OS</li>
<li>Bash shell</li>
<li>Built ACL with benchmark examples binaries</li>
<li>benchmark_gemm_examples.sh script</li>
<li><p class="startli">gemm shape file</p>
<p class="startli">A csv file containing the <b>GEMMParam search list</b>. This is the list of GEMMParams/gemm shapes that we're interested in (For more details see Approach section). The default list is prepared by ACL developers in advance and can be provided on request.</p>
<p class="startli">The format is described as:</p>
<p class="startli">A headerless csv file with fields separated by commas and commas only (there cannot be whitespaces around each field).</p>
<p class="startli">Note also comments and extraneous empty lines are not permitted.</p>
<p class="startli">A gemm shape is a list of 4 positive integers &lt;M, N, K, B&gt; describing the shapes of the two matrices (LHS and RHS) with:</p>
<p class="startli">M - Number of lhs matrix rows</p>
<p class="startli">N - Number of rhs matrix columns</p>
<p class="startli">K - Number of lhs matrix columns/rhs matrix rows</p>
<p class="startli">B - Batch size</p>
<p class="startli">An example gemm shape file looks like: </p><div class="fragment"><div class="line">100,100,30,1</div><div class="line">100,100,30,3</div><div class="line">...</div></div><!-- fragment --></li>
<li><p class="startli">gemm config file</p>
<p class="startli">A csv file containing the <b>GEMMConfig search list</b>. This is the list of candidate GEMMConfigs among which we search for the optimal one. <b>Note that we have a different list for each strategy.</b> The default lists are prepared by ACL developers in advance and can be provided on request.</p>
<p class="startli">The format of the file for each strategy is the same:</p>
<p class="startli">A headerless csv file with fields separated by commas and commas only (there cannot be whitespaces around each field). Note also comments and extraneous empty lines are not permitted.</p>
<p class="startli">However the fields of GEMMConfig differ for each strategy:</p><ul>
<li><p class="startli">Strategy <b>native</b>: A gemm config is a list of 3 positive integers &lt;m0, n0, k0&gt;, with:</p>
<p class="startli">m0 - Number of rows processed by the matrix multiplication</p>
<p class="startli">n0 - Number of columns processed by the matrix multiplication</p>
<p class="startli">k0 - Number of partial accumulations performed by the matrix multiplication</p>
<p class="startli">Only the following configurations of M0, N0 and K0 are currently supported:</p>
<p class="startli">M0 = 1, 2, 3, 4, 5, 6, 7, 8</p>
<p class="startli">N0 = 2, 3, 4, 8, 16</p>
<p class="startli">K0 = 2, 3, 4, 8, 16</p>
<p class="startli">An example gemm config file looks like: </p><div class="fragment"><div class="line">1,4,4</div><div class="line">2,3,8</div><div class="line">...</div></div><!-- fragment --></li>
<li><p class="startli">Strategy <b>reshaped_rhs_only</b>:</p>
<p class="startli">A gemm config is a list of 4 positive integers &lt;m0, n0, k0, h0&gt; and 2 boolean values interleave_rhs and transpose_rhs, with:</p>
<p class="startli">m0 - Number of rows processed by the matrix multiplication</p>
<p class="startli">n0 - Number of columns processed by the matrix multiplication</p>
<p class="startli">k0 - Number of partial accumulations performed by the matrix multiplication</p>
<p class="startli">h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row</p>
<p class="startli">interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)</p>
<p class="startli">transpose_rhs - Transpose rhs matrix (1) / Do not transpose rhs matrix (0)</p>
<p class="startli">Only the following configurations of M0, N0 and K0 are currently supported:</p>
<p class="startli">M0 = 1, 2, 3, 4, 5, 6, 7, 8</p>
<p class="startli">N0 = 2, 3, 4, 8, 16</p>
<p class="startli">K0 = 2, 3, 4, 8, 16</p>
<p class="startli">H0 &gt;= 1</p>
<p class="startli">An example gemm config file looks like: </p><div class="fragment"><div class="line">4,4,4,1,1,1</div><div class="line">4,4,4,3,1,0</div><div class="line">...</div></div><!-- fragment --></li>
<li><p class="startli">Strategy <b>reshaped</b>:</p>
<p class="startli">A gemm config is a list of 5 positive integers &lt;m0, n0, k0, v0, h0&gt; and 3 boolean values interleave_lhs, interleave_rhs and transpose_rhs, with:</p>
<p class="startli">m0 - Number of rows processed by the matrix multiplication</p>
<p class="startli">n0 - Number of columns processed by the matrix multiplication</p>
<p class="startli">k0 - Number of partial accumulations performed by the matrix multiplication</p>
<p class="startli">v0 - Number of vertical blocks of size (m0xk0) stored on the same output row</p>
<p class="startli">h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row</p>
<p class="startli">interleave_lhs - Interleave lhs matrix (1) / Do not interleave lhs matrix (0)</p>
<p class="startli">interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)</p>
<p class="startli">transpose_rhs - Transpose rhs matrix but not lhs matrix (1) / Do not transpose rhs matrix but do transpose lhs matrix (0)</p><ul>
<li><p class="startli">If rhs matrix is transposed only the following configurations are currently supported:</p>
<p class="startli">M0 = 2, 3, 4, 5, 6, 7, 8</p>
<p class="startli">N0 = 2, 3, 4, 8, 16</p>
<p class="startli">K0 = 2, 3, 4, 8, 16</p>
<p class="startli">V0 &gt;= 1</p>
<p class="startli">H0 &gt;= 1</p>
</li>
<li><p class="startli">If lhs matrix is transposed only the following configurations are currently supported:</p>
<p class="startli">M0 = 2, 3, 4, 8</p>
<p class="startli">N0 = 2, 3, 4, 8, 16</p>
<p class="startli">K0 = 2, 3, 4, 8, 16</p>
<p class="startli">V0 &gt;= 1</p>
<p class="startli">H0 &gt;= 1</p>
</li>
</ul>
<p class="startli">An example gemm config file looks like: </p><div class="fragment"><div class="line">4,4,4,1,3,1,1,1</div><div class="line">4,4,4,3,3,1,1,0</div><div class="line">...</div></div><!-- fragment --></li>
</ul>
</li>
</ul>
</li>
<li>A host machine, plus these on the machine:<ul>
<li>python &gt;= 3.6</li>
<li><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a> script</li>
</ul>
</li>
</ul>
<h2>Usage</h2>
<p>The tuning stage consists of 2 steps:</p>
<ol type="1">
<li><p class="startli">Run benchmarks:</p>
<p class="startli">Run the shell script (<b>benchmark_gemm_examples.sh</b>) on your <b>target device</b>. Note that all the built benchmark examples have to be present on your target device prior to running. The benchmark results will be saved to json files in an output directory. </p><div class="fragment"><div class="line">Usage: benchmark_gemm_examples.sh [-h] -s &lt;strategy&gt; -e &lt;example_binary_dir&gt; -g &lt;gemm_shape_file&gt;</div><div class="line">-c &lt;gemm_config_file&gt; [-o &lt;out_dir&gt;]</div><div class="line"></div><div class="line">Options:</div><div class="line">        -h</div><div class="line">        Print help messages. If a strategy is specified with -s &lt;strategy&gt;, then only display messages relevant</div><div class="line">        to that strategy. Otherwise if no strategy is specified, display messages for all available strategies.</div><div class="line"></div><div class="line">        -s &lt;strategy&gt;</div><div class="line">        Strategy option.</div><div class="line">        Options: native reshaped_rhs_only reshaped.</div><div class="line"></div><div class="line">        -e &lt;example_binary_dir&gt;</div><div class="line">        Path to directory that holds all example binaries</div><div class="line"></div><div class="line">        -g &lt;gemm_shape_file&gt;</div><div class="line">        Path to gemm shape csv file</div><div class="line"></div><div class="line">        -c &lt;gemm_config_file&gt;</div><div class="line">        Path to gemm config csv file</div><div class="line"></div><div class="line">        -o &lt;out_dir&gt;</div><div class="line">        Path to output directory that holds output json files</div><div class="line">        Default: out</div></div><!-- fragment --></li>
<li><p class="startli">Run analyser:</p>
<p class="startli">Run the python script (<b><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a></b>) on your <b>host machine</b>. You'll need to transfer all the benchmark result json files generated from the previous step to your host machine beforehand. The script will output the best configuration, along with some analysis statistics for each strategy, and optionally save the parsed benchmark results into csv files (one for each strategy) for further analysis. </p><div class="fragment"><div class="line">Usage: GemmTuner.py [-h] -b PATH [-o PATH] [-t TOLERANCE] [-D]</div><div class="line"></div><div class="line">CL GEMM Tuner</div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -b PATH, --benchmark_results PATH</div><div class="line">                        Path to benchmark result directory, where benchmark</div><div class="line">                        result json files have a file extension of</div><div class="line">                        &#39;gemmtuner_benchmark&#39;</div><div class="line">  -o PATH, --output_dir PATH</div><div class="line">                        Path to directory that holds output csv files. One per</div><div class="line">                        strategy</div><div class="line">  -t TOLERANCE, --tolerance TOLERANCE</div><div class="line">                        For testing if two GEMMConfigs are equivalent in terms</div><div class="line">                        of performance. The tolerance is OpenCL timer in</div><div class="line">                        milliseconds. Recommended value: &lt;= 0.1 ms</div><div class="line">  -D, --debug           Enable script debugging output</div></div><!-- fragment --></li>
</ol>
<h2>Approach</h2>
<p>This section gives a brief description and rationale of the approach adopted by the current version of GEMM Tuner.</p>
<p>As explained in the Introduction section, the outputs of the tuner are 1 optimal GEMMConfig for each strategy. This is because we can only integrate 1 GEMMConfig for each strategy in ACL at compile time. In theory, however, the optimal GEMMConfig also depends on different parameters of GEMM (called GEMM Parameter or GEMMParam, e.g.: the shape of the operation); thus ideally, for each strategy, the optimal configurations should be a mapping from GEMMParam to GEMMConfig instead of a single GEMMConfig.</p>
<p>To address this issue, we ensure the one single optimal GEMMConfig can generalise well to all potential GEMMParams (or at least the ones that we care about). The approach we adopt involves a preliminary stage where a collection of common GEMMParams (GEMM shapes from popular networks) are compiled. Then, to reduce the final tuning time, rather contradictorily, we spend a lot of time searching for near-optimal GEMMConfigs for each GEMMParam first, and then discard redundant GEMMParams which share similar optimal GEMMConfigs with others. The resultant list of GEMMParams is called a <b>GEMMParam search list</b>, as in these GEMMParams are typical enough to capture the space of GEMMParams that we care about.</p>
<p>During this preliminary stage we also produce a list of good GEMMConfigs that can be used to search for the optimal one in the actual tuning stage. This, again, is to reduce the tuning time, and the resultant list is called a <b>GEMMConfig search list</b>.</p>
<p>The GEMMParam search list and the GEMMConfig search list are investigated and prepared by the developers; the users of GEMM tuner need not worry about producing them, but they need to obtain them prior to running the tuner.</p>
<p>Once these two lists (2 for each strategy, so 6 in total) are obtained, they can be fed to the tuner, to produce the optimal GEMMConfig(s). </p>
</div></div><!-- PageDoc -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 28 2020 12:09:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
