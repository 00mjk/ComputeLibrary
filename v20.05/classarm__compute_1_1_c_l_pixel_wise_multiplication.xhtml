<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLPixelWiseMultiplication Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLPixelWiseMultiplication Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to run <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml">CLPixelWiseMultiplicationKernel</a>.  
 <a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_pixel_wise_multiplication_8h_source.xhtml">CLPixelWiseMultiplication.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLPixelWiseMultiplication:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_pixel_wise_multiplication__coll__graph.svg" width="190" height="187"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acfd5a4c9ff5fca09c047124ccc910c3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input1, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input2, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> overflow_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info=<a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>())</td></tr>
<tr class="memdesc:acfd5a4c9ff5fca09c047124ccc910c3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's inputs, output and convertion policy.  <a href="#acfd5a4c9ff5fca09c047124ccc910c3b">More...</a><br /></td></tr>
<tr class="separator:acfd5a4c9ff5fca09c047124ccc910c3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99b95a175203c56994a1bbe8cc1b228f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#a99b95a175203c56994a1bbe8cc1b228f">configure</a> (const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input1, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input2, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> overflow_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info=<a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>())</td></tr>
<tr class="memdesc:a99b95a175203c56994a1bbe8cc1b228f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the kernel's inputs, output and convertion policy.  <a href="#a99b95a175203c56994a1bbe8cc1b228f">More...</a><br /></td></tr>
<tr class="separator:a99b95a175203c56994a1bbe8cc1b228f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_c_l_simple_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a></td></tr>
<tr class="memitem:aeb64c2dd56b7b5921efe107513effaa9 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#aeb64c2dd56b7b5921efe107513effaa9">ICLSimpleFunction</a> (<a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:aeb64c2dd56b7b5921efe107513effaa9 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#aeb64c2dd56b7b5921efe107513effaa9">More...</a><br /></td></tr>
<tr class="separator:aeb64c2dd56b7b5921efe107513effaa9 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ab9812ab0ef822035d5b33eefd8e75 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ac2ab9812ab0ef822035d5b33eefd8e75">ICLSimpleFunction</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;)=delete</td></tr>
<tr class="memdesc:ac2ab9812ab0ef822035d5b33eefd8e75 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ac2ab9812ab0ef822035d5b33eefd8e75">More...</a><br /></td></tr>
<tr class="separator:ac2ab9812ab0ef822035d5b33eefd8e75 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4124c4eace6e9141a702a13338fdc614 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a4124c4eace6e9141a702a13338fdc614">ICLSimpleFunction</a> (<a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a4124c4eace6e9141a702a13338fdc614 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a4124c4eace6e9141a702a13338fdc614">More...</a><br /></td></tr>
<tr class="separator:a4124c4eace6e9141a702a13338fdc614 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1b50b6d8c633c9f858260b5960747b7 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab1b50b6d8c633c9f858260b5960747b7">operator=</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;)=delete</td></tr>
<tr class="memdesc:ab1b50b6d8c633c9f858260b5960747b7 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#ab1b50b6d8c633c9f858260b5960747b7">More...</a><br /></td></tr>
<tr class="separator:ab1b50b6d8c633c9f858260b5960747b7 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eb941d1c73752cccece9fb065925e81 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a5eb941d1c73752cccece9fb065925e81">operator=</a> (<a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml">ICLSimpleFunction</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a5eb941d1c73752cccece9fb065925e81 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a5eb941d1c73752cccece9fb065925e81">More...</a><br /></td></tr>
<tr class="separator:a5eb941d1c73752cccece9fb065925e81 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92fe532c342ae2b07956a65520c05362 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a> () override final</td></tr>
<tr class="memdesc:a92fe532c342ae2b07956a65520c05362 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">More...</a><br /></td></tr>
<tr class="separator:a92fe532c342ae2b07956a65520c05362 inherit pub_methods_classarm__compute_1_1_i_c_l_simple_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">prepare</a> ()</td></tr>
<tr class="memdesc:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">More...</a><br /></td></tr>
<tr class="separator:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab8a2affed84fcb02163a828fd8a37bfd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, float scale, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> overflow_policy, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info=<a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>())</td></tr>
<tr class="memdesc:ab8a2affed84fcb02163a828fd8a37bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml">CLPixelWiseMultiplication</a>.  <a href="#ab8a2affed84fcb02163a828fd8a37bfd">More...</a><br /></td></tr>
<tr class="separator:ab8a2affed84fcb02163a828fd8a37bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to run <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml">CLPixelWiseMultiplicationKernel</a>. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_pixel_wise_multiplication_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_c_l_pixel_wise_multiplication_8h_source.xhtml">CLPixelWiseMultiplication.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="acfd5a4c9ff5fca09c047124ccc910c3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfd5a4c9ff5fca09c047124ccc910c3b">&#9670;&nbsp;</a></span>configure() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>overflow_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em> = <code><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's inputs, output and convertion policy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">input1</td><td>An input tensor. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/F32. The input tensor is [in, out] because its <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> might be modified inside the kernel in case of broadcasting of dimension 0. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">input2</td><td>An input tensor. Data types supported: same as <code>input1</code>. The input tensor is [in, out] because its <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> might be modified inside the kernel in case of broadcasting of dimension 0. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>The output tensor. Data types supported:<ul>
<li>U8, only if both input are U8</li>
<li>QASYMM8, only if both inputs are QASYMM8</li>
<li>QASYMM8_SIGNED, only if both inputs are QASYMM8_SIGNED</li>
<li>S16</li>
<li>QSYMM16, only if both inputs are QSYMM16</li>
<li>S32, only if both inputs are QSYMM16</li>
<li>F16</li>
<li>F32 </li>
</ul>
</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to apply after multiplication. Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">overflow_policy</td><td>Overflow policy. Supported overflow policies: Wrap, Saturate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. Supported rounding modes: to zero, to nearest even. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>(Optional) Activation layer information in case of a fused activation. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml">CLPixelWiseMultiplication.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">scale</a>, overflow_policy, rounding_policy, act_info);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_pixel_wise_multiplication_xhtml_acfd5a4c9ff5fca09c047124ccc910c3b"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">arm_compute::CLPixelWiseMultiplication::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and convertion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00034">CLPixelWiseMultiplication.cpp:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00971">CLKernelLibrary.cpp:971</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a8c699547c10336829d3a6b6105cd94f3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">arm_compute::test::validation::reference::scale</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; scale(const SimpleTensor&lt; T &gt; &amp;src, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value, SamplingPolicy sampling_policy, bool ceil_policy_scale, bool align_corners)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">Scale.cpp:187</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l00971">CLKernelLibrary::get()</a>, and <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">arm_compute::test::validation::reference::scale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00070">CLLSTMLayerQuantized::configure()</a>.</p>

</div>
</div>
<a id="a99b95a175203c56994a1bbe8cc1b228f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99b95a175203c56994a1bbe8cc1b228f">&#9670;&nbsp;</a></span>configure() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td>
          <td class="paramname"><em>compile_context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>overflow_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em> = <code><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialise the kernel's inputs, output and convertion policy. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">compile_context</td><td>The compile context to be used. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">input1</td><td>An input tensor. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/F32. The input tensor is [in, out] because its <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> might be modified inside the kernel in case of broadcasting of dimension 0. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">input2</td><td>An input tensor. Data types supported: same as <code>input1</code>. The input tensor is [in, out] because its <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a> might be modified inside the kernel in case of broadcasting of dimension 0. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>The output tensor, Data types supported: same as <code>input1</code>. Note: U8 requires both inputs to be U8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to apply after multiplication. Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">overflow_policy</td><td>Overflow policy. Supported overflow policies: Wrap, Saturate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. Supported rounding modes: to zero, to nearest even. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>(Optional) Activation layer information in case of a fused activation. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml">CLPixelWiseMultiplication.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span> k = arm_compute::support::cpp14::make_unique&lt;CLPixelWiseMultiplicationKernel&gt;();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    k-&gt;configure(compile_context, input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">scale</a>, overflow_policy, rounding_policy, act_info);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    _kernel = std::move(k);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span>(output-&gt;info()-&gt;dimension(0) &gt; 1)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        ICLTensor *broadcasted_info = (input1-&gt;info()-&gt;dimension(0) == 1) ? input1 : input2;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">if</span>(broadcasted_info-&gt;info()-&gt;dimension(0) == 1)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            _border_handler.configure(compile_context, broadcasted_info, _kernel-&gt;border_size(), <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a8c699547c10336829d3a6b6105cd94f3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">arm_compute::test::validation::reference::scale</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; scale(const SimpleTensor&lt; T &gt; &amp;src, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value, SamplingPolicy sampling_policy, bool ceil_policy_scale, bool align_corners)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">Scale.cpp:187</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::REPLICATE</a>, and <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">arm_compute::test::validation::reference::scale()</a>.</p>

</div>
</div>
<a id="ab8a2affed84fcb02163a828fd8a37bfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8a2affed84fcb02163a828fd8a37bfd">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>overflow_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>&#160;</td>
          <td class="paramname"><em>rounding_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em> = <code><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml">CLPixelWiseMultiplication</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>An input tensor info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input2</td><td>An input tensor info. Data types supported: same as <code>input1</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>The output tensor info. Data types supported:<ul>
<li>U8, only if both input are U8</li>
<li>QASYMM8, only if both inputs are QASYMM8</li>
<li>QASYMM8_SIGNED, only if both inputs are QASYMM8_SIGNED</li>
<li>S16</li>
<li>QSYMM16, only if both inputs are QSYMM16</li>
<li>S32, only if both inputs are QSYMM16</li>
<li>F16</li>
<li>F32 </li>
</ul>
</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to apply after multiplication. Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">overflow_policy</td><td>Overflow policy. Supported overflow policies: Wrap, Saturate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rounding_policy</td><td>Rounding policy. Supported rounding modes: to zero, to nearest even. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>(Optional) Activation layer information in case of a fused activation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml">CLPixelWiseMultiplication.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">scale</a>, overflow_policy, rounding_policy, act_info);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel_xhtml_ab8a2affed84fcb02163a828fd8a37bfd"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">arm_compute::CLPixelWiseMultiplicationKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLPixelWiseMultiplicatio...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00259">CLPixelWiseMultiplicationKernel.cpp:259</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a8c699547c10336829d3a6b6105cd94f3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a8c699547c10336829d3a6b6105cd94f3">arm_compute::test::validation::reference::scale</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; scale(const SimpleTensor&lt; T &gt; &amp;src, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value, SamplingPolicy sampling_policy, bool ceil_policy_scale, bool align_corners)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">Scale.cpp:187</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00187">arm_compute::test::validation::reference::scale()</a>, and <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00259">CLPixelWiseMultiplicationKernel::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00268">CLLSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_pixel_wise_multiplication_8h_source.xhtml">CLPixelWiseMultiplication.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml">CLPixelWiseMultiplication.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml">CLPixelWiseMultiplication</a></li>
    <li class="footer">Generated on Thu May 28 2020 12:10:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
