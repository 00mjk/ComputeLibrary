<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLQLSTMLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLQLSTMLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic function to run <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>.  
 <a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_q_l_s_t_m_layer_8h_source.xhtml">CLQLSTMLayer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLQLSTMLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_q_l_s_t_m_layer__coll__graph.svg" width="128" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed5aa38aa539b894a368acd04b96d026"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aed5aa38aa539b894a368acd04b96d026">CLQLSTMLayer</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr)</td></tr>
<tr class="memdesc:aed5aa38aa539b894a368acd04b96d026"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aed5aa38aa539b894a368acd04b96d026">More...</a><br /></td></tr>
<tr class="separator:aed5aa38aa539b894a368acd04b96d026"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a13183b59f3aad80f31dee47544d67f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a3a13183b59f3aad80f31dee47544d67f">CLQLSTMLayer</a> (const <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a3a13183b59f3aad80f31dee47544d67f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a3a13183b59f3aad80f31dee47544d67f">More...</a><br /></td></tr>
<tr class="separator:a3a13183b59f3aad80f31dee47544d67f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89522a023a7be22d753feeabc90b8c43"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a89522a023a7be22d753feeabc90b8c43">CLQLSTMLayer</a> (<a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a89522a023a7be22d753feeabc90b8c43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="#a89522a023a7be22d753feeabc90b8c43">More...</a><br /></td></tr>
<tr class="separator:a89522a023a7be22d753feeabc90b8c43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fcc9388c55f74f10ccc4c25d19c261a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a3fcc9388c55f74f10ccc4c25d19c261a">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a3fcc9388c55f74f10ccc4c25d19c261a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a3fcc9388c55f74f10ccc4c25d19c261a">More...</a><br /></td></tr>
<tr class="separator:a3fcc9388c55f74f10ccc4c25d19c261a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1b20441a001e097b19cc15738c7073f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#ae1b20441a001e097b19cc15738c7073f">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ae1b20441a001e097b19cc15738c7073f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="#ae1b20441a001e097b19cc15738c7073f">More...</a><br /></td></tr>
<tr class="separator:ae1b20441a001e097b19cc15738c7073f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa97c7722322abc28e02eba7ab11f9c9d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa97c7722322abc28e02eba7ab11f9c9d">configure</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_in, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:aa97c7722322abc28e02eba7ab11f9c9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize function's tensors.  <a href="#aa97c7722322abc28e02eba7ab11f9c9d">More...</a><br /></td></tr>
<tr class="separator:aa97c7722322abc28e02eba7ab11f9c9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d6622bf0e99356a533c2e01d33b2e6f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a3d6622bf0e99356a533c2e01d33b2e6f">configure</a> (const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_in, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a3d6622bf0e99356a533c2e01d33b2e6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize function's tensors.  <a href="#a3d6622bf0e99356a533c2e01d33b2e6f">More...</a><br /></td></tr>
<tr class="separator:a3d6622bf0e99356a533c2e01d33b2e6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a> () override</td></tr>
<tr class="memdesc:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">More...</a><br /></td></tr>
<tr class="separator:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8c31fb434071a8c3f6fb667794135431"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a8c31fb434071a8c3f6fb667794135431">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_state_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_state_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_state_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_state_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a8c31fb434071a8c3f6fb667794135431"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>.  <a href="#a8c31fb434071a8c3f6fb667794135431">More...</a><br /></td></tr>
<tr class="separator:a8c31fb434071a8c3f6fb667794135431"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic function to run <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>. </p>
<p>This function calls the following CL functions/kernels:</p>
<ol type="1">
<li><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a> Activation functions (tanh and logistic)</li>
<li><a class="el" href="classarm__compute_1_1_c_l_copy_kernel.xhtml">CLCopyKernel</a> Copy kernel for copying output_state_out to output</li>
<li><a class="el" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">CLSaturatedArithmeticOperationKernel</a> Elementwise addition and subtraction</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml">CLGEMMLowpMatrixMultiplyCore</a> Quantized matrix multiplication core. Accumulators are 32-bit integers</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_int16_scale_by_fixed_point.xhtml">CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPoint</a> Convert 32-bit integers into QSYMM16</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml">CLGEMMLowpMatrixAReductionKernel</a> For precomputing effective biases to use</li>
<li><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml">CLPixelWiseMultiplicationKernel</a> Elementwise multiplication</li>
<li><a class="el" href="classarm__compute_1_1_c_l_transpose.xhtml">CLTranspose</a> Transpose function for reshaping the weights </li>
</ol>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8h_source.xhtml#l00058">58</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8h_source.xhtml">CLQLSTMLayer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aed5aa38aa539b894a368acd04b96d026"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed5aa38aa539b894a368acd04b96d026">&#9670;&nbsp;</a></span>CLQLSTMLayer() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00087">87</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    _memory_group = MemoryGroup(std::move(memory_manager));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3a13183b59f3aad80f31dee47544d67f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a13183b59f3aad80f31dee47544d67f">&#9670;&nbsp;</a></span>CLQLSTMLayer() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a89522a023a7be22d753feeabc90b8c43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89522a023a7be22d753feeabc90b8c43">&#9670;&nbsp;</a></span>CLQLSTMLayer() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa97c7722322abc28e02eba7ab11f9c9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa97c7722322abc28e02eba7ab11f9c9d">&#9670;&nbsp;</a></span>configure() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize function's tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor. Input is a 2D tensor with dimensions [input_size, batch_size]. Data types supported: QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cell_state_out</td><td>Destination tensor. Output is a 2D tensor with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_state_out</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors used in peephole, CIFG and layer normalization optimizations: input_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at input gate. forget_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at forget gate. cell_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at cell gate. output_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at output gate. hidden_state_zero The zero point of the hidden state. hidden_state_scale The scale of the hidden state. input_to_input_weights (Optional) 2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. recurrent_to_input_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. cell_to_input_weights (Optional) 1D weights tensor with dimensions [num_units]. Can be nullptr. Data type supported: QSYMM16. cell_to_forget_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_to_output_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. input_gate_bias (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: S32. projection_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. projection_bias (Optional) 1D weights tensor with dimensions [output_size]. S32. input_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. forget_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. output_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_threshold (Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0 then clipping is disabled. projection_threshold (Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0 then clipping is disabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa97c7722322abc28e02eba7ab11f9c9d">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;              cell_state_in, output_state_in, cell_state_out, output_state_out, output, lstm_params);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a507bd7e4d98cb3e45d3e820d8bac422a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">arm_compute::test::validation::output_gate_bias</a></div><div class="ttdeci">auto output_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">LSTMLayerQuantized.cpp:484</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a55daaf57fb833fc416d779c28f7a3c85"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">arm_compute::test::validation::forget_gate_bias</a></div><div class="ttdeci">auto forget_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">LSTMLayerQuantized.cpp:482</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00971">CLKernelLibrary.cpp:971</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac62dfdcc14798598d953342789c9927e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">arm_compute::test::validation::recurrent_to_forget_weights</a></div><div class="ttdeci">auto recurrent_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">LSTMLayerQuantized.cpp:478</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac547a66fe26967afb94760061ee0d0d1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">arm_compute::test::validation::input_to_cell_weights</a></div><div class="ttdeci">auto input_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">LSTMLayerQuantized.cpp:475</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aab02df8a9ee45153f2fd76e934407fbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">arm_compute::test::validation::recurrent_to_output_weights</a></div><div class="ttdeci">auto recurrent_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">LSTMLayerQuantized.cpp:480</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ace4dd633420fa8d8aa71f60ff730f01f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">arm_compute::test::validation::input_to_output_weights</a></div><div class="ttdeci">auto input_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">LSTMLayerQuantized.cpp:476</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2236dfe2a3fc5fa4e125348829cbeb2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">arm_compute::test::validation::recurrent_to_cell_weights</a></div><div class="ttdeci">auto recurrent_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">LSTMLayerQuantized.cpp:479</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_q_l_s_t_m_layer_xhtml_aa97c7722322abc28e02eba7ab11f9c9d"><div class="ttname"><a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa97c7722322abc28e02eba7ab11f9c9d">arm_compute::CLQLSTMLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const ICLTensor *input_to_forget_weights, const ICLTensor *input_to_cell_weights, const ICLTensor *input_to_output_weights, const ICLTensor *recurrent_to_forget_weights, const ICLTensor *recurrent_to_cell_weights, const ICLTensor *recurrent_to_output_weights, const ICLTensor *forget_gate_bias, const ICLTensor *cell_bias, const ICLTensor *output_gate_bias, const ICLTensor *cell_state_in, const ICLTensor *output_state_in, ICLTensor *cell_state_out, ICLTensor *output_state_out, ICLTensor *output, const LSTMParams&lt; ICLTensor &gt; &amp;lstm_params)</div><div class="ttdoc">Initialize function's tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00112">CLQLSTMLayer.cpp:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3b793c410cba57a1395184692a018356"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">arm_compute::test::validation::input_to_forget_weights</a></div><div class="ttdeci">auto input_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">LSTMLayerQuantized.cpp:474</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="_c_l_kernel_library_8cpp_source.xhtml#l00971">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_forget_weights</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">arm_compute::test::validation::recurrent_to_output_weights</a>.</p>

</div>
</div>
<a id="a3d6622bf0e99356a533c2e01d33b2e6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d6622bf0e99356a533c2e01d33b2e6f">&#9670;&nbsp;</a></span>configure() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td>
          <td class="paramname"><em>compile_context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize function's tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">compile_context</td><td>The compile context to be used. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor. Input is a 2D tensor with dimensions [input_size, batch_size]. Data types supported: QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cell_state_out</td><td>Destination tensor. Output is a 2D tensor with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_state_out</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors used in peephole, CIFG and layer normalization optimizations: input_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at input gate. forget_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at forget gate. cell_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at cell gate. output_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at output gate. hidden_state_zero The zero point of the hidden state. hidden_state_scale The scale of the hidden state. input_to_input_weights (Optional) 2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. recurrent_to_input_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. cell_to_input_weights (Optional) 1D weights tensor with dimensions [num_units]. Can be nullptr. Data type supported: QSYMM16. cell_to_forget_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_to_output_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. input_gate_bias (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: S32. projection_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. projection_bias (Optional) 1D weights tensor with dimensions [output_size]. S32. input_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. forget_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. output_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_threshold (Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0 then clipping is disabled. projection_threshold (Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0 then clipping is disabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00125">125</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, cell_state_in, output_state_in,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                 cell_state_out, output_state_out, output);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Set lstm parameters</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    LSTMParams&lt;ITensorInfo&gt; lstm_params_info{};</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils_1_1info__helpers.xhtml#ace12965ef6278f7717bcd30fb5f18e9e">build_lstm_params_tensor_info</a>(lstm_params, &amp;lstm_params_info);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Validate</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a8c31fb434071a8c3f6fb667794135431">CLQLSTMLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;info(),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;info(),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>-&gt;info(), cell_bias-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>-&gt;info(),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                                      cell_state_in-&gt;info(), output_state_in-&gt;info(), cell_state_out-&gt;info(), output_state_out-&gt;info(), output-&gt;info(),</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                      lstm_params_info));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_size  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> num_units   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a> = output_state_out-&gt;info()-&gt;dimension(_out_state_output_size_dimension_idx);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qinput           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qcell_state_in   = cell_state_in-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qoutput_state_in = output_state_in-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    _projection_bias             = lstm_params.projection_bias();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    _input_to_forget_weights     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _input_to_cell_weights       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    _input_to_output_weights     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _recurrent_to_forget_weights = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _recurrent_to_cell_weights   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _recurrent_to_output_weights = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    _projection_weights          = lstm_params.projection_weights();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// Layer normalization</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    _has_layer_norm = lstm_params.use_layer_norm();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        set_layer_norm_weight(lstm_params.forget_layer_norm_weights(), LayerNormGate::Forget);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        set_layer_norm_weight(lstm_params.cell_layer_norm_weights(), LayerNormGate::Cell);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        set_layer_norm_weight(lstm_params.input_layer_norm_weights(), LayerNormGate::Input);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        set_layer_norm_weight(lstm_params.output_layer_norm_weights(), LayerNormGate::Output);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        set_layer_norm_bias(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, LayerNormGate::Forget);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        set_layer_norm_bias(cell_bias, LayerNormGate::Cell);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        set_layer_norm_bias(lstm_params.input_gate_bias(), LayerNormGate::Input);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        set_layer_norm_bias(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, LayerNormGate::Output);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    _has_cifg       = lstm_params.has_cifg_opt();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    _has_projection = lstm_params.has_projection();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    _has_peephole   = lstm_params.has_peephole_opt();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Calculate and decompose effective scales for optimizing matmul calculation</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> int32_t cell_shift = log2(qcell_state_in.scale);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Calculate quantized parameters for clipping.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    int16_t quantized_cell_clip = 0;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">if</span>(lstm_params.cell_clip() &gt; 0.0f)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        quantized_cell_clip = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(lstm_params.cell_clip(), qcell_state_in);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    _has_cell_clipping = quantized_cell_clip &gt; 0;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Precompute effective bias for optimizing the matmul computations.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span>(!_has_cifg)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        _input_to_input_weights     = lstm_params.input_to_input_weights();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        _recurrent_to_input_weights = lstm_params.recurrent_to_input_weights();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        _input_to_input_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, _input_to_input_weights, &amp;_input_to_input_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        _recurrent_to_input_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, _recurrent_to_input_weights, &amp;_recurrent_to_input_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    _input_to_forget_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, &amp;_input_to_forget_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    _recurrent_to_forget_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, &amp;_recurrent_to_forget_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    _input_to_cell_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, &amp;_input_to_cell_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    _recurrent_to_cell_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, &amp;_recurrent_to_cell_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    _input_to_output_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, &amp;_input_to_output_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    _recurrent_to_output_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, &amp;_recurrent_to_output_eff_bias, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>));</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">if</span>(_has_projection)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        _projection_reduction.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">configure</a>(compile_context, _projection_weights, &amp;_projection_eff_bias, GEMMLowpReductionKernelInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, <span class="keyword">false</span>, lstm_params.hidden_state_zero(), <span class="keyword">true</span>));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Pre-transpose weights to be used in GEMM.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    _transpose_input_to_forget_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, &amp;_input_to_forget_weights_transposed);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    _transpose_input_to_cell_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, &amp;_input_to_cell_weights_transposed);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    _transpose_input_to_output_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, &amp;_input_to_output_weights_transposed);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    _transpose_recurrent_to_forget_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, &amp;_recurrent_to_forget_weights_transposed);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    _transpose_recurrent_to_cell_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, &amp;_recurrent_to_cell_weights_transposed);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    _transpose_recurrent_to_output_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, &amp;_recurrent_to_output_weights_transposed);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span>(!_has_cifg)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        _transpose_input_to_input_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, lstm_params.input_to_input_weights(), &amp;_input_to_input_weights_transposed);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        _transpose_recurrent_to_input_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, lstm_params.recurrent_to_input_weights(), &amp;_recurrent_to_input_weights_transposed);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span>(_has_projection)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        _transpose_projection_weights.<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(compile_context, _projection_weights, &amp;_projection_weights_transposed);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    GEMMLowpOutputStageInfo gemmlowp_info;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    gemmlowp_info.type               = <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    gemmlowp_info.gemmlowp_min_bound = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    gemmlowp_info.gemmlowp_max_bound = std::numeric_limits&lt;int16_t&gt;::max();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    gemmlowp_info.output_data_type   = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> TensorInfo mm_out_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Forget gate.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> TensorInfo forget_gate_outstage_info(mm_out_info.tensor_shape(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.forget_intermediate_scale(), 0));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_forget_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    configure_mm(compile_context, _mm_input_to_forget, _input_to_forget_outstage, gemmlowp_info,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_input_to_forget_weights_transposed, &amp;_input_to_forget_eff_bias,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                 &amp;_mm_input_to_forget_res, &amp;_input_to_forget_outstage_res, input_to_forget_scale,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                 mm_out_info, forget_gate_outstage_info);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_forget_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    configure_mm(compile_context, _mm_recurrent_to_forget, _recurrent_to_forget_outstage, gemmlowp_info,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                 output_state_in, &amp;_recurrent_to_forget_weights_transposed, &amp;_recurrent_to_forget_eff_bias,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                 &amp;_mm_recurrent_to_forget_res, &amp;_recurrent_to_forget_outstage_res, recurrent_to_forget_scale,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                 mm_out_info, forget_gate_outstage_info);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    _accumulate_input_recurrent_forget.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_input_to_forget_outstage_res, &amp;_recurrent_to_forget_outstage_res, &amp;_recurrent_to_forget_outstage_res,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    _input_to_forget_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        _mul_cell_to_forget_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_in-&gt;info()-&gt;tensor_shape(), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_mul_cell_to_forget_res);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        _pixelwise_mul_cell_to_forget.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, cell_state_in, lstm_params.cell_to_forget_weights(), &amp;_mul_cell_to_forget_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        _cell_to_forget_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(_mul_cell_to_forget_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.forget_intermediate_scale(), 0)));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_to_forget_outstage_res);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> cell_to_forget_scale = std::pow(2, cell_shift) * lstm_params.cell_to_forget_weights()-&gt;info()-&gt;quantization_info().uniform().scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(cell_to_forget_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        _cell_to_forget_outstage.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8be556a216eb9d6b0e9551493043e3d3">configure</a>(compile_context, &amp;_mul_cell_to_forget_res, <span class="keyword">nullptr</span>, &amp;_cell_to_forget_outstage_res, gemmlowp_info);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _mul_cell_to_forget_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        _accumulate_cell_forget.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_recurrent_to_forget_outstage_res, &amp;_cell_to_forget_outstage_res, &amp;_recurrent_to_forget_outstage_res,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                          <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        _cell_to_forget_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    CLTensor *forget_activation_input = &amp;_recurrent_to_forget_outstage_res;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        configure_layer_norm(LayerNormGate::Forget, &amp;_recurrent_to_forget_outstage_res);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        _recurrent_to_forget_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        forget_activation_input = &amp;get_layer_norm_output(LayerNormGate::Forget);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Output quantization info of Sigmoid and Tanh activations</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> QuantizationInfo sigmoid_tanh_outqinfo(1.f / 32768.f, 0);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> TensorInfo forget_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    _forget_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(forget_gate_info);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    _forget_gate_sigmoid.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, forget_activation_input, &amp;_forget_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    forget_activation_input-&gt;allocator()-&gt;allocate();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// Modulation gate.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> TensorInfo cell_outstage_info(mm_out_info.tensor_shape(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.cell_intermediate_scale(), 0));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_cell_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.cell_intermediate_scale();</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    configure_mm(compile_context, _mm_input_to_cell, _input_to_cell_outstage, gemmlowp_info,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_input_to_cell_weights_transposed, &amp;_input_to_cell_eff_bias,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                 &amp;_mm_input_to_cell_res, &amp;_input_to_cell_outstage_res, input_to_cell_scale,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                 mm_out_info, cell_outstage_info);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_cell_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.cell_intermediate_scale();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    configure_mm(compile_context, _mm_recurrent_to_cell, _recurrent_to_cell_outstage, gemmlowp_info,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                 output_state_in, &amp;_recurrent_to_cell_weights_transposed, &amp;_recurrent_to_cell_eff_bias,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                 &amp;_mm_recurrent_to_cell_res, &amp;_recurrent_to_cell_outstage_res, recurrent_to_cell_scale,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                 mm_out_info, cell_outstage_info);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    _accumulate_input_recurrent_modulation.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_input_to_cell_outstage_res, &amp;_recurrent_to_cell_outstage_res, &amp;_recurrent_to_cell_outstage_res,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                     <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    _input_to_cell_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    CLTensor *cell_activation_input = &amp;_recurrent_to_cell_outstage_res;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        configure_layer_norm(LayerNormGate::Cell, &amp;_recurrent_to_cell_outstage_res);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        _recurrent_to_cell_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        cell_activation_input = &amp;get_layer_norm_output(LayerNormGate::Cell);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">const</span> TensorInfo cell_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_gate);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    _cell_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(cell_gate_info);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    _cell_gate_tanh.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, cell_activation_input, &amp;_cell_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>, 1.f, 1.f));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    cell_activation_input-&gt;allocator()-&gt;allocate();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Input gate.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">const</span> TensorInfo input_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    _input_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(input_gate_info);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_gate);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">if</span>(_has_cifg)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(*_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>());</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        _input_gate_sub.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a>, &amp;_ones, &amp;_forget_gate, &amp;_input_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keyword">const</span> TensorInfo input_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.input_intermediate_scale(), 0));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_input_scale = _input_to_input_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> * qinput.scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        configure_mm(compile_context, _mm_input_to_input, _input_to_input_outstage, gemmlowp_info,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_input_to_input_weights_transposed, &amp;_input_to_input_eff_bias,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                     &amp;_mm_input_to_input_res, &amp;_input_to_input_outstage_res, input_to_input_scale,</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                     mm_out_info, input_outstage_info);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_input_scale = _recurrent_to_input_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> * qoutput_state_in.scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        configure_mm(compile_context, _mm_recurrent_to_input, _recurrent_to_input_outstage, gemmlowp_info,</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                     output_state_in, &amp;_recurrent_to_input_weights_transposed, &amp;_recurrent_to_input_eff_bias,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                     &amp;_mm_recurrent_to_input_res, &amp;_recurrent_to_input_outstage_res, recurrent_to_input_scale,</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                     mm_out_info, input_outstage_info);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        _accumulate_input_recurrent_input.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_input_to_input_outstage_res, &amp;_recurrent_to_input_outstage_res, &amp;_recurrent_to_input_outstage_res,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        _input_to_input_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            _mul_cell_to_input_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_in-&gt;info()-&gt;tensor_shape(), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_mul_cell_to_input_res);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            _pixelwise_mul_cell_to_input.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, cell_state_in, lstm_params.cell_to_input_weights(), &amp;_mul_cell_to_input_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> cell_to_input_scale = std::pow(2, cell_shift) * lstm_params.cell_to_input_weights()-&gt;info()-&gt;quantization_info().uniform().scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(cell_to_input_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            _cell_to_input_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(_mul_cell_to_input_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.input_intermediate_scale(), 0)));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_to_input_outstage_res);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            _cell_to_input_outstage.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8be556a216eb9d6b0e9551493043e3d3">configure</a>(compile_context, &amp;_mul_cell_to_input_res, <span class="keyword">nullptr</span>, &amp;_cell_to_input_outstage_res, gemmlowp_info);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            _mul_cell_to_input_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            _accumulate_cell_input.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_recurrent_to_input_outstage_res, &amp;_cell_to_input_outstage_res, &amp;_recurrent_to_input_outstage_res, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            _cell_to_input_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        CLTensor *input_activation_input = &amp;_recurrent_to_input_outstage_res;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            configure_layer_norm(LayerNormGate::Input, &amp;_recurrent_to_input_outstage_res);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            _recurrent_to_input_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            input_activation_input = &amp;get_layer_norm_output(LayerNormGate::Input);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        _input_gate_sigmoid.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, input_activation_input, &amp;_input_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        input_activation_input-&gt;allocator()-&gt;allocate();</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// Cell.</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// TODO(COMPMID-3396): Perform multiplication in the quantized domain in CLPixelWiseMultiplicationKernel</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    _pixelwise_mul_forget_cell.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, &amp;_forget_gate, cell_state_in, &amp;_forget_gate, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      cell_gate_scale      = _cell_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      mul_input_cell_scale = cell_gate_scale * std::pow(2, 15 + cell_shift);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> TensorInfo mul_input_cell_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(mul_input_cell_scale, 0));</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_mul_input_cell_res);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    _mul_input_cell_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(mul_input_cell_info);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    _pixelwise_mul_input_cell.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, &amp;_input_gate, &amp;_cell_gate, &amp;_mul_input_cell_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    _cell_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    _add_forget_cell.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_forget_gate, &amp;_mul_input_cell_res, cell_state_out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    _mul_input_cell_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    _forget_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">if</span>(_has_cell_clipping)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        _cell_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, cell_state_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -quantized_cell_clip, quantized_cell_clip));</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="comment">// Output gate.</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">const</span> TensorInfo output_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.output_intermediate_scale(), 0));</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_output_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.output_intermediate_scale();</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    configure_mm(compile_context, _mm_input_to_output, _input_to_output_outstage, gemmlowp_info,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;_input_to_output_weights_transposed, &amp;_input_to_output_eff_bias,</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                 &amp;_mm_input_to_output_res, &amp;_input_to_output_outstage_res, input_to_output_scale,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                 mm_out_info, output_outstage_info);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_output_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;info()-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.output_intermediate_scale();</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    configure_mm(compile_context, _mm_recurrent_to_output, _recurrent_to_output_outstage, gemmlowp_info,</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                 output_state_in, &amp;_recurrent_to_output_weights_transposed, &amp;_recurrent_to_output_eff_bias,</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                 &amp;_mm_recurrent_to_output_res, &amp;_recurrent_to_output_outstage_res, recurrent_to_output_scale,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                 mm_out_info, output_outstage_info);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    _accumulate_input_recurrent_output.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_recurrent_to_output_outstage_res, &amp;_input_to_output_outstage_res, &amp;_recurrent_to_output_outstage_res,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    _input_to_output_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="comment">// TODO(COMPMID-3396): Perform multiplication in the quantized domain in CLPixelWiseMultiplicationKernel</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="comment">// Here we are not using the output stage because all operations are done in float</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        _mul_cell_to_output_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_out-&gt;info()-&gt;tensor_shape(), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>));</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_mul_cell_to_output_res);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        _pixelwise_mul_cell_to_output.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, cell_state_out, lstm_params.cell_to_output_weights(), &amp;_mul_cell_to_output_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> cell_to_output_scale = std::pow(2, cell_shift) * lstm_params.cell_to_output_weights()-&gt;info()-&gt;quantization_info().uniform().scale / lstm_params.output_intermediate_scale();</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(cell_to_output_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        _cell_to_output_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(_mul_cell_to_output_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.output_intermediate_scale(), 0)));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_to_output_outstage_res);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        _cell_to_output_outstage.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8be556a216eb9d6b0e9551493043e3d3">configure</a>(compile_context, &amp;_mul_cell_to_output_res, <span class="keyword">nullptr</span>, &amp;_cell_to_output_outstage_res, gemmlowp_info);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        _mul_cell_to_output_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        _accumulate_cell_to_output.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_recurrent_to_output_outstage_res, &amp;_cell_to_output_outstage_res, &amp;_recurrent_to_output_outstage_res,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                             <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        _cell_to_output_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    CLTensor *output_activation_input = &amp;_recurrent_to_output_outstage_res;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        configure_layer_norm(LayerNormGate::Output, &amp;_recurrent_to_output_outstage_res);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        _recurrent_to_output_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        output_activation_input = &amp;get_layer_norm_output(LayerNormGate::Output);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> TensorInfo output_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output_gate);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    _output_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(output_gate_info);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    _output_gate_sigmoid.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, output_activation_input, &amp;_output_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    output_activation_input-&gt;allocator()-&gt;allocate();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// Hidden.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    _hidden_tanh.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, cell_state_out, &amp;_input_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>, 1.f, 1.f));</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="comment">// TODO(COMPMID-3396): Perform multiplication in the quantized domain in CLPixelWiseMultiplicationKernel</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_hidden_mul_res);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> TensorInfo hidden_mul_res(_input_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    _hidden_mul_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(hidden_mul_res);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    _pixelwise_mul_hidden.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">configure</a>(compile_context, &amp;_output_gate, &amp;_input_gate, &amp;_hidden_mul_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    _output_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    _input_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> hidden_state_scale = std::pow(2, -15) / lstm_params.hidden_state_scale() * std::pow(2, -15);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(hidden_state_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift, <span class="comment">/* ignore_epsilon */</span> <span class="keyword">true</span>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    gemmlowp_info.gemmlowp_offset  = lstm_params.hidden_state_zero();</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    gemmlowp_info.output_data_type = output_state_in-&gt;info()-&gt;data_type();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    _projection_tensor_copy_required = (num_units != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    ICLTensor *hidden_gate_result    = output_state_out;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_hidden_gate);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        _hidden_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(*output_state_out-&gt;info());</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        _hidden_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">set_tensor_shape</a>(_hidden_mul_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>());</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        hidden_gate_result = &amp;_hidden_gate;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    _hidden_outstage.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8be556a216eb9d6b0e9551493043e3d3">configure</a>(compile_context, &amp;_hidden_mul_res, <span class="keyword">nullptr</span>, hidden_gate_result, gemmlowp_info);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    _hidden_mul_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="comment">// Projection.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">if</span>(_has_projection)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keyword">const</span> TensorInfo              projection_outstage_info(*output_state_out-&gt;info());</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo qprojection      = _projection_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>                   projection_scale = qprojection.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> * lstm_params.hidden_state_scale() / qoutput_state_in.scale;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        gemmlowp_info.gemmlowp_offset                  = qoutput_state_in.offset;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        gemmlowp_info.gemmlowp_min_bound               = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>();</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        gemmlowp_info.gemmlowp_max_bound               = std::numeric_limits&lt;int8_t&gt;::max();</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        gemmlowp_info.output_data_type                 = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        TensorInfo projection_mm_out_info{ mm_out_info };</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        projection_mm_out_info.set_tensor_shape(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, batch_size));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        configure_mm(compile_context, _mm_projection, _projection_outstage, gemmlowp_info,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                     hidden_gate_result, &amp;_projection_weights_transposed, &amp;_projection_eff_bias,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                     &amp;_mm_projection_res, &amp;_projection_outstage_res, projection_scale,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                     projection_mm_out_info, projection_outstage_info);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        ICLTensor *accumulate_destination = output_state_out;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            _hidden_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            _projection_accumulate_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(*output_state_out-&gt;info());</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            _projection_accumulate_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">set_tensor_shape</a>(_projection_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>());</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            _projection_output_to_accumulate_copy.configure(*output_state_out, _projection_accumulate_res);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            accumulate_destination = &amp;_projection_accumulate_res;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        _accumulate_projection.<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">configure</a>(compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;_projection_outstage_res, accumulate_destination, accumulate_destination, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        _projection_outstage_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            _projection_accumulate_to_output_copy.configure(_projection_accumulate_res, *output_state_out);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            _projection_accumulate_res.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        int8_t quantized_projection_clip{ 0 };</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">if</span>(lstm_params.projection_clip() &gt; 0.0f)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            quantized_projection_clip = utility::clamp&lt;int8_t&gt;(lstm_params.projection_clip() / qprojection.scale, -128, 127);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordflow">if</span>(quantized_projection_clip &gt; 0)</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            _projection_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, output_state_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -quantized_projection_clip,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                                                                                                       quantized_projection_clip));</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            _has_projection_clipping = <span class="keyword">true</span>;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            _hidden_to_output_copy.configure(_hidden_gate, *output_state_out);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            _hidden_gate.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="comment">// Copy output_state_out to output</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    _copy_output.<a class="code" href="classarm__compute_1_1_c_l_copy_kernel.xhtml#a71e93e8e995e940376c12cfd1b0a5538">configure</a>(compile_context, output_state_out, output);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a507bd7e4d98cb3e45d3e820d8bac422a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">arm_compute::test::validation::output_gate_bias</a></div><div class="ttdeci">auto output_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">LSTMLayerQuantized.cpp:484</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00427">QuantizationInfo.h:427</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdoc">Quantize using a fixed point multiplication.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1info__helpers_xhtml_ace12965ef6278f7717bcd30fb5f18e9e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1info__helpers.xhtml#ace12965ef6278f7717bcd30fb5f18e9e">arm_compute::utils::info_helpers::build_lstm_params_tensor_info</a></div><div class="ttdeci">void build_lstm_params_tensor_info(const LSTMParams&lt; T &gt; &amp;lstm_params, LSTMParams&lt; ITensorInfo &gt; *lstm_params_info)</div><div class="ttdoc">Build LSTMParams&lt;ITensorInfo&gt; object by extracting the metadata from each tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_info_helpers_8h_source.xhtml#l00071">InfoHelpers.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a55daaf57fb833fc416d779c28f7a3c85"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">arm_compute::test::validation::forget_gate_bias</a></div><div class="ttdeci">auto forget_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">LSTMLayerQuantized.cpp:482</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ArithmeticOperation::ADD</a></div><div class="ttdoc">(x + y)</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00311">TensorInfo.h:311</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage_xhtml_a8be556a216eb9d6b0e9551493043e3d3"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8be556a216eb9d6b0e9551493043e3d3">arm_compute::CLGEMMLowpOutputStage::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, const GEMMLowpOutputStageInfo &amp;info)</div><div class="ttdoc">Initialise the kernel's inputs, output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00182">CLGEMMLowpOutputStage.cpp:182</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_copy_kernel_xhtml_a71e93e8e995e940376c12cfd1b0a5538"><div class="ttname"><a href="classarm__compute_1_1_c_l_copy_kernel.xhtml#a71e93e8e995e940376c12cfd1b0a5538">arm_compute::CLCopyKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output, const PaddingList &amp;padding=PaddingList(), Window *output_window=nullptr)</div><div class="ttdoc">Initialize the kernel's input, output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_copy_kernel_8cpp_source.xhtml#l00158">CLCopyKernel.cpp:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac62dfdcc14798598d953342789c9927e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">arm_compute::test::validation::recurrent_to_forget_weights</a></div><div class="ttdeci">auto recurrent_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">LSTMLayerQuantized.cpp:478</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00065">QuantizationInfo.h:65</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00243">ToolchainSupport.h:243</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_allocator_xhtml_af36143939a43fa124312e395975091ed"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input, size_t alignment=0)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00038">ITensorAllocator.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac547a66fe26967afb94760061ee0d0d1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">arm_compute::test::validation::input_to_cell_weights</a></div><div class="ttdeci">auto input_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">LSTMLayerQuantized.cpp:475</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aab02df8a9ee45153f2fd76e934407fbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">arm_compute::test::validation::recurrent_to_output_weights</a></div><div class="ttdeci">auto recurrent_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">LSTMLayerQuantized.cpp:480</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ace4dd633420fa8d8aa71f60ff730f01f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">arm_compute::test::validation::input_to_output_weights</a></div><div class="ttdeci">auto input_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">LSTMLayerQuantized.cpp:476</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml_a3e3617f2ab64af04a52d8f55fcfaed85"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3e3617f2ab64af04a52d8f55fcfaed85">arm_compute::CLSaturatedArithmeticOperationKernel::configure</a></div><div class="ttdeci">void configure(ArithmeticOperation op, const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, const ConvertPolicy &amp;policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLSaturatedArithmeticOpe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00334">CLElementwiseOperationKernel.cpp:334</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00149">QuantizationInfo.h:149</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2236dfe2a3fc5fa4e125348829cbeb2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">arm_compute::test::validation::recurrent_to_cell_weights</a></div><div class="ttdeci">auto recurrent_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">LSTMLayerQuantized.cpp:479</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel_xhtml_a48629675e09d7ae77b82df3ac8eb1dfb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a48629675e09d7ae77b82df3ac8eb1dfb">arm_compute::CLGEMMLowpMatrixAReductionKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *mtx_a, ICLTensor *vector_sum_row, const GEMMLowpReductionKernelInfo &amp;info) override</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_reduction_kernel_8cpp_source.xhtml#l00089">CLGEMMLowpReductionKernel.cpp:89</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdoc">Logistic (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">arm_compute::ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a></div><div class="ttdoc">Lower and Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">arm_compute::ActivationLayerInfo::ActivationFunction::TANH</a></div><div class="ttdoc">Hyperbolic tangent (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_activation_layer_xhtml_a239fea32ba46d038ba350dba58026c45"><div class="ttname"><a href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">arm_compute::CLActivationLayer::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output, ActivationLayerInfo act_info)</div><div class="ttdoc">Set the input and output tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_activation_layer_8cpp_source.xhtml#l00038">CLActivationLayer.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a2d7e8b8e05c3318b2d90c40d781745d2"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">arm_compute::TensorInfo::set_tensor_shape</a></div><div class="ttdeci">ITensorInfo &amp; set_tensor_shape(const TensorShape &amp;shape) override</div><div class="ttdoc">Set the shape of an already initialized tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00350">TensorInfo.cpp:350</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_transpose_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_transpose.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLTranspose::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialise the kernel's inputs and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_transpose_8cpp_source.xhtml#l00033">CLTranspose.cpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00261">TensorInfo.h:261</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::ArithmeticOperation::SUB</a></div><div class="ttdoc">(x - y)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad44f86834ae016bf696e8e664f39c136"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">arm_compute::test::validation::output_size</a></div><div class="ttdeci">const int output_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00460">LSTMLayerQuantized.cpp:460</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3b793c410cba57a1395184692a018356"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">arm_compute::test::validation::input_to_forget_weights</a></div><div class="ttdeci">auto input_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">LSTMLayerQuantized.cpp:474</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel_xhtml_a244eb0ee0c748ff566ca55e520d48a6f"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#a244eb0ee0c748ff566ca55e520d48a6f">arm_compute::CLPixelWiseMultiplicationKernel::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's input, output and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00145">CLPixelWiseMultiplicationKernel.cpp:145</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_q_l_s_t_m_layer_xhtml_a8c31fb434071a8c3f6fb667794135431"><div class="ttname"><a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#a8c31fb434071a8c3f6fb667794135431">arm_compute::CLQLSTMLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *input_to_forget_weights, const ITensorInfo *input_to_cell_weights, const ITensorInfo *input_to_output_weights, const ITensorInfo *recurrent_to_forget_weights, const ITensorInfo *recurrent_to_cell_weights, const ITensorInfo *recurrent_to_output_weights, const ITensorInfo *forget_gate_bias, const ITensorInfo *cell_bias, const ITensorInfo *output_gate_bias, const ITensorInfo *cell_state_in, const ITensorInfo *output_state_in, const ITensorInfo *cell_state_out, const ITensorInfo *output_state_out, const ITensorInfo *output, const LSTMParams&lt; ITensorInfo &gt; &amp;lstm_params)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLQLSTMLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00544">CLQLSTMLayer.cpp:544</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ADD</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor::allocator()</a>, <a class="el" href="_validate_8h_source.xhtml#l00161">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="_info_helpers_8h_source.xhtml#l00071">arm_compute::utils::info_helpers::build_lstm_params_tensor_info()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">arm_compute::quantization::calculate_quantized_multiplier()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00257">LSTMParams&lt; T &gt;::cell_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00277">LSTMParams&lt; T &gt;::cell_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00247">LSTMParams&lt; T &gt;::cell_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00217">LSTMParams&lt; T &gt;::cell_to_forget_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00207">LSTMParams&lt; T &gt;::cell_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00222">LSTMParams&lt; T &gt;::cell_to_output_weights()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00272">LSTMParams&lt; T &gt;::forget_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00242">LSTMParams&lt; T &gt;::forget_layer_norm_weights()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01888">GEMMLowpOutputStageInfo::gemmlowp_max_bound</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01887">GEMMLowpOutputStageInfo::gemmlowp_min_bound</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01885">GEMMLowpOutputStageInfo::gemmlowp_multiplier</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01884">GEMMLowpOutputStageInfo::gemmlowp_offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01886">GEMMLowpOutputStageInfo::gemmlowp_shift</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00307">LSTMParams&lt; T &gt;::has_cifg_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00297">LSTMParams&lt; T &gt;::has_peephole_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00302">LSTMParams&lt; T &gt;::has_projection()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00292">LSTMParams&lt; T &gt;::hidden_state_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00287">LSTMParams&lt; T &gt;::hidden_state_zero()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00107">TensorInfo::init()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00212">LSTMParams&lt; T &gt;::input_gate_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00267">LSTMParams&lt; T &gt;::input_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00237">LSTMParams&lt; T &gt;::input_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00197">LSTMParams&lt; T &gt;::input_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00243">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01893">GEMMLowpOutputStageInfo::output_data_type</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00282">LSTMParams&lt; T &gt;::output_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00252">LSTMParams&lt; T &gt;::output_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00460">arm_compute::test::validation::output_size</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00232">LSTMParams&lt; T &gt;::projection_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00262">LSTMParams&lt; T &gt;::projection_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00227">LSTMParams&lt; T &gt;::projection_weights()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::QUANTIZE_DOWN_FIXEDPOINT</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00427">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00202">LSTMParams&lt; T &gt;::recurrent_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">arm_compute::test::validation::recurrent_to_output_weights</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00065">UniformQuantizationInfo::scale</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">ITensorInfo::set_tensor_shape()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00350">TensorInfo::set_tensor_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::SUB</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00261">TensorInfo::tensor_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::TO_ZERO</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01883">GEMMLowpOutputStageInfo::type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00149">QuantizationInfo::uniform()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00312">LSTMParams&lt; T &gt;::use_layer_norm()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00544">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="a3fcc9388c55f74f10ccc4c25d19c261a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fcc9388c55f74f10ccc4c25d19c261a">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="ae1b20441a001e097b19cc15738c7073f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1b20441a001e097b19cc15738c7073f">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="aa9b93ef660fc3c5b4b19d3fc7b891b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01038">1038</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;{</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    {</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="comment">// Pre-transpose weights to be used in GEMM.</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        _input_to_forget_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        _input_to_cell_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        _input_to_output_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        _recurrent_to_forget_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        _recurrent_to_cell_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;        _recurrent_to_output_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        _transpose_input_to_forget_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        _transpose_input_to_cell_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        _transpose_input_to_output_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        _transpose_recurrent_to_forget_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;        _transpose_recurrent_to_cell_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        _transpose_recurrent_to_output_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        <span class="comment">// Precompute effective biases</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        <span class="keywordflow">if</span>(_has_cifg)</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        {</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;            _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;            std::fill_n(reinterpret_cast&lt;int16_t *&gt;(_ones.<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">buffer</a>()), _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>() / _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), 32767);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;            _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a>();</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        }</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        {</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;            _input_to_input_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;            _recurrent_to_input_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_input_to_input_reduction);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_recurrent_to_input_reduction);</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;            _input_to_input_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;            _recurrent_to_input_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            _transpose_input_to_input_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;            _transpose_recurrent_to_input_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;            _input_to_input_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;            _recurrent_to_input_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        }</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        _input_to_forget_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        _recurrent_to_forget_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        _input_to_cell_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        _recurrent_to_cell_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        _input_to_output_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        _recurrent_to_output_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_input_to_forget_reduction);</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_recurrent_to_forget_reduction);</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_input_to_cell_reduction);</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_recurrent_to_cell_reduction);</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_input_to_output_reduction);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_recurrent_to_output_reduction);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;        <span class="keywordflow">if</span>(_has_projection)</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;        {</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;            <span class="keywordflow">if</span>(_projection_bias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;            {</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                _projection_eff_bias.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_projection_reduction);</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                _projection_bias-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            }</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;            _projection_weights_transposed.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;            _transpose_projection_weights.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;            _projection_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            <span class="keywordflow">if</span>(!_projection_tensor_copy_required)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;            {</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                _hidden_gate.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                _projection_accumulate_res.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;            }</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        }</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        <span class="comment">// Mark weights as unused</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        _input_to_forget_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        _input_to_cell_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        _input_to_output_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        _recurrent_to_forget_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        _recurrent_to_cell_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        _recurrent_to_output_weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a>();</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>().finish();</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    }</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a14c53d2d17be6fa8a2c9861527c7b002"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">arm_compute::CLTensor::map</a></div><div class="ttdeci">void map(bool blocking=true)</div><div class="ttdoc">Enqueue a map operation of the allocated buffer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00066">CLTensor.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a9bc00234de9adf8c99a21eb1d7d494c2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">arm_compute::ITensor::mark_as_unused</a></div><div class="ttdeci">void mark_as_unused() const</div><div class="ttdoc">Marks a tensor as unused.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8cpp_source.xhtml#l00167">ITensor.cpp:167</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tensor_xhtml_a24954cca5108a24706441fd99a7fb04c"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">arm_compute::ICLTensor::buffer</a></div><div class="ttdeci">uint8_t * buffer() const override</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8cpp_source.xhtml#l00053">ICLTensor.cpp:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_simple_function_8cpp_source.xhtml#l00039">ICLSimpleFunction.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00273">TensorInfo.h:273</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00041">CLScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler.cpp:154</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml_a1ffeb3b5abb3d61f62b58a391816201c"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">arm_compute::CLTensor::unmap</a></div><div class="ttdeci">void unmap()</div><div class="ttdoc">Enqueue an unmap operation of the allocated and mapped buffer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_8cpp_source.xhtml#l00071">CLTensor.cpp:71</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::TensorInfo::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Element size in bytes calculated as data_size() * num_channels()</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00249">TensorInfo.h:249</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For NEON kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77" title="Prepare the function for executing.">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00897">897</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;{</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="comment">// Acquire all the temporaries</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    MemoryGroupResourceScope scope_mg(_memory_group);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="comment">// Forget gate.</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    _mm_input_to_forget.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    _input_to_forget_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    _mm_recurrent_to_forget.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    _recurrent_to_forget_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_input_recurrent_forget);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    {</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_cell_to_forget);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        _cell_to_forget_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_cell_forget);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    }</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    {</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(get_layer_norm(LayerNormGate::Forget));</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    _forget_gate_sigmoid.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="comment">// Modulation gate.</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    _mm_input_to_cell.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    _input_to_cell_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    _mm_recurrent_to_cell.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    _recurrent_to_cell_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_input_recurrent_modulation);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    {</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(get_layer_norm(LayerNormGate::Cell));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    }</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    _cell_gate_tanh.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="comment">// Input gate</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">if</span>(_has_cifg)</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_input_gate_sub);</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    }</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    {</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        _mm_input_to_input.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        _input_to_input_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        _mm_recurrent_to_input.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        _recurrent_to_input_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_input_recurrent_input);</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        {</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_cell_to_input);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            _cell_to_input_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_cell_input);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        }</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        {</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(get_layer_norm(LayerNormGate::Input));</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        }</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        _input_gate_sigmoid.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    }</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="comment">// Cell.</span></div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_forget_cell);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_input_cell);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_add_forget_cell);</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keywordflow">if</span>(_has_cell_clipping)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    {</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        _cell_clip.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    }</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="comment">// Output gate.</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    _mm_input_to_output.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    _input_to_output_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    _mm_recurrent_to_output.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    _recurrent_to_output_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_input_recurrent_output);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordflow">if</span>(_has_peephole)</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    {</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_cell_to_output);</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        _cell_to_output_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_cell_to_output);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    }</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">if</span>(_has_layer_norm)</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    {</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(get_layer_norm(LayerNormGate::Output));</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    }</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    _output_gate_sigmoid.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="comment">// Hidden.</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    _hidden_tanh.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_pixelwise_mul_hidden);</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    _hidden_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <span class="comment">// Projection.</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keywordflow">if</span>(_has_projection)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    {</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        _mm_projection.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        _projection_outstage.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        {</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            _projection_output_to_accumulate_copy.run();</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        }</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_accumulate_projection);</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        {</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;            _projection_accumulate_to_output_copy.run();</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        }</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="keywordflow">if</span>(_has_projection_clipping)</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        {</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;            _projection_clip.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        }</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    }</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    {</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="keywordflow">if</span>(_projection_tensor_copy_required)</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        {</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;            _hidden_to_output_copy.run();</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        }</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    }</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="comment">// Copy output_state_out to output</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a>(_copy_output);</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLGEMMLowpMatrixMultiplyCore::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_matrix_multiply_core_8cpp_source.xhtml#l00480">CLGEMMLowpMatrixMultiplyCore.cpp:480</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_q_l_s_t_m_layer_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLQLSTMLayer::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01038">CLQLSTMLayer.cpp:1038</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_simple_function_8cpp_source.xhtml#l00039">ICLSimpleFunction.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler.cpp:154</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler::enqueue()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00099">CLScheduler::get()</a>.</p>

</div>
</div>
<a id="a8c31fb434071a8c3f6fb667794135431"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c31fb434071a8c3f6fb667794135431">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor info. Input is a 2D tensor info with dimensions [input_size, batch_size]. Data types supported: QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: QSYMM8. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: S32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor info with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D tensor info with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_out</td><td>Destination tensor info. Output is a 2D tensor info with dimensions [num_units, batch_size]. Data type supported: QSYMM16. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_out</td><td>Destination tensor info. Output is a 2D tensor info with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Destination tensor info. Output is a 2D tensor info with dimensions [output_size, batch_size].Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors info used in peephole, CIFG and layer normalization optimizations: input_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at input gate. forget_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at forget gate. cell_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at cell gate. output_intermediate_scale Scale of the intermediate result of matmul, i.e. input to layer normalization, at output gate. hidden_state_zero The zero point of the hidden state. hidden_state_scale The scale of the hidden state. input_to_input_weights (Optional) 2D weights tensor with dimensions [input_size, num_units]. Data type supported: QSYMM8. recurrent_to_input_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. cell_to_input_weights (Optional) 1D weights tensor with dimensions [num_units]. Can be nullptr. Data type supported: QSYMM16. cell_to_forget_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_to_output_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. input_gate_bias (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: S32. projection_weights (Optional) 2D weights tensor with dimensions [output_size, num_units]. Data type supported: QSYMM8. projection_bias (Optional) 1D weights tensor with dimensions [output_size]. S32. input_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. forget_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. output_layer_norm_weights (Optional) 1D weights tensor with dimensions [num_units]. Data type supported: QSYMM16. cell_threshold (Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0 then clipping is disabled. projection_threshold (Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0 then clipping is disabled. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00544">544</a> of file <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;{</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, cell_state_in, output_state_in,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                        cell_state_out, output_state_out, output);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;num_dimensions() != 2, <span class="stringliteral">&quot;Input must have exactly 2 dimensions&quot;</span>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(0);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_size  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_units   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;dimension(1);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a> = output_state_out-&gt;dimension(_out_state_output_size_dimension_idx);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;num_dimensions() != 2);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;dimension(0) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;num_dimensions() != 2);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;dimension(1) != num_units);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>-&gt;num_dimensions() != 1);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>-&gt;dimension(0) != num_units);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_state_in-&gt;num_dimensions() != 2);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_state_in-&gt;dimension(0) != num_units);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_state_in-&gt;dimension(1) != batch_size);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(cell_state_in, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output_state_in-&gt;num_dimensions() != 2);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output_state_in-&gt;dimension(0) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output_state_in-&gt;dimension(1) != batch_size);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output_state_in);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="comment">// Check whether peephole weights are all there or none</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.cell_to_forget_weights(), lstm_params.cell_to_output_weights());</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(lstm_params.cell_to_forget_weights(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_to_forget_weights()-&gt;num_dimensions() != 1);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_to_forget_weights()-&gt;dimension(0) != num_units);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(lstm_params.cell_to_forget_weights(), lstm_params.cell_to_output_weights());</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(lstm_params.cell_to_forget_weights(), lstm_params.cell_to_output_weights());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.cell_to_input_weights());</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(lstm_params.cell_to_forget_weights(), lstm_params.cell_to_input_weights());</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(lstm_params.cell_to_forget_weights(), lstm_params.cell_to_input_weights());</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qinput           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;quantization_info().uniform();</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qcell_state_in   = cell_state_in-&gt;quantization_info().uniform();</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qoutput_state_in = output_state_in-&gt;quantization_info().uniform();</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="comment">// Calculate and decompose effective scales for optimizing matmul calculation</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">const</span> int32_t cell_shift = log2(qcell_state_in.scale);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_shift &gt; -9);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="comment">// Calculate quantized parameters for clipping.</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    int16_t quantized_cell_clip = 0;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">if</span>(lstm_params.cell_clip() &gt; 0.0f)</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    {</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        quantized_cell_clip = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(lstm_params.cell_clip(), qcell_state_in);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="comment">// Precompute effective bias for optimizing the matmul computations.</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keyword">const</span> TensorInfo eff_bias_info(TensorShape(num_units), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keyword">const</span> TensorInfo projection_eff_bias_info(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    {</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(lstm_params.input_to_input_weights(), &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(lstm_params.recurrent_to_input_weights(), &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset,</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                                                                               <span class="keyword">true</span>)));</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    }</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qinput.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, &amp;eff_bias_info, GEMMLowpReductionKernelInfo(num_units, <span class="keyword">false</span>, -qoutput_state_in.offset, <span class="keyword">true</span>)));</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_projection())</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">CLGEMMLowpMatrixAReductionKernel::validate</a>(lstm_params.projection_weights(), &amp;projection_eff_bias_info, GEMMLowpReductionKernelInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, <span class="keyword">false</span>,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                                                               lstm_params.hidden_state_zero(),</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                                                               <span class="keyword">true</span>)));</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    }</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">const</span> TensorInfo input_weights_transposed(TensorShape(num_units, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">input_size</a>), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;data_type(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;quantization_info());</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">const</span> TensorInfo recurrent_weights_transposed(TensorShape(num_units, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;data_type(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;quantization_info());</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="comment">// Validate weights transpose</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, &amp;input_weights_transposed));</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, &amp;input_weights_transposed));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, &amp;input_weights_transposed));</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, &amp;recurrent_weights_transposed));</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, &amp;recurrent_weights_transposed));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, &amp;recurrent_weights_transposed));</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(lstm_params.input_to_input_weights(), &amp;input_weights_transposed));</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(lstm_params.recurrent_to_input_weights(), &amp;recurrent_weights_transposed));</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_projection())</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keyword">const</span> TensorInfo projection_weights_transposed(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, num_units), 1, lstm_params.projection_weights()-&gt;data_type(), lstm_params.projection_weights()-&gt;quantization_info());</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">CLTranspose::validate</a>(lstm_params.projection_weights(), &amp;projection_weights_transposed));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    }</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    GEMMLowpOutputStageInfo gemmlowp_info;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    gemmlowp_info.type               = <a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a>;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    gemmlowp_info.gemmlowp_min_bound = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>();</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    gemmlowp_info.gemmlowp_max_bound = std::numeric_limits&lt;int16_t&gt;::max();</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    gemmlowp_info.output_data_type   = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> has_layer_norm = lstm_params.use_layer_norm();</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// Forget gate.</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">const</span> TensorInfo forget_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.forget_intermediate_scale(), 0));</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keyword">const</span> TensorInfo mm_out_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_forget_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;input_weights_transposed, &amp;eff_bias_info, input_to_forget_scale, &amp;mm_out_info, &amp;forget_outstage_info));</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_forget_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, output_state_in, &amp;recurrent_weights_transposed, &amp;eff_bias_info, recurrent_to_forget_scale, &amp;mm_out_info, &amp;forget_outstage_info));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;forget_outstage_info, &amp;forget_outstage_info, &amp;forget_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    {</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(lstm_params.cell_to_forget_weights(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(cell_state_in, lstm_params.cell_to_forget_weights(), &amp;mm_out_info, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                                                              <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> cell_to_forget_scale = std::pow(2, cell_shift) * lstm_params.cell_to_forget_weights()-&gt;quantization_info().uniform().scale / lstm_params.forget_intermediate_scale();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(cell_to_forget_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift));</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8014f142f8a43df8229c8d418f747f8a">CLGEMMLowpOutputStage::validate</a>(&amp;mm_out_info, <span class="keyword">nullptr</span>, &amp;forget_outstage_info, gemmlowp_info));</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;forget_outstage_info, &amp;forget_outstage_info, &amp;forget_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    }</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">if</span>(has_layer_norm)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <span class="keyword">const</span> ITensorInfo *w_info = lstm_params.forget_layer_norm_weights();</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">const</span> ITensorInfo *b_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_layer_norm(forget_outstage_info, *w_info, *b_info));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="comment">// Output quantization info of Sigmoid and Tanh activations</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keyword">const</span> QuantizationInfo sigmoid_tanh_outqinfo(1.f / 32768.f, 0);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keyword">const</span> TensorInfo forget_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;forget_outstage_info, &amp;forget_gate_info, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>)));</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="comment">// Modulation gate.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keyword">const</span> TensorInfo cell_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.cell_intermediate_scale(), 0));</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_cell_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.cell_intermediate_scale();</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;input_weights_transposed, &amp;eff_bias_info, input_to_cell_scale, &amp;mm_out_info, &amp;cell_outstage_info));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_cell_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.cell_intermediate_scale();</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, output_state_in, &amp;input_weights_transposed, &amp;eff_bias_info, recurrent_to_cell_scale, &amp;mm_out_info, &amp;cell_outstage_info));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;cell_outstage_info, &amp;cell_outstage_info, &amp;cell_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keywordflow">if</span>(has_layer_norm)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keyword">const</span> ITensorInfo *w_info = lstm_params.cell_layer_norm_weights();</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="keyword">const</span> ITensorInfo *b_info = cell_bias;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_layer_norm(cell_outstage_info, *w_info, *b_info));</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keyword">const</span> TensorInfo cell_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;cell_outstage_info, &amp;cell_gate_info, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>, 1.f, 1.f)));</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="comment">// Input gate.</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keyword">const</span> TensorInfo input_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_cifg_opt())</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(lstm_params.input_gate_bias() != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Input gate bias must not be present when CIFG is used&quot;</span>);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a>, &amp;input_gate_info, &amp;forget_gate_info, &amp;forget_gate_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <a class="code" href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.input_to_input_weights(), lstm_params.recurrent_to_input_weights(), lstm_params.input_gate_bias());</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, lstm_params.input_to_input_weights(), lstm_params.recurrent_to_input_weights());</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, lstm_params.input_to_input_weights());</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, lstm_params.recurrent_to_input_weights());</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, lstm_params.input_gate_bias());</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, lstm_params.input_gate_bias());</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keyword">const</span> TensorInfo input_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.input_intermediate_scale(), 0));</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_input_scale = lstm_params.input_to_input_weights()-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;input_weights_transposed, &amp;eff_bias_info, input_to_input_scale, &amp;mm_out_info, &amp;input_outstage_info));</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_input_scale = lstm_params.recurrent_to_input_weights()-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, output_state_in, &amp;recurrent_weights_transposed, &amp;eff_bias_info, recurrent_to_input_scale, &amp;mm_out_info, &amp;input_outstage_info));</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;input_outstage_info, &amp;input_outstage_info, &amp;input_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(cell_state_in, lstm_params.cell_to_input_weights(), &amp;mm_out_info, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                                                                  <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> cell_to_input_scale = std::pow(2, cell_shift) * lstm_params.cell_to_input_weights()-&gt;quantization_info().uniform().scale / lstm_params.input_intermediate_scale();</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(cell_to_input_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift));</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8014f142f8a43df8229c8d418f747f8a">CLGEMMLowpOutputStage::validate</a>(&amp;mm_out_info, &amp;eff_bias_info, &amp;input_outstage_info, gemmlowp_info));</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;input_outstage_info, &amp;input_outstage_info, &amp;input_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        }</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">if</span>(has_layer_norm)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keyword">const</span> ITensorInfo *w_info = lstm_params.input_layer_norm_weights();</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keyword">const</span> ITensorInfo *b_info = lstm_params.input_gate_bias();</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_layer_norm(cell_outstage_info, *w_info, *b_info));</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        }</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;input_outstage_info, &amp;input_gate_info, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>, 1.f, 1.f)));</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    }</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="comment">// Cell.</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(&amp;forget_gate_info, cell_state_in, &amp;forget_gate_info, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(&amp;input_gate_info, cell_state_in, &amp;cell_gate_info, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;forget_gate_info, &amp;cell_gate_info, cell_state_out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">if</span>(quantized_cell_clip &gt; 0)</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(cell_state_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -quantized_cell_clip,</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                                                                                             quantized_cell_clip)));</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    }</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="comment">// Output gate.</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keyword">const</span> TensorInfo output_outstage_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, QuantizationInfo(lstm_params.output_intermediate_scale(), 0));</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>      input_to_output_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;quantization_info().uniform().scale * qinput.scale / lstm_params.output_intermediate_scale();</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;input_weights_transposed, &amp;eff_bias_info, input_to_output_scale, &amp;mm_out_info, &amp;output_outstage_info));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> recurrent_to_output_scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;quantization_info().uniform().scale * qoutput_state_in.scale / lstm_params.output_intermediate_scale();</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, output_state_in, &amp;recurrent_weights_transposed, &amp;eff_bias_info, recurrent_to_output_scale, &amp;mm_out_info, &amp;output_outstage_info));</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;output_outstage_info, &amp;output_outstage_info, &amp;output_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <a class="code" href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(lstm_params.cell_to_output_weights(), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        <span class="comment">// TODO(COMPMID-3395): Perform multiplication in the quantized domain in NEPixelWiseMultiplicationKernel</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="comment">// Here we are not using the output stage because all operations are done in float</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="comment">// const float cell_to_output_scale = std::pow(2, cell_shift) * lstm_params.cell_to_output_weights()-&gt;quantization_info().uniform().scale / lstm_params.output_intermediate_scale();</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="comment">// ARM_COMPUTE_RETURN_ON_ERROR(quantization::calculate_quantized_multiplier(cell_to_output_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift));</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(cell_state_out, lstm_params.cell_to_output_weights(), &amp;output_outstage_info, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                                                              <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, &amp;output_outstage_info, &amp;output_outstage_info, &amp;output_outstage_info, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">if</span>(has_layer_norm)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    {</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        <span class="keyword">const</span> ITensorInfo *w_info = lstm_params.output_layer_norm_weights();</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        <span class="keyword">const</span> ITensorInfo *b_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_layer_norm(output_outstage_info, *w_info, *b_info));</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    }</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="keyword">const</span> TensorInfo output_gate_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>, sigmoid_tanh_outqinfo);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;output_outstage_info, &amp;output_gate_info, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>)));</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="comment">// Hidden.</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(cell_state_out, &amp;input_gate_info, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::ActivationFunction::TANH</a>, 1.f, 1.f)));</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="keyword">const</span> TensorInfo hidden_mul_res(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keyword">const</span> TensorInfo hidden_out_info(TensorShape(num_units, batch_size), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplicationKernel::validate</a>(&amp;output_gate_info, &amp;input_gate_info, &amp;hidden_mul_res, 1.f, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>));</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> hidden_state_scale = std::pow(2, -15) / lstm_params.hidden_state_scale() * std::pow(2, -15);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(hidden_state_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift, <span class="comment">/* ignore_epsilon */</span> <span class="keyword">true</span>));</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    gemmlowp_info.gemmlowp_offset = lstm_params.hidden_state_zero();</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8014f142f8a43df8229c8d418f747f8a">CLGEMMLowpOutputStage::validate</a>(&amp;hidden_mul_res, <span class="keyword">nullptr</span>, &amp;hidden_out_info, gemmlowp_info));</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> projection_tensor_copy_required = num_units != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="comment">// Projection.</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_projection())</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    {</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, lstm_params.projection_weights());</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, lstm_params.projection_bias());</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo qprojection      = lstm_params.projection_weights()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>                   projection_scale = qprojection.scale * lstm_params.hidden_state_scale() / qoutput_state_in.scale;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">quantization::calculate_quantized_multiplier</a>(projection_scale, &amp;gemmlowp_info.gemmlowp_multiplier, &amp;gemmlowp_info.gemmlowp_shift));</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        gemmlowp_info.gemmlowp_offset    = qoutput_state_in.offset;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        gemmlowp_info.gemmlowp_min_bound = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>();</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        gemmlowp_info.gemmlowp_max_bound = std::numeric_limits&lt;int8_t&gt;::max();</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        gemmlowp_info.output_data_type   = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <span class="keyword">const</span> TensorInfo projection_outstage_info(*output_state_out);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keyword">const</span> TensorInfo projection_weights_transposed(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, num_units), 1, lstm_params.projection_weights()-&gt;data_type(), lstm_params.projection_weights()-&gt;quantization_info());</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        TensorInfo projection_mm_out_info{ mm_out_info };</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        projection_mm_out_info.set_tensor_shape(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">output_size</a>, batch_size));</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_mm(gemmlowp_info, &amp;hidden_out_info, &amp;projection_weights_transposed, &amp;projection_eff_bias_info, projection_scale, &amp;projection_mm_out_info,</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                                                &amp;projection_outstage_info));</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <span class="keywordflow">if</span>(projection_tensor_copy_required)</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        {</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">CLQLSTMLayer::TensorCopyKernel::validate</a>(*output_state_out, projection_outstage_info));</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        }</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">CLSaturatedArithmeticOperationKernel::validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a>, output_state_out, output_state_out, output_state_out, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keywordflow">if</span>(projection_tensor_copy_required)</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        {</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">CLQLSTMLayer::TensorCopyKernel::validate</a>(projection_outstage_info, *output_state_out));</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        }</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        int8_t quantized_projection_clip{ 0 };</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keywordflow">if</span>(lstm_params.projection_clip() &gt; 0.0f)</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        {</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            quantized_projection_clip = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(lstm_params.projection_clip(), qprojection);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        }</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="keywordflow">if</span>(quantized_projection_clip &gt; 0)</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        {</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(output_state_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -quantized_projection_clip,</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                                                                                                   quantized_projection_clip)));</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        }</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    }</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    {</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        <span class="keywordflow">if</span>(projection_tensor_copy_required)</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        {</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">CLQLSTMLayer::TensorCopyKernel::validate</a>(hidden_out_info, *output_state_out));</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        }</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    }</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keywordflow">if</span>(cell_state_out-&gt;total_size() &gt; 0)</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    {</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(cell_state_in, cell_state_out);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(cell_state_in, cell_state_out);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    }</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keywordflow">if</span>(output_state_out-&gt;total_size() &gt; 0)</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    {</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        <a class="code" href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output_state_out);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <a class="code" href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>(output_state_in, output_state_out);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    }</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_copy_kernel.xhtml#a27b2f705eda7702c5835196e160b111f">CLCopyKernel::validate</a>(output_state_out, output));</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_activation_layer_xhtml_aa37e2d0b4cd4f835bfa2a2df4a0bdd2c"><div class="ttname"><a href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">arm_compute::CLActivationLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLActivationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_activation_layer_8cpp_source.xhtml#l00050">CLActivationLayer.cpp:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a507bd7e4d98cb3e45d3e820d8bac422a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">arm_compute::test::validation::output_gate_bias</a></div><div class="ttdeci">auto output_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">LSTMLayerQuantized.cpp:484</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00427">QuantizationInfo.h:427</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdoc">Quantize using a fixed point multiplication.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00545">Validate.h:545</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a55daaf57fb833fc416d779c28f7a3c85"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">arm_compute::test::validation::forget_gate_bias</a></div><div class="ttdeci">auto forget_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">LSTMLayerQuantized.cpp:482</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ArithmeticOperation::ADD</a></div><div class="ttdoc">(x + y)</div></div>
<div class="ttc" id="_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00792">Validate.h:792</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac62dfdcc14798598d953342789c9927e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">arm_compute::test::validation::recurrent_to_forget_weights</a></div><div class="ttdeci">auto recurrent_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">LSTMLayerQuantized.cpp:478</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00243">ToolchainSupport.h:243</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac547a66fe26967afb94760061ee0d0d1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">arm_compute::test::validation::input_to_cell_weights</a></div><div class="ttdeci">auto input_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">LSTMLayerQuantized.cpp:475</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">LSTMLayerQuantized.cpp:487</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aab02df8a9ee45153f2fd76e934407fbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">arm_compute::test::validation::recurrent_to_output_weights</a></div><div class="ttdeci">auto recurrent_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">LSTMLayerQuantized.cpp:480</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage_xhtml_a8014f142f8a43df8229c8d418f747f8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml#a8014f142f8a43df8229c8d418f747f8a">arm_compute::CLGEMMLowpOutputStage::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, const GEMMLowpOutputStageInfo &amp;info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMLowpQuantizeDownIn...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00242">CLGEMMLowpOutputStage.cpp:242</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ace4dd633420fa8d8aa71f60ff730f01f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">arm_compute::test::validation::input_to_output_weights</a></div><div class="ttdeci">auto input_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">LSTMLayerQuantized.cpp:476</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel_xhtml_ab8a2affed84fcb02163a828fd8a37bfd"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">arm_compute::CLPixelWiseMultiplicationKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLPixelWiseMultiplicatio...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00259">CLPixelWiseMultiplicationKernel.cpp:259</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_a27e4638546c88b8916f967e6e54480a9"><div class="ttname"><a href="_validate_8h.xhtml#a27e4638546c88b8916f967e6e54480a9">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00443">Validate.h:443</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00297">QuantizationInfo.h:297</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_copy_kernel_xhtml_a27b2f705eda7702c5835196e160b111f"><div class="ttname"><a href="classarm__compute_1_1_c_l_copy_kernel.xhtml#a27b2f705eda7702c5835196e160b111f">arm_compute::CLCopyKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const PaddingList &amp;padding=PaddingList(), Window *output_window=nullptr)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLCopyKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_copy_kernel_8cpp_source.xhtml#l00236">CLCopyKernel.cpp:236</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2236dfe2a3fc5fa4e125348829cbeb2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">arm_compute::test::validation::recurrent_to_cell_weights</a></div><div class="ttdeci">auto recurrent_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">LSTMLayerQuantized.cpp:479</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdoc">Logistic (  )</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml_aebf6a0c58aca10e93cda09f6dfad4583"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">arm_compute::CLSaturatedArithmeticOperationKernel::validate</a></div><div class="ttdeci">static Status validate(ArithmeticOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ConvertPolicy &amp;policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLSaturatedArithmeticOpe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00350">CLElementwiseOperationKernel.cpp:350</a></div></div>
<div class="ttc" id="_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00163">Validate.h:163</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">arm_compute::ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a></div><div class="ttdoc">Lower and Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_transpose_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_transpose.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLTranspose::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLTranspose.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_transpose_8cpp_source.xhtml#l00045">CLTranspose.cpp:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">arm_compute::ActivationLayerInfo::ActivationFunction::TANH</a></div><div class="ttdoc">Hyperbolic tangent (  )</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6bb1fa96fb01419887f07ecd236c8cd4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6bb1fa96fb01419887f07ecd236c8cd4">arm_compute::test::validation::input_size</a></div><div class="ttdeci">const int input_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00459">LSTMLayerQuantized.cpp:459</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel_xhtml_a0f66fad62612f272ca82c4a3aeeb2454"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.xhtml#a0f66fad62612f272ca82c4a3aeeb2454">arm_compute::CLGEMMLowpMatrixAReductionKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *mtx_a, const ITensorInfo *vector_sum_row, const GEMMLowpReductionKernelInfo &amp;info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMMLowpMatrixAReducti...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_lowp_reduction_kernel_8cpp_source.xhtml#l00134">CLGEMMLowpReductionKernel.cpp:134</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::ArithmeticOperation::SUB</a></div><div class="ttdoc">(x - y)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad44f86834ae016bf696e8e664f39c136"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad44f86834ae016bf696e8e664f39c136">arm_compute::test::validation::output_size</a></div><div class="ttdeci">const int output_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00460">LSTMLayerQuantized.cpp:460</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3b793c410cba57a1395184692a018356"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">arm_compute::test::validation::input_to_forget_weights</a></div><div class="ttdeci">auto input_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">LSTMLayerQuantized.cpp:474</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00210">CPPBoxWithNonMaximaSuppressionLimit.cpp:210</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">arm_compute::ADD</a>, <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_validate_8h_source.xhtml#l00792">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="_validate_8h_source.xhtml#l00545">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="_validate_8h_source.xhtml#l00443">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES</a>, <a class="el" href="_error_8h_source.xhtml#l00244">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>, <a class="el" href="_validate_8h_source.xhtml#l00163">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">arm_compute::quantization::calculate_quantized_multiplier()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00257">LSTMParams&lt; T &gt;::cell_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00277">LSTMParams&lt; T &gt;::cell_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00247">LSTMParams&lt; T &gt;::cell_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00217">LSTMParams&lt; T &gt;::cell_to_forget_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00207">LSTMParams&lt; T &gt;::cell_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00222">LSTMParams&lt; T &gt;::cell_to_output_weights()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00482">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00272">LSTMParams&lt; T &gt;::forget_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00242">LSTMParams&lt; T &gt;::forget_layer_norm_weights()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01888">GEMMLowpOutputStageInfo::gemmlowp_max_bound</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01887">GEMMLowpOutputStageInfo::gemmlowp_min_bound</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01885">GEMMLowpOutputStageInfo::gemmlowp_multiplier</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01884">GEMMLowpOutputStageInfo::gemmlowp_offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01886">GEMMLowpOutputStageInfo::gemmlowp_shift</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00307">LSTMParams&lt; T &gt;::has_cifg_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00297">LSTMParams&lt; T &gt;::has_peephole_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00302">LSTMParams&lt; T &gt;::has_projection()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00292">LSTMParams&lt; T &gt;::hidden_state_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00287">LSTMParams&lt; T &gt;::hidden_state_zero()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00487">arm_compute::test::validation::input</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00212">LSTMParams&lt; T &gt;::input_gate_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00267">LSTMParams&lt; T &gt;::input_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00237">LSTMParams&lt; T &gt;::input_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00459">arm_compute::test::validation::input_size</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00197">LSTMParams&lt; T &gt;::input_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00476">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00243">arm_compute::support::cpp11::lowest()</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01893">GEMMLowpOutputStageInfo::output_data_type</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00484">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00282">LSTMParams&lt; T &gt;::output_intermediate_scale()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00252">LSTMParams&lt; T &gt;::output_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00460">arm_compute::test::validation::output_size</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00232">LSTMParams&lt; T &gt;::projection_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00262">LSTMParams&lt; T &gt;::projection_clip()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00227">LSTMParams&lt; T &gt;::projection_weights()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::QSYMM8</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::QUANTIZE_DOWN_FIXEDPOINT</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00297">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00427">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00202">LSTMParams&lt; T &gt;::recurrent_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00480">arm_compute::test::validation::recurrent_to_output_weights</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00065">UniformQuantizationInfo::scale</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00350">TensorInfo::set_tensor_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">arm_compute::SUB</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa143c8c6f51b9bb893ce71e38702e3cc1">ActivationLayerInfo::TANH</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::TO_ZERO</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01883">GEMMLowpOutputStageInfo::type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00149">QuantizationInfo::uniform()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00312">LSTMParams&lt; T &gt;::use_layer_norm()</a>, <a class="el" href="_c_l_transpose_8cpp_source.xhtml#l00045">CLTranspose::validate()</a>, <a class="el" href="_c_l_copy_kernel_8cpp_source.xhtml#l00236">CLCopyKernel::validate()</a>, <a class="el" href="_c_l_activation_layer_8cpp_source.xhtml#l00050">CLActivationLayer::validate()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_kernel_8cpp_source.xhtml#l00259">CLPixelWiseMultiplicationKernel::validate()</a>, <a class="el" href="_c_l_g_e_m_m_lowp_reduction_kernel_8cpp_source.xhtml#l00134">CLGEMMLowpMatrixAReductionKernel::validate()</a>, <a class="el" href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00350">CLSaturatedArithmeticOperationKernel::validate()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00210">arm_compute::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_lowp_output_stage_8cpp_source.xhtml#l00242">CLGEMMLowpOutputStage::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00125">CLQLSTMLayer::configure()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_q_l_s_t_m_layer_8h_source.xhtml">CLQLSTMLayer.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml">CLQLSTMLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a></li>
    <li class="footer">Generated on Thu May 28 2020 12:10:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
