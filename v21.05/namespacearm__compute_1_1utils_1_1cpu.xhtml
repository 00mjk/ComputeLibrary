<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::utils::cpu Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1utils_1_1cpu.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::utils::cpu Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a92d01d03db1530581737484c1290ca16"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1cpu.xhtml#a92d01d03db1530581737484c1290ca16">get_cpu_configuration</a> (<a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;cpuinfo)</td></tr>
<tr class="memdesc:a92d01d03db1530581737484c1290ca16"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function will try to detect the CPU configuration on the system and will fill the cpuinfo object accordingly to reflect this.  <a href="#a92d01d03db1530581737484c1290ca16">More...</a><br /></td></tr>
<tr class="separator:a92d01d03db1530581737484c1290ca16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9fa44b29bc17746a0b486626a76e0a"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1cpu.xhtml#a9a9fa44b29bc17746a0b486626a76e0a">get_threads_hint</a> ()</td></tr>
<tr class="memdesc:a9a9fa44b29bc17746a0b486626a76e0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Some systems have both big and small cores, this fuction computes the minimum number of cores that are exactly the same on the system.  <a href="#a9a9fa44b29bc17746a0b486626a76e0a">More...</a><br /></td></tr>
<tr class="separator:a9a9fa44b29bc17746a0b486626a76e0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a92d01d03db1530581737484c1290ca16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92d01d03db1530581737484c1290ca16">&#9670;&nbsp;</a></span>get_cpu_configuration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_cpu_configuration </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cpuinfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function will try to detect the CPU configuration on the system and will fill the cpuinfo object accordingly to reflect this. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">cpuinfo</td><td><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> to be used to hold the system's cpu configuration. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00405">405</a> of file <a class="el" href="_c_p_u_utils_8cpp_source.xhtml">CPUUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; (defined(__arm__) || defined(__aarch64__))</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordtype">bool</span>           cpuid               = <span class="keyword">false</span>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordtype">bool</span>           hwcaps_fp16_support = <span class="keyword">false</span>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordtype">bool</span>           hwcaps_dot_support  = <span class="keyword">false</span>;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordtype">bool</span>           hwcaps_sve          = <span class="keyword">false</span>;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> uint32_t hwcaps              = getauxval(AT_HWCAP);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">if</span>((hwcaps &amp; <a class="code" href="_c_p_u_utils_8cpp.xhtml#a81886f53bcc05e6aa40366dcee3c80cc">HWCAP_CPUID</a>) != 0)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        cpuid = <span class="keyword">true</span>;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">if</span>((hwcaps &amp; <a class="code" href="_c_p_u_utils_8cpp.xhtml#a3adcaa91ed4b68e8939a5175133460d5">HWCAP_ASIMDHP</a>) != 0)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        hwcaps_fp16_support = <span class="keyword">true</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">#if defined(__aarch64__)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">if</span>((hwcaps &amp; <a class="code" href="_c_p_u_utils_8cpp.xhtml#af2e3430d5d0940d0a78029eb50f69234">HWCAP_ASIMDDP</a>) != 0)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        hwcaps_dot_support = <span class="keyword">true</span>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">if</span>((hwcaps &amp; <a class="code" href="_c_p_u_utils_8cpp.xhtml#ab2c13d2602839927c75b5d81884066a1">HWCAP_SVE</a>) != 0)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        hwcaps_sve = <span class="keyword">true</span>;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__aarch64__) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_cpus = get_max_cpus();</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#aba3b726afdf36bdcd7496e1bfb523e71">set_cpu_num</a>(max_cpus);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    std::vector&lt;CPUModel&gt; percpu(max_cpus, CPUModel::GENERIC);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">if</span>(cpuid)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        populate_models_cpuid(percpu);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        populate_models_cpuinfo(percpu);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordtype">int</span> j(0);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="comment">// Update dot product and FP16 support if one of the CPUs support these features</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// We assume that the system does not have mixed architectures</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordtype">bool</span> one_supports_dot  = <span class="keyword">false</span>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">bool</span> one_supports_fp16 = <span class="keyword">false</span>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordtype">bool</span> one_supports_sve  = <span class="keyword">false</span>;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;v : percpu)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        one_supports_dot  = one_supports_dot || model_supports_dot(v);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        one_supports_fp16 = one_supports_fp16 || model_supports_fp16(v);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        one_supports_sve  = one_supports_sve || model_supports_sve(v);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#acb24f7c57aaeee1da27db2b4b52434ee">set_cpu_model</a>(j++, v);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    }</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a6d2db590ac4d869e8feb648beb80fcea">set_dotprod</a>(one_supports_dot || hwcaps_dot_support);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a6dfc7d658828318e6c54988913c22ec7">set_fp16</a>(one_supports_fp16 || hwcaps_fp16_support);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a4e4376faa871a47255c5789e36c97552">set_sve</a>(one_supports_sve || hwcaps_sve);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="preprocessor">#elif(BARE_METAL) &amp;&amp; defined(__aarch64__) </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#aba3b726afdf36bdcd7496e1bfb523e71">set_cpu_num</a>(1);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CPUModel</a> cpumodel{ CPUModel::GENERIC };</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#acb24f7c57aaeee1da27db2b4b52434ee">set_cpu_model</a>(0, cpumodel);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="comment">// Assume single CPU in bare metal mode.  Just read the ID register and feature bits directly.</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    uint64_t fr0, pfr0, midr;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    __asm __volatile(</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="stringliteral">&quot;MRS  %0, ID_AA64ISAR0_EL1\n&quot;</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="stringliteral">&quot;MRS  %1, ID_AA64PFR0_EL1\n&quot;</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="stringliteral">&quot;MRS  %2, midr_el1&quot;</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        : <span class="stringliteral">&quot;=r&quot;</span>(fr0), <span class="stringliteral">&quot;=r&quot;</span>(pfr0), <span class="stringliteral">&quot;=r&quot;</span>(midr));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">if</span>((fr0 &gt;&gt; 44) &amp; 0xf)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a6d2db590ac4d869e8feb648beb80fcea">set_dotprod</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordflow">if</span>((pfr0 &gt;&gt; 16) &amp; 0xf)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a6dfc7d658828318e6c54988913c22ec7">set_fp16</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    }</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">if</span>((pfr0 &gt;&gt; 32) &amp; 0xf)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        cpuinfo.<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a4e4376faa871a47255c5789e36c97552">set_sve</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="preprocessor">#else                                     </span><span class="comment">/* #elif(BARE_METAL) &amp;&amp; defined(__aarch64__)  */</span><span class="preprocessor"></span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(cpuinfo);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor">#endif                                    </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div><div class="ttc" id="_c_p_u_utils_8cpp_xhtml_af2e3430d5d0940d0a78029eb50f69234"><div class="ttname"><a href="_c_p_u_utils_8cpp.xhtml#af2e3430d5d0940d0a78029eb50f69234">HWCAP_ASIMDDP</a></div><div class="ttdeci">#define HWCAP_ASIMDDP</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_u_utils_8cpp_source.xhtml#l00062">CPUUtils.cpp:62</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">arm_compute::CPUModel</a></div><div class="ttdeci">CPUModel</div><div class="ttdoc">CPU models - we only need to detect CPUs we have microarchitecture-specific code for.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00040">CPPTypes.h:40</a></div></div>
<div class="ttc" id="_c_p_u_utils_8cpp_xhtml_a81886f53bcc05e6aa40366dcee3c80cc"><div class="ttname"><a href="_c_p_u_utils_8cpp.xhtml#a81886f53bcc05e6aa40366dcee3c80cc">HWCAP_CPUID</a></div><div class="ttdeci">#define HWCAP_CPUID</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_u_utils_8cpp_source.xhtml#l00058">CPUUtils.cpp:58</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_c_p_u_utils_8cpp_xhtml_ab2c13d2602839927c75b5d81884066a1"><div class="ttname"><a href="_c_p_u_utils_8cpp.xhtml#ab2c13d2602839927c75b5d81884066a1">HWCAP_SVE</a></div><div class="ttdeci">#define HWCAP_SVE</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_u_utils_8cpp_source.xhtml#l00066">CPUUtils.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_acb24f7c57aaeee1da27db2b4b52434ee"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#acb24f7c57aaeee1da27db2b4b52434ee">arm_compute::CPUInfo::set_cpu_model</a></div><div class="ttdeci">void set_cpu_model(unsigned int cpuid, CPUModel model)</div><div class="ttdoc">Set the cpumodel for a given cpu core.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00050">CPPTypes.cpp:50</a></div></div>
<div class="ttc" id="_c_p_u_utils_8cpp_xhtml_a3adcaa91ed4b68e8939a5175133460d5"><div class="ttname"><a href="_c_p_u_utils_8cpp.xhtml#a3adcaa91ed4b68e8939a5175133460d5">HWCAP_ASIMDHP</a></div><div class="ttdeci">#define HWCAP_ASIMDHP</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_u_utils_8cpp_source.xhtml#l00054">CPUUtils.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a4e4376faa871a47255c5789e36c97552"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a4e4376faa871a47255c5789e36c97552">arm_compute::CPUInfo::set_sve</a></div><div class="ttdeci">void set_sve(const bool sve)</div><div class="ttdoc">Set sve support.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00045">CPPTypes.cpp:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a6d2db590ac4d869e8feb648beb80fcea"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a6d2db590ac4d869e8feb648beb80fcea">arm_compute::CPUInfo::set_dotprod</a></div><div class="ttdeci">void set_dotprod(const bool dotprod)</div><div class="ttdoc">Set dot product support.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00040">CPPTypes.cpp:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a6dfc7d658828318e6c54988913c22ec7"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a6dfc7d658828318e6c54988913c22ec7">arm_compute::CPUInfo::set_fp16</a></div><div class="ttdeci">void set_fp16(const bool fp16)</div><div class="ttdoc">Set fp16 support.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00035">CPPTypes.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_aba3b726afdf36bdcd7496e1bfb523e71"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#aba3b726afdf36bdcd7496e1bfb523e71">arm_compute::CPUInfo::set_cpu_num</a></div><div class="ttdeci">void set_cpu_num(unsigned int cpu_count)</div><div class="ttdoc">Set max number of cpus.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00108">CPPTypes.cpp:108</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4ac942dc2a9f958acddc67e11472d3ca0b">arm_compute::GENERIC</a>, <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00062">HWCAP_ASIMDDP</a>, <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00054">HWCAP_ASIMDHP</a>, <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00058">HWCAP_CPUID</a>, <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00066">HWCAP_SVE</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00050">CPUInfo::set_cpu_model()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00108">CPUInfo::set_cpu_num()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00040">CPUInfo::set_dotprod()</a>, <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00035">CPUInfo::set_fp16()</a>, and <a class="el" href="_c_p_p_types_8cpp_source.xhtml#l00045">CPUInfo::set_sve()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_device_properties_8cpp_source.xhtml#l00030">DeviceProperties::DeviceProperties()</a>, and <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00034">IScheduler::IScheduler()</a>.</p>

</div>
</div>
<a id="a9a9fa44b29bc17746a0b486626a76e0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a9fa44b29bc17746a0b486626a76e0a">&#9670;&nbsp;</a></span>get_threads_hint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int get_threads_hint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Some systems have both big and small cores, this fuction computes the minimum number of cores that are exactly the same on the system. </p>
<p>To maximize performance the library attempts to process workloads concurrently using as many threads as big cores are available on the system.</p>
<dl class="section return"><dt>Returns</dt><dd>The minumum number of common cores. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_p_u_utils_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="_c_p_u_utils_8cpp_source.xhtml">CPUUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads_hint = 1;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL)</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    std::map&lt;std::string, unsigned int&gt; cpu_part_occurrence_map;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// CPU part regex</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    regex_t cpu_part_rgx;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    memset(&amp;cpu_part_rgx, 0, <span class="keyword">sizeof</span>(regex_t));</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordtype">int</span> ret_status = regcomp(&amp;cpu_part_rgx, R<span class="stringliteral">&quot;(.*CPU part.+/?\:[[:space:]]+([[:alnum:]]+).*)&quot;, REG_EXTENDED);</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ret_status);</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(ret_status != 0, </span><span class="stringliteral">&quot;Regex compilation failed.&quot;</span>);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">// Read cpuinfo and get occurrence of each core</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    std::ifstream cpuinfo;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    cpuinfo.open(<span class="stringliteral">&quot;/proc/cpuinfo&quot;</span>, std::ios::in);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordflow">if</span>(cpuinfo.is_open())</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        std::string line;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">while</span>(<span class="keywordtype">bool</span>(getline(cpuinfo, line)))</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            std::array&lt;regmatch_t, 2&gt; match;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            ret_status = regexec(&amp;cpu_part_rgx, line.c_str(), 2, match.data(), 0);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="keywordflow">if</span>(ret_status == 0)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                std::string cpu_part = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="keywordflow">if</span>(cpu_part_occurrence_map.find(cpu_part) != cpu_part_occurrence_map.end())</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    cpu_part_occurrence_map[cpu_part]++;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                }</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    cpu_part_occurrence_map[cpu_part] = 1;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            }</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    regfree(&amp;cpu_part_rgx);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="comment">// Get min number of threads</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">auto</span> min_common_cores = std::min_element(cpu_part_occurrence_map.begin(), cpu_part_occurrence_map.end(),</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                             [](<span class="keyword">const</span> std::pair&lt;std::string, unsigned int&gt; &amp;p1, <span class="keyword">const</span> std::pair&lt;std::string, unsigned int&gt; &amp;p2)</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">return</span> p1.second &lt; p2.second;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    });</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="comment">// Set thread hint</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    num_threads_hint = cpu_part_occurrence_map.empty() ? std::thread::hardware_concurrency() : min_common_cores-&gt;second;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">return</span> num_threads_hint;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00034">IScheduler::IScheduler()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils_1_1cpu.xhtml">cpu</a></li>
    <li class="footer">Generated on Tue May 18 2021 16:38:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
