<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: PoolingDepthfirstGeneric&lt; strategy &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">PoolingDepthfirstGeneric&lt; strategy &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for PoolingDepthfirstGeneric&lt; strategy &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic__coll__graph.svg" width="206" height="156"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1fb6656f0ca20bd911c0ca34e6ab403b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a1fb6656f0ca20bd911c0ca34e6ab403b">PoolingDepthfirstGeneric</a> (const PoolingArgs &amp;args)</td></tr>
<tr class="separator:a1fb6656f0ca20bd911c0ca34e6ab403b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac54b55daf0f672146144be1e4239ea5c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#ac54b55daf0f672146144be1e4239ea5c">PoolingDepthfirstGeneric</a> (<a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a> &amp;)=delete</td></tr>
<tr class="separator:ac54b55daf0f672146144be1e4239ea5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3e9d3dae140757d6281e17c36c76b6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#ad3e9d3dae140757d6281e17c36c76b6e">operator=</a> (<a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a> &amp;)=delete</td></tr>
<tr class="separator:ad3e9d3dae140757d6281e17c36c76b6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaba1cb07e00d5d4f99bb9ef64dc2789c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aaba1cb07e00d5d4f99bb9ef64dc2789c">sizeof_input_pointer_array</a> (void) const</td></tr>
<tr class="separator:aaba1cb07e00d5d4f99bb9ef64dc2789c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa135c6f8967b3be791a3f15f4f0c4178"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aa135c6f8967b3be791a3f15f4f0c4178">get_working_size</a> (unsigned int num_threads) const override</td></tr>
<tr class="separator:aa135c6f8967b3be791a3f15f4f0c4178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88fb68435d96f26e6b3bd757337d3b5d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a88fb68435d96f26e6b3bd757337d3b5d">execute</a> (const void *const input, void *const output, void *const working_space, unsigned int thread_id, unsigned int num_threads) const override</td></tr>
<tr class="separator:a88fb68435d96f26e6b3bd757337d3b5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87dd5cc7a95b1a90fcb3e2ad93d2fd74"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a87dd5cc7a95b1a90fcb3e2ad93d2fd74">execute</a> (const void *const input, size_t ld_input_col, size_t ld_input_row, size_t ld_input_batch, void *const output, size_t ld_output_col, size_t ld_output_row, size_t ld_output_batch, void *const working_space, unsigned int thread_id, unsigned int num_threads) const override</td></tr>
<tr class="separator:a87dd5cc7a95b1a90fcb3e2ad93d2fd74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae34a2de8fcc264279e6ffdafa7a011d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#ae34a2de8fcc264279e6ffdafa7a011d4">execute</a> (unsigned int <a class="el" href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>, unsigned int height, unsigned int width, unsigned int channels, const void *const _input, size_t ld_input_col, size_t ld_input_row, size_t ld_input_batch, const PaddingValues &amp;padding, unsigned int output_height, unsigned int output_width, void *const _output, size_t ld_output_col, size_t ld_output_row, size_t ld_output_batch, void *const _working_space, unsigned int thread_id, unsigned int num_threads) const override</td></tr>
<tr class="separator:ae34a2de8fcc264279e6ffdafa7a011d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class strategy&gt;<br />
class arm_conv::pooling::PoolingDepthfirstGeneric&lt; strategy &gt;</h3>


<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1fb6656f0ca20bd911c0ca34e6ab403b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fb6656f0ca20bd911c0ca34e6ab403b">&#9670;&nbsp;</a></span>PoolingDepthfirstGeneric() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a> </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                                    : m_args(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  }</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac54b55daf0f672146144be1e4239ea5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac54b55daf0f672146144be1e4239ea5c">&#9670;&nbsp;</a></span>PoolingDepthfirstGeneric() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a>&lt; strategy &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a88fb68435d96f26e6b3bd757337d3b5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88fb68435d96f26e6b3bd757337d3b5d">&#9670;&nbsp;</a></span>execute() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>working_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>thread_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00069">69</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_col = m_args.n_channels;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_row = ld_input_col * m_args.input_cols;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_input_batch = ld_input_row * m_args.input_rows;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_col = ld_input_col;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_row = ld_output_col * m_args.output_cols;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> ld_output_batch = ld_output_row * m_args.output_rows;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a88fb68435d96f26e6b3bd757337d3b5d">execute</a>(</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, ld_input_col, ld_input_row, ld_input_batch,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      output, ld_output_col, ld_output_row, ld_output_batch,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      working_space,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      thread_id, num_threads</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    );</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic_xhtml_a88fb68435d96f26e6b3bd757337d3b5d"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a88fb68435d96f26e6b3bd757337d3b5d">arm_conv::pooling::PoolingDepthfirstGeneric::execute</a></div><div class="ttdeci">void execute(const void *const input, void *const output, void *const working_space, unsigned int thread_id, unsigned int num_threads) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__generic_8hpp_source.xhtml#l00069">pooling_depthfirst_generic.hpp:69</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00092">PoolingDepthfirstGeneric&lt; strategy &gt;::execute()</a>.</p>

</div>
</div>
<a id="a87dd5cc7a95b1a90fcb3e2ad93d2fd74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87dd5cc7a95b1a90fcb3e2ad93d2fd74">&#9670;&nbsp;</a></span>execute() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>working_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>thread_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00092">92</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a88fb68435d96f26e6b3bd757337d3b5d">execute</a>(</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      m_args.n_batches, m_args.input_rows, m_args.input_cols,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      m_args.n_channels,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, ld_input_col, ld_input_row, ld_input_batch,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      m_args.padding,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      m_args.output_rows, m_args.output_cols,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      output, ld_output_col, ld_output_row, ld_output_batch,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      working_space,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      thread_id, num_threads</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    );</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic_xhtml_a88fb68435d96f26e6b3bd757337d3b5d"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#a88fb68435d96f26e6b3bd757337d3b5d">arm_conv::pooling::PoolingDepthfirstGeneric::execute</a></div><div class="ttdeci">void execute(const void *const input, void *const output, void *const working_space, unsigned int thread_id, unsigned int num_threads) const override</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__generic_8hpp_source.xhtml#l00069">pooling_depthfirst_generic.hpp:69</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00069">PoolingDepthfirstGeneric&lt; strategy &gt;::execute()</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="ae34a2de8fcc264279e6ffdafa7a011d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae34a2de8fcc264279e6ffdafa7a011d4">&#9670;&nbsp;</a></span>execute() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>batches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>_input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_input_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PaddingValues &amp;&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_output_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_working_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>thread_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00118">118</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    strategy strat(m_args.cpu_info);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    arm_gemm::profiler prof;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#endif // CYCLE_PROFILING</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> roundup_output_rows = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(output_height, num_threads);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rows_per_thread = roundup_output_rows / num_threads;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">int</span> start_out_height = static_cast&lt;int&gt;(thread_id * rows_per_thread);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">int</span> end_out_height = std::min&lt;int&gt;(output_height, static_cast&lt;int&gt;((thread_id + 1) * rows_per_thread));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_channel = 0;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end_channel = channels;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span>(output_height == 1)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channels_per_thread = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(channels, num_threads) / num_threads;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      start_channel = thread_id * channels_per_thread;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      end_channel = std::min(start_channel + channels_per_thread, channels);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="comment">// Reset start and end rows</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      start_out_height = 0;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      end_out_height = output_height;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span>(start_channel &gt;= end_channel)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// Early exit in case of multiple threads parallelising on channels</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Cast input and output pointers into the right types</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> TInput *<span class="keyword">const</span> inptr = static_cast&lt;const TInput *&gt;(_input) + start_channel;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    TOutput *<span class="keyword">const</span> outptr = static_cast&lt;TOutput *&gt;(_output) + start_channel;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Grab the input pointer array</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    uint8_t *<span class="keyword">const</span> working_space = static_cast&lt;uint8_t *&gt;(_working_space);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> TInput **<span class="keyword">const</span> inptr_array = reinterpret_cast&lt;const TInput **&gt;(working_space + thread_id * <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aaba1cb07e00d5d4f99bb9ef64dc2789c">sizeof_input_pointer_array</a>());</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// For each output tile, construct the requisite set of pointers and call</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// into the kernel.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = 0; batch &lt; <a class="code" href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; batch++)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      <span class="comment">// Get batch pointers</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> inptr_batch = inptr + batch * ld_input_batch;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      <span class="keyword">auto</span> outptr_row = outptr + batch * ld_output_batch + start_out_height * ld_output_row;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> out_i = start_out_height; out_i &lt; end_out_height; out_i++)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_i = out_i * m_args.pool_stride.rows - padding.top;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_i = start_in_i + m_args.pool_window.rows;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Compute top/bottom padding</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_top = static_cast&lt;unsigned int&gt;(std::max(0 - start_in_i, 0));</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_bottom = static_cast&lt;unsigned int&gt;(std::max&lt;int&gt;(end_in_i - height, 0));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> valid_rows = input_rows() - pad_top - pad_bottom;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// Compute the number of pooling window rows which are contained in</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">// either the valid region of the input tensor, or the padding.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> padded_bottom = std::min&lt;unsigned int&gt;(</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          start_in_i + m_args.pool_window.rows, height + padding.bottom</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        );</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> n_total_rows = padded_bottom - start_in_i;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">auto</span> outptr_col = outptr_row;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keyword">auto</span> inptr_row = inptr_batch + (start_in_i + pad_top) * ld_input_row;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> out_j = 0, start_in_j = -padding.left;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;             out_j &lt; static_cast&lt;int&gt;(output_width);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;             out_j++, start_in_j += m_args.pool_stride.cols)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_j = start_in_j + m_args.pool_window.cols;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;          <span class="comment">// Compute left/right padding</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> pad_left = static_cast&lt;unsigned int&gt;(std::max(0 - start_in_j, 0));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> pad_right = static_cast&lt;unsigned int&gt;(std::max&lt;int&gt;(0, end_in_j - width));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> valid_cols = input_cols() - pad_left - pad_right;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          <span class="comment">// Compute the number of pooling window columns which are contained</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;          <span class="comment">// in either the valid region of the input tensor, or the padding.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> padded_right = std::min&lt;unsigned int&gt;(</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            start_in_j + m_args.pool_window.cols, width + padding.right</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          );</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> n_total_cols = padded_right - start_in_j;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          <span class="comment">// Construct the input pointer array - fill in all valid points</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;          <span class="comment">// contiguously.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          <span class="keyword">const</span> TInput **ptrs = inptr_array;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          <span class="keyword">const</span> TInput *rowptr = inptr_row + (start_in_j + pad_left) * ld_input_col;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; valid_rows; i++)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;          {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keyword">const</span> TInput *colptr = rowptr;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = 0u; j &lt; valid_cols; j++)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;              *(ptrs++) = colptr;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;              colptr += ld_input_col;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            rowptr += ld_input_row;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;          }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;          <span class="comment">// Compute the number of valid cells</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> valid_cells = valid_rows * valid_cols;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> cells_in_range = n_total_rows * n_total_cols;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> window_cells = m_args.exclude_padding ? valid_cells : cells_in_range;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;          <span class="comment">// Get the output pointer for this call</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;          TOutput *outptr = outptr_col;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;          outptr_col += ld_output_col;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;          <span class="comment">// TODO Work number</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;          <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(strategy::out_rows() * strategy::out_cols() * strategy::pool_rows() * strategy::pool_cols()));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">#endif // CYCLE_PROFILING</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;          strat.kernel(window_cells, valid_cells, end_channel - start_channel, inptr_array, outptr);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        outptr_row += ld_output_row;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00045">utils.hpp:45</a></div></div>
<div class="ttc" id="_n_e_g_e_m_m_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_n_e_g_e_m_m_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_g_e_m_m_assembly_dispatch_8cpp_source.xhtml#l00051">NEGEMMAssemblyDispatch.cpp:51</a></div></div>
<div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic_xhtml_aaba1cb07e00d5d4f99bb9ef64dc2789c"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aaba1cb07e00d5d4f99bb9ef64dc2789c">arm_conv::pooling::PoolingDepthfirstGeneric::sizeof_input_pointer_array</a></div><div class="ttdeci">size_t sizeof_input_pointer_array(void) const</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__generic_8hpp_source.xhtml#l00059">pooling_depthfirst_generic.hpp:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa135c6f8967b3be791a3f15f4f0c4178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa135c6f8967b3be791a3f15f4f0c4178">&#9670;&nbsp;</a></span>get_working_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_working_size </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> num_threads * <a class="code" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aaba1cb07e00d5d4f99bb9ef64dc2789c">sizeof_input_pointer_array</a>();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  }</div><div class="ttc" id="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic_xhtml_aaba1cb07e00d5d4f99bb9ef64dc2789c"><div class="ttname"><a href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml#aaba1cb07e00d5d4f99bb9ef64dc2789c">arm_conv::pooling::PoolingDepthfirstGeneric::sizeof_input_pointer_array</a></div><div class="ttdeci">size_t sizeof_input_pointer_array(void) const</div><div class="ttdef"><b>Definition:</b> <a href="pooling__depthfirst__generic_8hpp_source.xhtml#l00059">pooling_depthfirst_generic.hpp:59</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00059">PoolingDepthfirstGeneric&lt; strategy &gt;::sizeof_input_pointer_array()</a>.</p>

</div>
</div>
<a id="ad3e9d3dae140757d6281e17c36c76b6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3e9d3dae140757d6281e17c36c76b6e">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a>&lt; strategy &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaba1cb07e00d5d4f99bb9ef64dc2789c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaba1cb07e00d5d4f99bb9ef64dc2789c">&#9670;&nbsp;</a></span>sizeof_input_pointer_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t sizeof_input_pointer_array </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00059">59</a> of file <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(TInput *) * input_rows() * input_cols();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml#l00064">PoolingDepthfirstGeneric&lt; strategy &gt;::get_working_size()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_conv/pooling/<a class="el" href="pooling__depthfirst__generic_8hpp_source.xhtml">pooling_depthfirst_generic.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1pooling.xhtml">pooling</a></li><li class="navelem"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a></li>
    <li class="footer">Generated on Tue May 18 2021 16:38:51 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
