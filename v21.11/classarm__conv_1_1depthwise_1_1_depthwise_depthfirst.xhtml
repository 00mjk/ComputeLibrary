<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: DepthwiseDepthfirst&lt; TInput, TWeight, TOutput, TAccum &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">DepthwiseDepthfirst&lt; TInput, TWeight, TOutput, TAccum &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for DepthwiseDepthfirst&lt; TInput, TWeight, TOutput, TAccum &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst__coll__graph.svg" width="222" height="156"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6d6b2bd983101dc409526563150920f3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a6d6b2bd983101dc409526563150920f3">DepthwiseDepthfirst</a> (<a class="el" href="structarm__conv_1_1depthwise_1_1_i_depthwise_depthfirst_strategy.xhtml">IDepthwiseDepthfirstStrategy</a> *const strat, const DepthwiseArgs &amp;args)</td></tr>
<tr class="separator:a6d6b2bd983101dc409526563150920f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a00d451458b5aa9255c38532c78e376"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a9a00d451458b5aa9255c38532c78e376">DepthwiseDepthfirst</a> (<a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;)=delete</td></tr>
<tr class="separator:a9a00d451458b5aa9255c38532c78e376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab88a148ebdfeae4dbd2861c7052e21f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aab88a148ebdfeae4dbd2861c7052e21f">operator=</a> (<a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> &amp;)=delete</td></tr>
<tr class="separator:aab88a148ebdfeae4dbd2861c7052e21f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de6182e7c12d5492f092057f5b32d30"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a6de6182e7c12d5492f092057f5b32d30">get_storage_size</a> (void) const override</td></tr>
<tr class="separator:a6de6182e7c12d5492f092057f5b32d30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3cd2726a0e06059d710d218519155c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#aa3cd2726a0e06059d710d218519155c6">pack_parameters</a> (void *_buffer, const void *_biases, const void *_weights, size_t ld_weight_col, size_t ld_weight_row) override</td></tr>
<tr class="separator:aa3cd2726a0e06059d710d218519155c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e1cc96fb24afdaf053389218d889c7"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">get_working_size</a> (const unsigned int n_threads, const unsigned int n_channels) const override</td></tr>
<tr class="separator:a75e1cc96fb24afdaf053389218d889c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5039576663a8b9a8ed58e927c040b20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#ad5039576663a8b9a8ed58e927c040b20">execute</a> (const unsigned int <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>, const unsigned int <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>, const unsigned int <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>, const unsigned int input_channels, const PaddingValues &amp;padding, const void *const _input, const size_t ld_input_col, const size_t ld_input_row, const size_t ld_input_batch, const void *const parameters, const unsigned int output_height, const unsigned int output_width, void *const _output, const size_t ld_output_col, const size_t ld_output_row, const size_t ld_output_batch, void *const _working_space, const unsigned int thread_id, const unsigned int n_threads) const override</td></tr>
<tr class="separator:ad5039576663a8b9a8ed58e927c040b20"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename TInput, typename TWeight, typename TOutput, typename TAccum&gt;<br />
class arm_conv::depthwise::DepthwiseDepthfirst&lt; TInput, TWeight, TOutput, TAccum &gt;</h3>


<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a6d6b2bd983101dc409526563150920f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d6b2bd983101dc409526563150920f3">&#9670;&nbsp;</a></span>DepthwiseDepthfirst() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__conv_1_1depthwise_1_1_i_depthwise_depthfirst_strategy.xhtml">IDepthwiseDepthfirstStrategy</a> *const&#160;</td>
          <td class="paramname"><em>strat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00101">101</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    : DepthwiseCommon&lt;TInput, TWeight, TOutput&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>), m_strat(strat)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9a00d451458b5aa9255c38532c78e376"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a00d451458b5aa9255c38532c78e376">&#9670;&nbsp;</a></span>DepthwiseDepthfirst() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a>&lt; TInput, TWeight, TOutput, TAccum &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad5039576663a8b9a8ed58e927c040b20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5039576663a8b9a8ed58e927c040b20">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>batches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PaddingValues &amp;&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>_input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>parameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_working_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>thread_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_threads</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00174">174</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>

<p class="reference">References <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">arm_compute::test::validation::batch</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">batches</a>, <a class="el" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">Activation::BoundedReLU</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, and <a class="el" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">Activation::ReLU</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    arm_gemm::profiler prof;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// Compute activation values</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    TAccum activation_min, activation_max;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::tie(activation_min, activation_max) = get_default_activation_values&lt;TAccum&gt;();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">switch</span> (this-&gt;m_args.activation.type)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a>:</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        activation_max = <span class="keyword">static_cast&lt;</span>TAccum<span class="keyword">&gt;</span>(this-&gt;m_args.activation.param1);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Fall through</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a>:</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        activation_min = <span class="keyword">static_cast&lt;</span>TAccum<span class="keyword">&gt;</span>(0);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Determine what portion of the work to do.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_rows_per_thread = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a>(output_height, n_threads);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_out_height = std::min(thread_id * n_rows_per_thread, output_height);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_height = std::min(start_out_height + n_rows_per_thread, output_height);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Cast input and output pointers into the right types</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> TInput *<span class="keyword">const</span> inptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TInput *<span class="keyword">&gt;</span>(_input);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    TOutput *<span class="keyword">const</span> outptr = <span class="keyword">static_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(_output);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Allocate portions of the working space</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    uint8_t *working_space = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_working_space) + <a class="code" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">get_working_size</a>(thread_id, input_channels);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span> **<span class="keyword">const</span> inptr_array = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> **<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    working_space += sizeof_inptr_array();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">void</span> **<span class="keyword">const</span> outptr_array = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> **<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    working_space += sizeof_outptr_array();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    TOutput *<span class="keyword">const</span> output_buffer = <span class="keyword">reinterpret_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    working_space += sizeof_output_buffer(input_channels * this-&gt;m_args.channel_multiplier);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    TInput *<span class="keyword">const</span> input_buffer = <span class="keyword">reinterpret_cast&lt;</span>TInput *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Initialise the input buffer</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; input_channels; c++)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      input_buffer[c] = <span class="keyword">static_cast&lt;</span>TInput<span class="keyword">&gt;</span>(0);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// For each output tile, construct the requisite set of pointers and call</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// into the kernel.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>++)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="comment">// Get batch pointers</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> inptr_batch = inptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> * ld_input_batch;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> outptr_batch = outptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> * ld_output_batch;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_i = start_out_height;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;           start_out_i &lt; end_out_height;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;           start_out_i += <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(m_strat-&gt;get_output_rows()))</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_i = start_out_i + m_strat-&gt;get_output_rows();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_i = start_out_i * m_strat-&gt;get_stride_rows() - padding.top;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_i = start_in_i + m_strat-&gt;get_input_rows();</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment">// Compute top/bottom padding</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_top = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(start_in_i, 0));</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>) - end_in_i, 0));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_rows = std::min(</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;          end_out_i - start_out_i,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;          static_cast&lt;int&gt;(output_height) - start_out_i</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        );</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="comment">// Fill the input pointer array with padding values</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> index = 0u; index &lt; m_strat-&gt;get_input_rows() * m_strat-&gt;get_input_cols(); index++)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;          inptr_array[index] = input_buffer;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_j = 0; start_out_j &lt; static_cast&lt;int&gt;(output_width);)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_j = start_out_j * m_strat-&gt;get_stride_cols() - this-&gt;m_args.padding.left;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;          <span class="keywordtype">int</span> pad_left = std::min(0, start_in_j);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;          <span class="comment">// Compute how many output tiles we can compute with the direct kernel.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;          <span class="keywordtype">int</span> n_direct_tiles = 0;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;          <span class="keywordflow">if</span> (!pad_top  &amp;&amp; !pad_bottom &amp;&amp; !pad_left)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;          {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="comment">// Determine the maximum number of tiles we could handle.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            n_direct_tiles = (output_width - start_out_j) / m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="comment">// Continue to reduce this number as required to avoid reading</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="comment">// padding on the right edge.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordtype">int</span> end_in_j = start_in_j + n_direct_tiles * m_strat-&gt;get_input_cols();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keywordtype">int</span> pad_right = std::max(0, end_in_j - static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">while</span> (pad_right &amp;&amp; n_direct_tiles)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;              n_direct_tiles--;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;              end_in_j -= m_strat-&gt;get_input_cols();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;              pad_right = std::max(0, end_in_j - static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;          }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;          <span class="comment">// Use the unpadded kernel if we can, otherwise use the padded one.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;          <span class="keywordflow">if</span> (n_direct_tiles)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;          {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keyword">auto</span> inptr = inptr_batch + start_in_i*ld_input_row + start_in_j*ld_input_col;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keyword">auto</span> outptr = outptr_batch + start_out_i*ld_output_row + start_out_j*ld_output_col;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            start_out_j += n_direct_tiles*m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, 0);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            m_strat-&gt;direct_kernel(1, n_direct_tiles,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                   inptr, ld_input_row, ld_input_col,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                   outptr, ld_output_row, ld_output_col,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                   <a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>, this-&gt;m_args.input_channels,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                   &amp;activation_min, &amp;activation_max);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;          }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_j = start_out_j + m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_j = start_in_j + m_strat-&gt;get_input_cols();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> pad_right = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>) - end_in_j, 0));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_cols = std::min(</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            end_out_j - start_out_j,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            static_cast&lt;int&gt;(output_width) - start_out_j</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;          );</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;          pad_left *= -1;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;          <span class="comment">// Construct the input pointer array - fill the array with pointers to</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;          <span class="comment">// the input buffer and then fill in the required values.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = pad_top; i &lt; m_strat-&gt;get_input_rows() - pad_bottom; i++)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;          {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="comment">// Can skip over the left padding because we will have either the</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">// same or less than the previous tile.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = pad_left;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keyword">const</span> TInput *colptr = inptr_batch + (start_in_i + i) * ld_input_row + (start_in_j + j) * ld_input_col;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">void</span> **ptrs = inptr_array + i * m_strat-&gt;get_input_cols() + j;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">for</span> (; j &lt; m_strat-&gt;get_input_cols() - pad_right; j++)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;              *(ptrs++) = colptr;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;              colptr += ld_input_col;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">for</span> (; j &lt; m_strat-&gt;get_input_cols(); j++)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;              *(ptrs++) = input_buffer;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;          }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;          <span class="comment">// Construct the output pointer array.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;          <span class="keywordtype">void</span> **outptr_pos = outptr_array;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; valid_output_rows; i++)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;          {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            TOutput *colptr = outptr_batch + (start_out_i + i) * ld_output_row + start_out_j * ld_output_col;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordflow">for</span> (; j &lt; valid_output_cols; j++)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;              *(outptr_pos++) = colptr;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;               colptr += ld_output_col;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">for</span> (; j &lt; m_strat-&gt;get_output_cols(); j++)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;          }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = valid_output_rows; i &lt; m_strat-&gt;get_output_rows(); i++)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;          {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = 0u; j &lt; m_strat-&gt;get_output_cols(); j++)</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;          }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;          start_out_j += m_strat-&gt;get_output_cols();</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;          <span class="comment">// TODO Work number</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;          <span class="keyword">auto</span> p = prof.ScopedProfiler(PROFILE_KERNEL, (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(0));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;          m_strat-&gt;indirect_kernel(inptr_array, outptr_array, <a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                   this-&gt;m_args.input_channels,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                   &amp;activation_min, &amp;activation_max);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;      }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  }</div><div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7add10d919fa85cf27fc78c0e06fe0b378">arm_gemm::Activation::Type::ReLU</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_xhtml_a75e1cc96fb24afdaf053389218d889c7"><div class="ttname"><a href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml#a75e1cc96fb24afdaf053389218d889c7">arm_conv::depthwise::DepthwiseDepthfirst::get_working_size</a></div><div class="ttdeci">size_t get_working_size(const unsigned int n_threads, const unsigned int n_channels) const override</div><div class="ttdef"><b>Definition:</b> <a href="depthwise__depthfirst_8hpp_source.xhtml#l00165">depthwise_depthfirst.hpp:165</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_abb222b6342b2b9056ec65056984d5e21"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">arm_compute::test::parameters</a></div><div class="ttdeci">std::unique_ptr&lt; ParametersLibrary &gt; parameters</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00046">Framework.cpp:46</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7ad07333cf360612093b94effed734829c">arm_gemm::Activation::Type::BoundedReLU</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00072">CpuDepthwiseConv2dNativeKernel.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">CpuGemmAssemblyDispatch.cpp:57</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6de6182e7c12d5492f092057f5b32d30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6de6182e7c12d5492f092057f5b32d30">&#9670;&nbsp;</a></span>get_storage_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_storage_size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00111">111</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>

<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// TODO What if we insert extra padding? Biases are a different size to the inputs, ...</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl = arm_gemm::utils::get_vector_length&lt;TInput&gt;(m_strat-&gt;get_vl_type());</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> rounded_channels = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a>(this-&gt;m_args.input_channels, vl);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> (1 + this-&gt;m_args.kernel_rows * this-&gt;m_args.kernel_cols) * rounded_channels * <span class="keyword">sizeof</span>(TWeight);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  }</div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a75e1cc96fb24afdaf053389218d889c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75e1cc96fb24afdaf053389218d889c7">&#9670;&nbsp;</a></span>get_working_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_working_size </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_threads</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00165">165</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_output_channels = n_channels * this-&gt;m_args.channel_multiplier;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">return</span> n_threads * (sizeof_inptr_array() + sizeof_outptr_array() +</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        sizeof_output_buffer(n_output_channels) +</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        sizeof_input_buffer(n_channels));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  }</div></div><!-- fragment -->
</div>
</div>
<a id="aab88a148ebdfeae4dbd2861c7052e21f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab88a148ebdfeae4dbd2861c7052e21f">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a>&lt; TInput, TWeight, TOutput, TAccum &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa3cd2726a0e06059d710d218519155c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3cd2726a0e06059d710d218519155c6">&#9670;&nbsp;</a></span>pack_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pack_parameters </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_weight_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_weight_row</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00119">119</a> of file <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a>.</p>

<p class="reference">References <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">arm_compute::test::validation::m</a>, and <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// TODO What if the kernel needs a different packing function?</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// Cast the pointers</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    uint8_t *buffer = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_buffer);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> TAccum *biases = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TAccum *<span class="keyword">&gt;</span>(_biases);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> TWeight *<span class="keyword">const</span> weights = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TWeight *<span class="keyword">&gt;</span>(_weights);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl = arm_gemm::utils::get_vector_length&lt;TAccum&gt;(m_strat-&gt;get_vl_type());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    ld_weight_col = (ld_weight_col == 0) ? this-&gt;m_args.input_channels : ld_weight_col;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    ld_weight_row = (ld_weight_row == 0) ? this-&gt;m_args.kernel_cols * ld_weight_col : ld_weight_row;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &lt; this-&gt;m_args.input_channels; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> += vl)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> todo = std::min(vl, this-&gt;m_args.input_channels - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="comment">// Copy across the correct amount of bias (or 0)</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; todo; i++)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">reinterpret_cast&lt;</span>TAccum *<span class="keyword">&gt;</span>(buffer)[i] = (biases == <span class="keyword">nullptr</span>) ? 0 : biases[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> + i];</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      buffer += vl * <span class="keyword">sizeof</span>(TAccum);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="comment">// Copy each of the weights in turn</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keyword">auto</span> weights_row = weights + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; this-&gt;m_args.kernel_rows; i++)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">auto</span> weights_col = weights_row;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; this-&gt;m_args.kernel_cols; j++)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; todo; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>++)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;          {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keyword">reinterpret_cast&lt;</span>TWeight *<span class="keyword">&gt;</span>(buffer)[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>] = weights_col[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>];</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;          }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;          buffer += vl * <span class="keyword">sizeof</span>(TWeight);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;          weights_col += ld_weight_col;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        weights_row += ld_weight_row;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_conv/depthwise/<a class="el" href="depthwise__depthfirst_8hpp_source.xhtml">depthwise_depthfirst.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a></li>
    <li class="footer">Generated on Mon Nov 15 2021 14:44:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
