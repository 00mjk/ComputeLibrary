<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/CpuDepthwiseConv2dNativeKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuDepthwiseConv2dNativeKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8h.xhtml">src/cpu/kernels/CpuDepthwiseConv2dNativeKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_info_8h.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h.xhtml">src/core/NEON/wrapper/traits.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>kernels</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;constexpr <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">const</span> <span class="keywordtype">size_t</span>   width_idx   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">const</span> <span class="keywordtype">size_t</span>   height_idx  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">const</span> <span class="keywordtype">size_t</span>   channel_idx = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;constexpr <span class="keyword">auto</span>   dim_manual_loop      = Window::Dimension(0, 0, 0);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;constexpr <span class="keyword">auto</span>   dim_single_unit_step = Window::Dimension(0, 1, 1);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;constexpr <span class="keywordtype">size_t</span> vector_size          = 8;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">struct </span>DepthwiseConvolutionRunInfo</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adcd0bbe5747f9335c9dc266238950cef">   56</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adcd0bbe5747f9335c9dc266238950cef">num_read_elements_per_iteration</a>;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a33ee2954a8e8fb991cd139c9345841c3">   57</a></span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a33ee2954a8e8fb991cd139c9345841c3">x_start</a>;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a076dad6d7efce7170dcd2efecc69d1e6">   58</a></span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a076dad6d7efce7170dcd2efecc69d1e6">x_end</a>;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#aeca6e77ae523bf2830297882610f8770">   59</a></span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#aeca6e77ae523bf2830297882610f8770">x_step</a>;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a6d863d841dad4e2e6e00afeff3d6f00a">   60</a></span>&#160;    <span class="keyword">const</span> uint32_t <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a6d863d841dad4e2e6e00afeff3d6f00a">x_leftover_start</a>;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ad2115fbd2edcebb19a865eff2f739b18">   61</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ad2115fbd2edcebb19a865eff2f739b18">input_stride_y</a>;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a0f76c5e0d4eab98313e521c900cd3dae">   62</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a0f76c5e0d4eab98313e521c900cd3dae">input_stride_z</a>;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abd1e59af82140ba461f52a41c00cbf08">   63</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abd1e59af82140ba461f52a41c00cbf08">input_max_offset</a>;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abe4640d429ac25799126454625834b7d">   64</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abe4640d429ac25799126454625834b7d">weights_width</a>;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab999f1a2cf0d5e438f487fabdc9e7430">   65</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab999f1a2cf0d5e438f487fabdc9e7430">weights_height</a>;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acad64b9547ecd5d25282b7f80ab7fde0">   66</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acad64b9547ecd5d25282b7f80ab7fde0">weights_stride_y</a>;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac49e64291e5b2d8a1ad1e686d775d59a">   67</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac49e64291e5b2d8a1ad1e686d775d59a">weights_stride_z</a>;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a620aa3d75e6df0a30c91a941c7992924">   68</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a620aa3d75e6df0a30c91a941c7992924">conv_stride_x</a>;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adb7f0b77ccd8685db049b316b43de071">   69</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adb7f0b77ccd8685db049b316b43de071">conv_stride_y</a>;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac6515eeaf60dfe8e41b0558047ed04f1">   70</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac6515eeaf60dfe8e41b0558047ed04f1">conv_pad_left</a>;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acb5fca229a41092d90845d8ee30fcf91">   71</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acb5fca229a41092d90845d8ee30fcf91">conv_pad_top</a>;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">   72</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">   73</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">   74</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    DepthwiseConvolutionRunInfo(<span class="keyword">const</span> ITensorInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ITensorInfo &amp;weights, <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <span class="keyword">const</span> Window &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, uint32_t depth_multiplier = 1) <span class="comment">// NOLINT</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        : num_read_elements_per_iteration((depth_multiplier == 1 ? (vector_size / <a class="code" href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">element_size_from_data_type</a>(input.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">data_type</a>())) : 1)),</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          x_start(w.x().start()),</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          x_end(w.x().<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>()),</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;          x_step(static_cast&lt;uint32_t&gt;(num_read_elements_per_iteration * depth_multiplier)),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          x_leftover_start(<a class="code" href="namespacestd.xhtml">std</a>::max(static_cast&lt;int32_t&gt;(w.x().<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() + 1) - static_cast&lt;int32_t&gt;(x_step), int32_t(0))),</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;          input_stride_y(input.strides_in_bytes().y()),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          input_stride_z(input.strides_in_bytes().z()),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;          input_max_offset(input.strides_in_bytes().z() * input.dimension(height_idx) - (input.padding().bottom + input.padding().top) * input.strides_in_bytes().y()),</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;          weights_width(weights.dimension(width_idx)),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;          weights_height(weights.dimension(height_idx)),</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;          weights_stride_y(weights.strides_in_bytes().y()),</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;          weights_stride_z(weights.strides_in_bytes().z()),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;          conv_stride_x(conv_info.stride().first),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;          conv_stride_y(conv_info.stride().second),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;          conv_pad_left(conv_info.pad_left()),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;          conv_pad_top(conv_info.pad_top()),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;          input_height(input.dimension(height_idx)),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          input_width(input.dimension(width_idx)),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;          input_depth(input.dimension(channel_idx))</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">inline</span> int32x4_t saturating_doubling_high_mul(<span class="keyword">const</span> int32x4_t &amp;a, <span class="keyword">const</span> int32_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">return</span> vqrdmulhq_n_s32(a, b);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">inline</span> int32_t saturating_doubling_high_mul(<span class="keyword">const</span> int32_t &amp;a, <span class="keyword">const</span> int32_t &amp;b)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(vqrdmulh_n_s32(vdup_n_s32(a), b), 0);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">inline</span> int32x4_t rounding_divide_by_exp2(<span class="keyword">const</span> int32x4_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> int32x4_t shift = vdupq_n_s32(-exponent);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> int32x4_t fixup = vshrq_n_s32(vandq_s32(x, shift), 31);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> int32x4_t fixed = vqaddq_s32(x, fixup);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed, shift);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">inline</span> int32x2_t rounding_divide_by_exp2(<span class="keyword">const</span> int32x2_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> int32x2_t shift = vdup_n_s32(-exponent);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> int32x2_t fixup = vshr_n_s32(vand_s32(x, shift), 31);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> int32x2_t fixed = vqadd_s32(x, fixup);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> vrshl_s32(fixed, shift);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">inline</span> int32_t rounding_divide_by_exp2(<span class="keyword">const</span> int32_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> int32x2_t xs = vdup_n_s32(x);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(rounding_divide_by_exp2(xs, exponent), 0);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> is_valid_input_region(int32_t base_w, uint32_t base_h, uint32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, uint32_t h, <span class="keyword">const</span> DepthwiseConvolutionRunInfo &amp;run_info, <span class="keyword">const</span> Size2D &amp;dilation)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> int32_t current_h  = base_h + h * dilation.y();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_valid_h = current_h &gt;= 0 &amp;&amp; current_h &lt; static_cast&lt;int32_t&gt;(run_info.input_height);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> int32_t current_w  = base_w + w * dilation.x();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_valid_w = current_w &gt;= 0 &amp;&amp; current_w &lt; static_cast&lt;int32_t&gt;(run_info.input_width);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> is_valid_h &amp;&amp; is_valid_w;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keywordtype">void</span> depthwise_loop_multiplier1_fp(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> ITensor *weights, <span class="keyword">const</span> ITensor *biases, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                   <span class="keyword">const</span> Size2D &amp;dilation, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">bool</span> has_biases)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    constexpr <span class="keyword">auto</span> element_per_vector = vector_size / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">using</span> VectorType                  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::type</a>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">using</span> TagType                     = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::tag_type;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*src-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> VectorType zero_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(0), TagType{});</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    Window execution_window = window;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_single_unit_step);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    Window win_input = window;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_manual_loop);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    Window win_weights = win_input;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, dim_manual_loop);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    Window win_output = window;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    win_output.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_manual_loop);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    Iterator input_it(src, win_input);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    Iterator weights_it(weights, win_weights);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    Iterator output_it(dst, win_output);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    Iterator biases_it{};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        biases_it = Iterator(biases, win_weights);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(execution_window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">const</span> int32_t input_y           = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">const</span> int32_t input_z           = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">const</span> int64_t base_input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span> base_weights_ptr = weights_it.ptr();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        uint32_t   x                = run_info.x_start;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">for</span>(; x &lt; run_info.x_leftover_start; x += run_info.x_step)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            VectorType acc          = zero_vector;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keyword">auto</span>       weights_ptr  = base_weights_ptr;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            int64_t    input_offset = base_input_offset;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">for</span>(uint32_t h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">for</span>(uint32_t w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_vals      = is_valid_region ?</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                                 <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;T *&gt;(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset))) :</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                 zero_vector;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;T *&gt;(weights_ptr + w * run_info.weights_stride_y) + x);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    acc                     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc, weights_vals, input_vals);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> biases_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;T *&gt;(biases_it.ptr()) + x);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                acc                    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc, biases_vals);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(output_it.ptr()) + x, acc);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">for</span>(; x &lt; run_info.x_end; ++x)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keyword">auto</span>    acc_scalar   = T{ 0 };</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keyword">auto</span>    weights_ptr  = base_weights_ptr;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            int64_t input_offset = base_input_offset;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_vals      = is_valid_region ? *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset)) : 0;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals    = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(weights_ptr + w * run_info.weights_stride_y) + x);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    acc_scalar += (input_vals * weights_vals);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> biases_vals = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases_it.ptr()) + x);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                acc_scalar += biases_vals;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x) = acc_scalar;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    },</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    input_it, weights_it, biases_it, output_it);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keywordtype">void</span> depthwise_loop_generic_fp(<span class="keyword">const</span> ITensor *src, <span class="keyword">const</span> ITensor *weights, <span class="keyword">const</span> ITensor *biases, ITensor *dst, <span class="keyword">const</span> PadStrideInfo &amp;conv_info,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                               <span class="keyword">const</span> Size2D &amp;dilation, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">bool</span> has_biases)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*src-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    Window execution_window = window;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    Window win_input = execution_window;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    Window win_weights = window;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    win_weights.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, dim_manual_loop);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    Window win_output = window;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    win_output.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    Iterator input_it(src, win_input);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    Iterator weights_it(weights, win_weights);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    Iterator output_it(dst, win_output);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    Iterator biases_it{};</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        biases_it = Iterator(biases, win_weights);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(execution_window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        std::vector&lt;T&gt; acc(depth_multiplier, static_cast&lt;T&gt;(0));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordtype">int</span>       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordtype">int</span> offs = input_offset;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input_val       = is_valid_region ? *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset))) : T(0);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_val = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T) + w * run_info.weights_stride_y));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                    acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)              = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">support::cpp11::fma</a>(weights_val, input_val, acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>));</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> biases_val                                     = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T)));</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T))) = acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) + biases_val;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T))) = acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    },</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    input_it, weights_it, biases_it, output_it);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keywordtype">void</span> depthwise_loop_multiplier1_quantized(<span class="keyword">const</span> ITensor *src, <span class="keyword">const</span> ITensor *weights, <span class="keyword">const</span> ITensor *biases, ITensor *dst, <span class="keyword">const</span> PadStrideInfo &amp;conv_info,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                          <span class="keyword">const</span> Size2D &amp;dilation, std::vector&lt;int&gt; output_multiplier, std::vector&lt;int&gt; output_shift, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">bool</span> has_biases) <span class="comment">// NOLINT</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(output_multiplier, output_shift);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    constexpr <span class="keyword">auto</span> element_per_vector = vector_size / <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">using</span> VectorType                  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::type</a>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">using</span> TagType                     = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::tag_type;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">using</span> AccType                     = int32_t;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">using</span> AccArrayType                = std::array&lt;AccType, element_per_vector&gt;;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_value  = PixelValue(static_cast&lt;uint64_t&gt;(0), src-&gt;info()-&gt;data_type(), src-&gt;info()-&gt;quantization_info()).get&lt;T&gt;();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(out_of_bound_value), TagType{});</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*src-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">const</span> int32_t input_qoffset   = src-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> int32_t weights_qoffset = weights-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> int32_t output_qoffset  = dst-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> int32_t k_offset        = run_info.weights_width * run_info.weights_height * input_qoffset * weights_qoffset;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    Window execution_window = window;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_single_unit_step);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    Window win_input = window;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_manual_loop);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    Window win_weights = win_input;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, dim_manual_loop);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    Window win_output = window;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    win_output.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, dim_manual_loop);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    Iterator input_it(src, win_input);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    Iterator weights_it(weights, win_weights);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    Iterator output_it(dst, win_output);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    Iterator biases_it{};</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        biases_it = Iterator(biases, win_weights);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(execution_window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">const</span> int32_t input_y           = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keyword">const</span> int32_t input_z           = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keyword">const</span> int64_t base_input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span>    base_weights_ptr  = weights_it.ptr();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordtype">size_t</span>        x                 = run_info.x_start;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">for</span>(; x &lt; run_info.x_leftover_start; x += run_info.x_step)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            AccArrayType acc{};</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            AccArrayType in_sum{};</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            AccArrayType we_sum{};</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keyword">auto</span> weights_ptr  = base_weights_ptr;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keyword">auto</span> input_offset = base_input_offset;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_vals      = is_valid_region ?</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                                 <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;T *&gt;(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset))) :</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                                 out_of_bound_vector;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;TW *&gt;(weights_ptr + w * run_info.weights_stride_y) + x);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; element_per_vector; ++i)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                    {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                        acc.at(i) += input_vals[i] * weights_vals[i];</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        in_sum.at(i) += input_vals[i];</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        we_sum.at(i) += weights_vals[i];</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                    }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            VectorType out_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(0), TagType{});</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; element_per_vector; ++i)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                acc.at(i) -= in_sum.at(i) * weights_qoffset;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                acc.at(i) -= we_sum.at(i) * input_qoffset;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                acc.at(i) += k_offset;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    acc.at(i) += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + i * <span class="keyword">sizeof</span>(int32_t)) + x);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(x + i);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                <span class="keyword">const</span> int32_t out_shift = output_shift.at(x + i);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <span class="keywordflow">if</span>(out_shift &lt; 0)</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                    acc.at(i) = saturating_doubling_high_mul(acc.at(i) * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    acc.at(i) = rounding_divide_by_exp2(saturating_doubling_high_mul(acc.at(i), out_mul), out_shift) + output_qoffset;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                out_vals[i] = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(utility::clamp&lt;AccType, T&gt;(acc.at(i)));</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;T *&gt;(output_it.ptr()) + x, out_vals);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="comment">// left-over</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">for</span>(; x &lt; run_info.x_end; ++x)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            AccType acc    = 0;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            AccType in_sum = 0;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            AccType we_sum = 0;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keyword">auto</span> weights_ptr  = base_weights_ptr;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keyword">auto</span> input_offset = base_input_offset;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_val       = is_valid_region ?</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                                 *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset)) :</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                                 out_of_bound_value;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_val = *(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(weights_ptr + w * run_info.weights_stride_y) + x);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    acc += input_val * weights_val;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    in_sum += input_val;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    we_sum += weights_val;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            T out_vals{ 0 };</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            acc -= in_sum * weights_qoffset;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            acc -= we_sum * input_qoffset;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            acc += k_offset;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                acc += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr()) + x);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            }</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(x);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keyword">const</span> int32_t out_shift = output_shift.at(x);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">if</span>(out_shift &lt; 0)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                acc = saturating_doubling_high_mul(acc * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                acc = rounding_divide_by_exp2(saturating_doubling_high_mul(acc, out_mul), out_shift) + output_qoffset;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            out_vals                                      = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(utility::clamp&lt;AccType, T&gt;(acc));</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x) = out_vals;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    },</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    input_it, weights_it, biases_it, output_it);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keywordtype">void</span> depthwise_loop_generic_quantized(<span class="keyword">const</span> ITensor *src, <span class="keyword">const</span> ITensor *weights, <span class="keyword">const</span> ITensor *biases, ITensor *dst, <span class="keyword">const</span> PadStrideInfo &amp;conv_info,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                      <span class="keyword">const</span> Size2D &amp;dilation, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, std::vector&lt;int&gt; output_multiplier, std::vector&lt;int&gt; output_shift, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">bool</span> has_biases) <span class="comment">// NOLINT</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">using</span> AccType = int32_t;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*src-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_value = PixelValue(static_cast&lt;uint64_t&gt;(0), src-&gt;info()-&gt;data_type(), src-&gt;info()-&gt;quantization_info()).get&lt;T&gt;();</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keyword">const</span> int32_t input_qoffset   = src-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> int32_t weights_qoffset = weights-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">const</span> int32_t output_qoffset  = dst-&gt;info()-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keyword">const</span> int32_t k_offset        = run_info.weights_width * run_info.weights_height * input_qoffset * weights_qoffset;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    Window execution_window = window;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    Window win_input = execution_window;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    Window win_weights = window;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    win_weights.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, dim_manual_loop);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    Window win_output = window;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    win_output.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    Iterator input_it(src, win_input);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    Iterator weights_it(weights, win_weights);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    Iterator output_it(dst, win_output);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    Iterator biases_it{};</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        biases_it = Iterator(biases, win_weights);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    }</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(execution_window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        std::vector&lt;AccType&gt; acc(depth_multiplier, 0);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        std::vector&lt;AccType&gt; we_sum(depth_multiplier, 0);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        AccType              in_sum = 0;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keyword">const</span> int32_t input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keyword">const</span> int32_t input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        int64_t       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordtype">int</span> offs = input_offset;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            {</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = is_valid_input_region(input_y, input_z, w, h, run_info, dilation);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input_val       = is_valid_region ? *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset))) : out_of_bound_value;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_val = *(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T) + w * run_info.weights_stride_y));</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                    acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) += input_val * weights_val;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    we_sum.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) += weights_val;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                }</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                in_sum += input_val;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) -= in_sum * weights_qoffset;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) -= we_sum.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) * input_qoffset;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) += k_offset;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            {</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(int32_t)));</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(<span class="keywordtype">id</span>.x() * depth_multiplier + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keyword">const</span> int32_t out_shift = output_shift.at(<span class="keywordtype">id</span>.x() * depth_multiplier + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">if</span>(out_shift &lt; 0)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) = saturating_doubling_high_mul(acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>) = rounding_divide_by_exp2(saturating_doubling_high_mul(acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>), out_mul), out_shift) + output_qoffset;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            }</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T))) = static_cast&lt;T&gt;(utility::clamp&lt;AccType, T&gt;(acc.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>)));</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        }</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    },</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    input_it, weights_it, biases_it, output_it);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="keywordtype">void</span> depthwise_loop_pow2_quantized_per_tensor(<span class="keyword">const</span> ITensor *src, <span class="keyword">const</span> ITensor *weights, <span class="keyword">const</span> ITensor *biases, ITensor *dst, <span class="keyword">const</span> PadStrideInfo &amp;conv_info,</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                              <span class="keyword">const</span> Size2D &amp;dilation, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth_multiplier, std::vector&lt;int&gt; output_multiplier, std::vector&lt;int&gt; output_shift, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">bool</span> has_biases) <span class="comment">// NOLINT</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;{</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    constexpr <span class="keywordtype">int</span> half_vec = vector_size / 2;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keyword">using</span> AccType          = int32_t;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keyword">using</span> AccVectorType    = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;AccType, half_vec&gt;::type</a>;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keyword">using</span> AccVectorTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;AccType, half_vec&gt;::tag_type;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keyword">using</span> TagType          = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, vector_size&gt;::tag_type;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*src-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_qoffset_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;T&gt;(src-&gt;info()-&gt;quantization_info().uniform().offset), TagType{})));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> weights_qoffset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;TW&gt;(weights-&gt;info()-&gt;quantization_info().uniform().offset), TagType{})));</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_qoffset_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(dst-&gt;info()-&gt;quantization_info().uniform().offset, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a>{});</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> lower = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;AccType&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>()), AccVectorTagType{});</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> upper = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;AccType&gt;(std::numeric_limits&lt;T&gt;::max()), AccVectorTagType{});</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> zero  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;AccType&gt;(0), AccVectorTagType{});</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_mul   = output_multiplier.at(0);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_shift = output_shift.at(0);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    Window execution_window = window;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    Window win_input = execution_window;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    Window win_weights = window;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    win_weights.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, dim_manual_loop);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, dim_manual_loop);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, dim_manual_loop);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    Window win_output = window;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    win_output.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    Iterator input_it(src, win_input);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    Iterator weights_it(weights, win_weights);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    Iterator output_it(dst, win_output);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    Iterator biases_it{};</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    {</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        biases_it = Iterator(biases, win_weights);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    std::vector&lt;AccVectorType&gt; acc0(depth_multiplier / vector_size);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    std::vector&lt;AccVectorType&gt; acc1(depth_multiplier / vector_size);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(execution_window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(begin(acc0), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(acc0), zero);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(begin(acc1), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(acc1), zero);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keyword">const</span> int32_t input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keyword">const</span> int32_t input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        int64_t       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            <span class="keyword">const</span> int32_t current_h = input_z + h * dilation.y();</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordflow">if</span>(current_h &gt;= 0 &amp;&amp; current_h &lt; static_cast&lt;int32_t&gt;(run_info.input_height))</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            {</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <span class="keywordtype">int</span> offs = input_offset;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> w = 0; w &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                {</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                    <span class="keyword">const</span> int32_t current_w = input_y + w * dilation.x();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    <span class="keywordflow">if</span>(current_w &gt;= 0 &amp;&amp; current_w &lt; static_cast&lt;int32_t&gt;(run_info.input_width))</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_8x8     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(*(reinterpret_cast&lt;T *&gt;(input_it.ptr() + std::min(static_cast&lt;size_t&gt;(offs), run_info.input_max_offset))), TagType{});</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_s16x8   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(input_8x8));</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_no_offs = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(input_s16x8, input_qoffset_vec);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0, i = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> += vector_size, ++i)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                        {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> weights_8x8     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(reinterpret_cast&lt;TW *&gt;(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(T) + w * run_info.weights_stride_y));</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> weights_s16x8   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(weights_8x8));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> weights_no_offs = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(weights_s16x8, weights_qoffset_vec);</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                            acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(acc0.at(i), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(input_no_offs), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(weights_no_offs));</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                            acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(acc1.at(i), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(input_no_offs), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(weights_no_offs));</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                        }</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    }</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            }</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            weights_ptr += run_info.weights_stride_z;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            input_offset += dilation.y() * run_info.input_stride_z;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0, i = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; depth_multiplier; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> += vector_size, ++i)</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        {</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keywordflow">if</span>(has_biases)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            {</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bias_val0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(reinterpret_cast&lt;int32_t *&gt;(biases_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(int32_t)));</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bias_val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(reinterpret_cast&lt;int32_t *&gt;(biases_it.ptr() + (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> + half_vec) * <span class="keyword">sizeof</span>(int32_t)));</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc0.at(i), bias_val0);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc1.at(i), bias_val1);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            }</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">if</span>(out_shift &lt; 0)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(saturating_doubling_high_mul(acc0.at(i) * (1 &lt;&lt; (-out_shift)), out_mul), output_qoffset_vec);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(saturating_doubling_high_mul(acc1.at(i) * (1 &lt;&lt; (-out_shift)), out_mul), output_qoffset_vec);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(rounding_divide_by_exp2(saturating_doubling_high_mul(acc0.at(i), out_mul), out_shift), output_qoffset_vec);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(rounding_divide_by_exp2(saturating_doubling_high_mul(acc1.at(i), out_mul), out_shift), output_qoffset_vec);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(acc0.at(i), lower), upper);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(acc1.at(i), lower), upper);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_val = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(acc0.at(i)),</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(acc1.at(i)));</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">if</span>(std::is_same&lt;T, uint8_t&gt;::value)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;uint8_t *&gt;(output_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(uint8_t)), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(vreinterpretq_u16_s16(out_val)));</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            }</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(reinterpret_cast&lt;int8_t *&gt;(output_it.ptr() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * <span class="keyword">sizeof</span>(int8_t)), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_val));</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            }</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    },</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    input_it, weights_it, biases_it, output_it);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;Status validate_arguments(<span class="keyword">const</span> ITensorInfo *src, <span class="keyword">const</span> ITensorInfo *weights, <span class="keyword">const</span> ITensorInfo *biases, <span class="keyword">const</span> ITensorInfo *dst, <span class="keyword">const</span> ConvolutionInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;{</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(src, weights, dst);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(src);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(src-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(info.depth_multiplier == 0);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;dimension(1) + (weights-&gt;dimension(1) - 1) * (info.dilation.x() - 1) &gt; src-&gt;dimension(1) + info.pad_stride_info.pad_left() + info.pad_stride_info.pad_right());</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;dimension(2) + (weights-&gt;dimension(2) - 1) * (info.dilation.y() - 1) &gt; src-&gt;dimension(2) + info.pad_stride_info.pad_top() + info.pad_stride_info.pad_bottom());</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>((src-&gt;dimension(0) * info.depth_multiplier) != weights-&gt;dimension(0));</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>((info.dilation.x() &lt; 1) || (info.dilation.y() &lt; 1));</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>((info.pad_stride_info.stride().first &lt; 1) || (info.pad_stride_info.stride().second &lt; 1));</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;data_type()))</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    {</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(weights, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;dimension(0) != weights-&gt;quantization_info().scale().size());</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    }</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(src, weights);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    }</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordflow">if</span>(biases != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    {</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(biases-&gt;num_dimensions() &gt; 1);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(biases-&gt;dimension(0) != weights-&gt;dimension(0));</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(src-&gt;data_type()))</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(biases, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        }</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        {</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(weights, biases);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        }</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    }</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keywordflow">if</span>(dst-&gt;total_size() != 0)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">misc::shape_calculator::compute_depthwise_convolution_shape</a>(*src, *weights, info);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(dst-&gt;tensor_shape(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(src, dst);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    }</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;}</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div><div class="line"><a name="l00806"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a39a9902ea74596d0d1a89b297dc540ea">  806</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a39a9902ea74596d0d1a89b297dc540ea">CpuDepthwiseConv2dNativeKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src, weights, dst);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(validate_arguments(src, weights, (biases != <span class="keyword">nullptr</span>) ? biases : <span class="keyword">nullptr</span>, dst, info));</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    _conv_info        = info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">pad_stride_info</a>;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    _depth_multiplier = info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#adccaa3ddba466fa0857ec3c9f33a9db4">depth_multiplier</a>;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    _dilation         = info.<a class="code" href="structarm__compute_1_1_convolution_info.xhtml#a5159123bf7ffd6ecb44e7322a9b0492e">dilation</a>;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    _has_biases       = (biases != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()))</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    {</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_scale  = src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> output_scale = dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="keyword">auto</span> weights_scale = weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>();</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()))</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        {</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 1; i &lt; weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(channel_idx); ++i)</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                weights_scale.push_back(weights_scale.front());</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            }</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        }</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : weights_scale)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        {</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            int32_t     out_mult   = 0;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            int32_t     out_shift  = 0;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier = input_scale * s / output_scale;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;out_mult, &amp;out_shift);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            _output_multiplier.push_back(out_mult);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            _output_shift.push_back(out_shift);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    }</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordflow">switch</span>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;uint8_t, uint8_t&gt;;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;int8_t, int8_t&gt;;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keywordflow">if</span>(src-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            {</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;uint8_t, int8_t&gt;;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            }</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            {</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;int8_t, int8_t&gt;;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            }</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;float16_t, float16_t&gt;;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="preprocessor">#endif // __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            _func = &amp;CpuDepthwiseConv2dNativeKernel::run_depthwise&lt;float, float&gt;;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    }</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">misc::shape_calculator::compute_depthwise_convolution_shape</a>(*src, *weights, info);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*dst, src-&gt;<a class="code" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a>()-&gt;set_is_resizable(<span class="keyword">true</span>).reset_padding().set_tensor_shape(output_shape).set_quantization_info(dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>()));</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*dst, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>());</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    ICpuKernel::configure(win);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;}</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a83271c2b0e5e5fceeb35bf291f2a1a28">  880</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a83271c2b0e5e5fceeb35bf291f2a1a28">CpuDepthwiseConv2dNativeKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *biases, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(validate_arguments(src, weights, biases, dst, info));</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;}</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW, CpuDepthwiseConv2dNativeKernel::FloatEnalber&lt;T&gt;&gt;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="keywordtype">void</span> CpuDepthwiseConv2dNativeKernel::run_depthwise(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases,</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">bool</span> has_biases)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), window);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordflow">if</span>(_depth_multiplier == 1)</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    {</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        depthwise_loop_multiplier1_fp&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, _conv_info, _dilation, window, has_biases);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    }</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    {</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        depthwise_loop_generic_fp&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, _conv_info, _dilation, _depth_multiplier, window, has_biases);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    }</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;}</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW, CpuDepthwiseConv2dNativeKernel::Quantized8bitEnalber&lt;T&gt;&gt;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="keywordtype">void</span> CpuDepthwiseConv2dNativeKernel::run_depthwise(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases,</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                                                   <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keywordtype">bool</span> has_biases)</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;{</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), window);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordflow">if</span>(_depth_multiplier == 1)</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    {</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        depthwise_loop_multiplier1_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, _conv_info, _dilation, _output_multiplier, _output_shift, window, has_biases);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    }</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_pow2                 = ((_depth_multiplier &amp; (_depth_multiplier - 1)) == 0);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_per_tensor = !(<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()));</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <span class="keywordflow">if</span>(is_pow2 &amp;&amp; is_quantized_per_tensor &amp;&amp; _depth_multiplier &gt;= 8)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        {</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            depthwise_loop_pow2_quantized_per_tensor&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, _conv_info, _dilation, _depth_multiplier, _output_multiplier, _output_shift, window, has_biases);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        {</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            depthwise_loop_generic_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, _conv_info, _dilation, _depth_multiplier, _output_multiplier, _output_shift, window, has_biases);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        }</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    }</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;}</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div><div class="line"><a name="l00930"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">  930</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDepthwiseConv2dNativeKernel::run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;{</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(info);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), window);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_func == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src     = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> weights = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> biases  = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">TensorType::ACL_SRC_2</a>);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keyword">auto</span>       dst     = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    (this-&gt;*_func)(src, weights, biases, dst, window, _has_biases);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;}</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">  944</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDepthwiseConv2dNativeKernel::name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuDepthwiseConv2dNativeKernel&quot;</span>;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;}</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;} <span class="comment">// namespace kernels</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00981">Utils.h:981</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ac49e64291e5b2d8a1ad1e686d775d59a"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac49e64291e5b2d8a1ad1e686d775d59a">weights_stride_z</a></div><div class="ttdeci">const size_t weights_stride_z</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00067">CpuDepthwiseConv2dNativeKernel.cpp:67</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00028">WindowHelpers.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_xhtml"><div class="ttname"><a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h.xhtml">traits.h</a></div><div class="ttdoc">Traits defined on Arm® Neon™ vectors. </div></div>
<div class="ttc" id="_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00403">ConvolutionLayer.cpp:403</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a335af87f447f4eb79718a3722f9e0203"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a335af87f447f4eb79718a3722f9e0203">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape</a></div><div class="ttdeci">TensorShape compute_depthwise_convolution_shape(const ITensorInfo &amp;input, const ITensorInfo &amp;weights, const ConvolutionInfo &amp;info)</div><div class="ttdoc">Calculate the depthwise convolution output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00421">ShapeCalculator.h:421</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00054">Types.h:54</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ab999f1a2cf0d5e438f487fabdc9e7430"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab999f1a2cf0d5e438f487fabdc9e7430">weights_height</a></div><div class="ttdeci">const size_t weights_height</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00065">CpuDepthwiseConv2dNativeKernel.cpp:65</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00115">Validate.h:115</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ac6515eeaf60dfe8e41b0558047ed04f1"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ac6515eeaf60dfe8e41b0558047ed04f1">conv_pad_left</a></div><div class="ttdeci">const size_t conv_pad_left</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00070">CpuDepthwiseConv2dNativeKernel.cpp:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ad2115fbd2edcebb19a865eff2f739b18"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ad2115fbd2edcebb19a865eff2f739b18">input_stride_y</a></div><div class="ttdeci">const size_t input_stride_y</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00061">CpuDepthwiseConv2dNativeKernel.cpp:61</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_acad64b9547ecd5d25282b7f80ab7fde0"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acad64b9547ecd5d25282b7f80ab7fde0">weights_stride_y</a></div><div class="ttdeci">const size_t weights_stride_y</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00066">CpuDepthwiseConv2dNativeKernel.cpp:66</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a1585c725d13408e5629a216c2d2e8b01"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a1585c725d13408e5629a216c2d2e8b01">input_depth</a></div><div class="ttdeci">const size_t input_depth</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00074">CpuDepthwiseConv2dNativeKernel.cpp:74</a></div></div>
<div class="ttc" id="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00045">traits.h:45</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00404">ConvolutionLayer.cpp:404</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a34b06c0cd94808a77b697e79880b84b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a34b06c0cd94808a77b697e79880b84b0">arm_compute::element_size_from_data_type</a></div><div class="ttdeci">size_t element_size_from_data_type(DataType dt)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00185">Utils.h:185</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00066">QuantizationInfo.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a0f76c5e0d4eab98313e521c900cd3dae"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a0f76c5e0d4eab98313e521c900cd3dae">input_stride_z</a></div><div class="ttdeci">const size_t input_stride_z</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00062">CpuDepthwiseConv2dNativeKernel.cpp:62</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00227">gemm_interleaved.hpp:227</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1da797d2762c1cdbb73bfc83136c3a38"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00284">Validate.h:284</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2021 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_adcd0bbe5747f9335c9dc266238950cef"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adcd0bbe5747f9335c9dc266238950cef">num_read_elements_per_iteration</a></div><div class="ttdeci">const size_t num_read_elements_per_iteration</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00056">CpuDepthwiseConv2dNativeKernel.cpp:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a55bc37be5f14e4c561d3ca93b2a34aa9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">arm_compute::wrapper::vqmovn</a></div><div class="ttdeci">uint32x2_t vqmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00052">movn.h:52</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_adccaa3ddba466fa0857ec3c9f33a9db4"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#adccaa3ddba466fa0857ec3c9f33a9db4">arm_compute::ConvolutionInfo::depth_multiplier</a></div><div class="ttdeci">unsigned int depth_multiplier</div><div class="ttdoc">Multiplier to apply to input&amp;#39;s depth to retrieve the output depth. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01907">Types.h:1907</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac2ad7f431e3446fddcd9b6b9f93c4c14"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2ad7f431e3446fddcd9b6b9f93c4c14">arm_compute::test::validation::data_type</a></div><div class="ttdeci">const DataType data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00150">Im2Col.cpp:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a000c70e9839ed364ab7343de880a4d35"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">arm_compute::ITensorPack::get_const_tensor</a></div><div class="ttdeci">const ITensor * get_const_tensor(int id) const</div><div class="ttdoc">Get constant tensor of a given id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00054">ITensorPack.cpp:54</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1643f4cb252152ed8ffc0df84744ad5d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill</a></div><div class="ttdeci">library fill(src, distribution, 0)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">const auto output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00408">ConvolutionLayer.cpp:408</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01058">Utils.h:1058</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_a38fe393e11c69a5d459a75e2858e9f17"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#a38fe393e11c69a5d459a75e2858e9f17">arm_compute::ConvolutionInfo::pad_stride_info</a></div><div class="ttdeci">PadStrideInfo pad_stride_info</div><div class="ttdoc">Convolution info (Pads, strides,...) </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01906">Types.h:1906</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_abd1e59af82140ba461f52a41c00cbf08"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abd1e59af82140ba461f52a41c00cbf08">input_max_offset</a></div><div class="ttdeci">const size_t input_max_offset</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00063">CpuDepthwiseConv2dNativeKernel.cpp:63</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml_a5159123bf7ffd6ecb44e7322a9b0492e"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml#a5159123bf7ffd6ecb44e7322a9b0492e">arm_compute::ConvolutionInfo::dilation</a></div><div class="ttdeci">Size2D dilation</div><div class="ttdoc">Dilation, in elements, across x and y. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01909">Types.h:1909</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo.h:150</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1misc_1_1_i_cloneable_xhtml_a4d10e5012a872e7f78f2b539b673049d"><div class="ttname"><a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">arm_compute::misc::ICloneable::clone</a></div><div class="ttdeci">virtual std::unique_ptr&lt; T &gt; clone() const =0</div><div class="ttdoc">Provide a clone of the current object of class T. </div></div>
<div class="ttc" id="structarm__compute_1_1_convolution_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml">arm_compute::ConvolutionInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01899">Types.h:1899</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="_i_tensor_info_8h_xhtml"><div class="ttname"><a href="_i_tensor_info_8h.xhtml">ITensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_af21c7fddee28e9aa0a37c633300db0e0"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">arm_compute::QuantizationInfo::scale</a></div><div class="ttdeci">const std::vector&lt; float &gt; &amp; scale() const</div><div class="ttdoc">Scale vector accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00126">QuantizationInfo.h:126</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a60f2e7a76af978d4eb6be4ac6e8044d1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">arm_compute::Window::DimW</a></div><div class="ttdeci">static constexpr size_t DimW</div><div class="ttdoc">Alias for dimension 3 also known as W dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00049">Window.h:49</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_abe4640d429ac25799126454625834b7d"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#abe4640d429ac25799126454625834b7d">weights_width</a></div><div class="ttdeci">const size_t weights_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00064">CpuDepthwiseConv2dNativeKernel.cpp:64</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66d15db8e989b58b61603ce73d8696b5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">arm_compute::wrapper::vmlal</a></div><div class="ttdeci">uint16x8_t vmlal(const uint16x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00076">mla.h:76</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a620aa3d75e6df0a30c91a941c7992924"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a620aa3d75e6df0a30c91a941c7992924">conv_stride_x</a></div><div class="ttdeci">const size_t conv_stride_x</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00068">CpuDepthwiseConv2dNativeKernel.cpp:68</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01003">Utils.h:1003</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel_xhtml_a39a9902ea74596d0d1a89b297dc540ea"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a39a9902ea74596d0d1a89b297dc540ea">arm_compute::cpu::kernels::CpuDepthwiseConv2dNativeKernel::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *biases, ITensorInfo *dst, const ConvolutionInfo &amp;info)</div><div class="ttdoc">Initialize the function&amp;#39;s source, destination and parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00806">CpuDepthwiseConv2dNativeKernel.cpp:806</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel_xhtml_a883429dd6cf828bfdd64b255afc458da"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">arm_compute::cpu::kernels::CpuDepthwiseConv2dNativeKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00930">CpuDepthwiseConv2dNativeKernel.cpp:930</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00064">ITensorPack.cpp:64</a></div></div>
<div class="ttc" id="_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00158">CPPTypes.h:158</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_acb5fca229a41092d90845d8ee30fcf91"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#acb5fca229a41092d90845d8ee30fcf91">conv_pad_top</a></div><div class="ttdeci">const size_t conv_pad_top</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00071">CpuDepthwiseConv2dNativeKernel.cpp:71</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_af399bedeaeb8dc177d3a301a12c3a5d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">arm_compute::support::cpp11::fma</a></div><div class="ttdeci">T fma(T x, T y, T z)</div><div class="ttdoc">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00252">ToolchainSupport.h:252</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00193">Helpers.inl:193</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">Validate.h:541</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00072">CpuDepthwiseConv2dNativeKernel.cpp:72</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a076dad6d7efce7170dcd2efecc69d1e6"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a076dad6d7efce7170dcd2efecc69d1e6">x_end</a></div><div class="ttdeci">const uint32_t x_end</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00058">CpuDepthwiseConv2dNativeKernel.cpp:58</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel_xhtml_a83271c2b0e5e5fceeb35bf291f2a1a28"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a83271c2b0e5e5fceeb35bf291f2a1a28">arm_compute::cpu::kernels::CpuDepthwiseConv2dNativeKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *dst, const ConvolutionInfo &amp;info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00880">CpuDepthwiseConv2dNativeKernel.cpp:880</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="wrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once. </div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8h.xhtml">CpuDepthwiseConv2dNativeKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="_asymm_helpers_8h_xhtml"><div class="ttname"><a href="_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_adb7f0b77ccd8685db049b316b43de071"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#adb7f0b77ccd8685db049b316b43de071">conv_stride_y</a></div><div class="ttdeci">const size_t conv_stride_y</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00069">CpuDepthwiseConv2dNativeKernel.cpp:69</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a33ee2954a8e8fb991cd139c9345841c3"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a33ee2954a8e8fb991cd139c9345841c3">x_start</a></div><div class="ttdeci">const uint32_t x_start</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00057">CpuDepthwiseConv2dNativeKernel.cpp:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_aeca6e77ae523bf2830297882610f8770"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#aeca6e77ae523bf2830297882610f8770">x_step</a></div><div class="ttdeci">const uint32_t x_step</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00059">CpuDepthwiseConv2dNativeKernel.cpp:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel_xhtml_aef1a10d4d6422ca58d53d8414d5954bd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">arm_compute::cpu::kernels::CpuDepthwiseConv2dNativeKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00944">CpuDepthwiseConv2dNativeKernel.cpp:944</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00201">Validate.h:201</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a6d863d841dad4e2e6e00afeff3d6f00a"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a6d863d841dad4e2e6e00afeff3d6f00a">x_leftover_start</a></div><div class="ttdeci">const uint32_t x_leftover_start</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00060">CpuDepthwiseConv2dNativeKernel.cpp:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml">CpuDepthwiseConv2dNativeKernel.cpp</a></li>
    <li class="footer">Generated on Mon Nov 15 2021 14:44:25 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
