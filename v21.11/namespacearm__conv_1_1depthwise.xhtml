<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::depthwise Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__conv_1_1depthwise.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::depthwise Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__conv_1_1depthwise_1_1common"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1common.xhtml">common</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__fp32__nhwc__generic__output9__mla__depthfirst.xhtml">a64_fp32_nhwc_generic_output9_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__fp32__packed__to__nhwc__3x3__s2__with__multiplier__output3x3__mla__depthfirst.xhtml">a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__fp32__packed__to__nhwc__5x5__s1__with__multiplier__output2x4__mla__depthfirst.xhtml">a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__fp32__packed__to__nhwc__generic__with__multiplier__output2x8__mla__depthfirst.xhtml">a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__s8q__nhwc__generic__output9__mla__depthfirst.xhtml">a64_s8q_nhwc_generic_output9_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__s8q__packed__to__nhwc__3x3__s2__with__multiplier__output2x4__dot__depthfirst.xhtml">a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__s8q__packed__to__nhwc__5x5__s1__with__multiplier__output4x2__dot__depthfirst.xhtml">a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__s8q__packed__to__nhwc__generic__with__multiplier__output2x8__mla__depthfirst.xhtml">a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8q__nhwc__generic__output9__mla__depthfirst.xhtml">a64_u8q_nhwc_generic_output9_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8q__packed__to__nhwc__3x3__s2__with__multiplier__output2x4__dot__depthfirst.xhtml">a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8q__packed__to__nhwc__5x5__s1__with__multiplier__output4x2__dot__depthfirst.xhtml">a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8q__packed__to__nhwc__generic__with__multiplier__output2x8__mla__depthfirst.xhtml">a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8s8u8q__nhwc__generic__output9__mla__depthfirst.xhtml">a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1a64__u8s8u8q__packed__to__nhwc__generic__with__multiplier__output2x8__mla__depthfirst.xhtml">a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic.xhtml">DepthwiseDepthfirstGeneric</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_base.xhtml">DepthwiseDepthfirstGenericBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_quantized.xhtml">DepthwiseDepthfirstGenericQuantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_with_multiplier.xhtml">DepthwiseDepthfirstGenericWithMultiplier</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_with_multiplier_base.xhtml">DepthwiseDepthfirstGenericWithMultiplierBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_with_multiplier_quantized.xhtml">DepthwiseDepthfirstGenericWithMultiplierQuantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_quantized.xhtml">DepthwiseDepthfirstQuantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_with_multiplier.xhtml">DepthwiseDepthfirstWithMultiplier</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_with_multiplier_quantized.xhtml">DepthwiseDepthfirstWithMultiplierQuantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_i_depthwise_depthfirst_strategy.xhtml">IDepthwiseDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1interleave__a64__s8q__3x3__dot.xhtml">interleave_a64_s8q_3x3_dot</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1interleave__a64__u8q__3x3__dot.xhtml">interleave_a64_u8q_3x3_dot</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afec3710e76721e485a73a6d577870a71"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:afec3710e76721e485a73a6d577870a71"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; float &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#afec3710e76721e485a73a6d577870a71">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:afec3710e76721e485a73a6d577870a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a301c401a1e9a5ac74367c4719a185aa4"><td class="memItemLeft" align="right" valign="top">template UniqueDepthwiseCommon&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;)</td></tr>
<tr class="separator:a301c401a1e9a5ac74367c4719a185aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbbd27745fbd8941455920821ffebf38"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;)</td></tr>
<tr class="separator:acbbd27745fbd8941455920821ffebf38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight  = TInput, typename TOutput  = TInput, class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ac2ad9593e306c173eafbeccaf46a7cfb">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight  = TInput, typename TOutput  = TInput, class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a8efd8fe9a35ba4c82dac4a82cbbf66eb">find_implementation</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os, const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&amp;selected)</td></tr>
<tr class="separator:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab415473e09fe28fe1e02a97ead491ad1"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight , typename TOutput , class OutputStage &gt; </td></tr>
<tr class="memitem:ab415473e09fe28fe1e02a97ead491ad1"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; KernelDescription &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">get_compatible_kernels</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:ab415473e09fe28fe1e02a97ead491ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607746df44efd86b8559fe1b542968c6"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight , typename TOutput , class OutputStage &gt; </td></tr>
<tr class="memitem:a607746df44efd86b8559fe1b542968c6"><td class="memTemplItemLeft" align="right" valign="top">UniqueDepthwiseCommon&lt; TInput, TWeight, TOutput &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a607746df44efd86b8559fe1b542968c6">depthwise</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:a607746df44efd86b8559fe1b542968c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaca65b5325f10a6477f59f0c807487b4"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:aaca65b5325f10a6477f59f0c807487b4"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aaca65b5325f10a6477f59f0c807487b4">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:aaca65b5325f10a6477f59f0c807487b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28eddf4c346bba772ef39d719a8e48b2"><td class="memItemLeft" align="right" valign="top">template UniqueDepthwiseCommon&lt; int8_t, int8_t, int8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a28eddf4c346bba772ef39d719a8e48b2">depthwise</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a28eddf4c346bba772ef39d719a8e48b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ef99a485751667e10e4f3e828b0f5a2"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a2ef99a485751667e10e4f3e828b0f5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86061c4991854ca34cb28b4cd0f145a"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae86061c4991854ca34cb28b4cd0f145a"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ae86061c4991854ca34cb28b4cd0f145a">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:ae86061c4991854ca34cb28b4cd0f145a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851041be157f2916b873db6d7e1d0b8f"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a851041be157f2916b873db6d7e1d0b8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd29428afa98755e71b9bc7f2f57799"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a4bd29428afa98755e71b9bc7f2f57799"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a4bd29428afa98755e71b9bc7f2f57799">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:a4bd29428afa98755e71b9bc7f2f57799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc560cf8fec3596ac8d796a60ebf15b"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a0bc560cf8fec3596ac8d796a60ebf15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b2f7673e3e40aaaedf4270dd65a45fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a1b2f7673e3e40aaaedf4270dd65a45fc">a64_fp32_nhwc_generic_output9_mla_depthfirst_impl</a> (const float *const *const, float *const *const, const void *, const void *, const unsigned int, const unsigned int, const float, const float)</td></tr>
<tr class="separator:a1b2f7673e3e40aaaedf4270dd65a45fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bcba99e7b73e989147a82a52b88e390"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2bcba99e7b73e989147a82a52b88e390">a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst_impl</a> (const float *const *const, float *const *const, const void *, const unsigned int, const float, const float)</td></tr>
<tr class="separator:a2bcba99e7b73e989147a82a52b88e390"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42ab224e609cdfcce186bec26b47f27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ac42ab224e609cdfcce186bec26b47f27">a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst_impl</a> (const float *const *const, float *const *const, const void *, const unsigned int, const float, const float)</td></tr>
<tr class="separator:ac42ab224e609cdfcce186bec26b47f27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548ac9d0bd2f671ccb0f82bd80c4ef94"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a548ac9d0bd2f671ccb0f82bd80c4ef94">a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl</a> (const float *const *const, float *const *const, const float *, const float *, const unsigned int, const unsigned int, const float, const float)</td></tr>
<tr class="separator:a548ac9d0bd2f671ccb0f82bd80c4ef94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d87935b34a1e80fbaf900ae8790b6bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a3d87935b34a1e80fbaf900ae8790b6bc">a64_s8q_nhwc_generic_output9_mla_depthfirst_impl</a> (const int8_t *const *const, int8_t *const *const, const void *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;, const unsigned int, const unsigned int)</td></tr>
<tr class="separator:a3d87935b34a1e80fbaf900ae8790b6bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5077ff200e32a5af9c65b115de054c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab5077ff200e32a5af9c65b115de054c2">a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl</a> (const int8_t *const *const, int8_t *const *const, const void *, unsigned int, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:ab5077ff200e32a5af9c65b115de054c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3889f99b56f08c162a5df51ad6c65a6d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a3889f99b56f08c162a5df51ad6c65a6d">a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl</a> (const int8_t *const *const, int8_t *const *const, const void *, unsigned int, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:a3889f99b56f08c162a5df51ad6c65a6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83f068664eec816bb1ef444caade8c60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a83f068664eec816bb1ef444caade8c60">a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl</a> (const int8_t *const *const, int8_t *const *const, const int8_t *, const int32_t *, const unsigned int, const unsigned int, const int32_t *, const int32_t *, const int32_t *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:a83f068664eec816bb1ef444caade8c60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23f137b5efee98bdd2959ee8a8160e13"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a23f137b5efee98bdd2959ee8a8160e13">a64_u8q_nhwc_generic_output9_mla_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const void *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;, const unsigned int, const unsigned int)</td></tr>
<tr class="separator:a23f137b5efee98bdd2959ee8a8160e13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fbdcce2b90d5f602ebc2c2bef7fecba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0fbdcce2b90d5f602ebc2c2bef7fecba">a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const void *, unsigned int, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:a0fbdcce2b90d5f602ebc2c2bef7fecba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4e3618fcdb373dc314c499851999f32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aa4e3618fcdb373dc314c499851999f32">a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const void *, unsigned int, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:aa4e3618fcdb373dc314c499851999f32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb8c09602cf5270df303e431682db94a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aeb8c09602cf5270df303e431682db94a">a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const uint8_t *, const int32_t *, const unsigned int, const unsigned int, const int32_t *, const int32_t *, const int32_t *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:aeb8c09602cf5270df303e431682db94a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaf8c1b2cabe217fd225390801605eb4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aaaf8c1b2cabe217fd225390801605eb4">a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const void *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;, const unsigned int, const unsigned int)</td></tr>
<tr class="separator:aaaf8c1b2cabe217fd225390801605eb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d48c2f78d4d7cb0d649048e5c06508e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a8d48c2f78d4d7cb0d649048e5c06508e">a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl</a> (const uint8_t *const *const, uint8_t *const *const, const int8_t *, const int32_t *, const unsigned int, const unsigned int, const int32_t *, const int32_t *, const int32_t *, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;)</td></tr>
<tr class="separator:a8d48c2f78d4d7cb0d649048e5c06508e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a1b2f7673e3e40aaaedf4270dd65a45fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b2f7673e3e40aaaedf4270dd65a45fc">&#9670;&nbsp;</a></span>a64_fp32_nhwc_generic_output9_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_fp32_nhwc_generic_output9_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2bcba99e7b73e989147a82a52b88e390"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bcba99e7b73e989147a82a52b88e390">&#9670;&nbsp;</a></span>a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_fp32_packed_to_nhwc_3x3_s2_with_multiplier_output3x3_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac42ab224e609cdfcce186bec26b47f27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac42ab224e609cdfcce186bec26b47f27">&#9670;&nbsp;</a></span>a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_fp32_packed_to_nhwc_5x5_s1_with_multiplier_output2x4_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a548ac9d0bd2f671ccb0f82bd80c4ef94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a548ac9d0bd2f671ccb0f82bd80c4ef94">&#9670;&nbsp;</a></span>a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_fp32_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d87935b34a1e80fbaf900ae8790b6bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d87935b34a1e80fbaf900ae8790b6bc">&#9670;&nbsp;</a></span>a64_s8q_nhwc_generic_output9_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_s8q_nhwc_generic_output9_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab5077ff200e32a5af9c65b115de054c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5077ff200e32a5af9c65b115de054c2">&#9670;&nbsp;</a></span>a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_s8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3889f99b56f08c162a5df51ad6c65a6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3889f99b56f08c162a5df51ad6c65a6d">&#9670;&nbsp;</a></span>a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_s8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a83f068664eec816bb1ef444caade8c60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83f068664eec816bb1ef444caade8c60">&#9670;&nbsp;</a></span>a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_s8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a23f137b5efee98bdd2959ee8a8160e13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23f137b5efee98bdd2959ee8a8160e13">&#9670;&nbsp;</a></span>a64_u8q_nhwc_generic_output9_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8q_nhwc_generic_output9_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0fbdcce2b90d5f602ebc2c2bef7fecba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fbdcce2b90d5f602ebc2c2bef7fecba">&#9670;&nbsp;</a></span>a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8q_packed_to_nhwc_3x3_s2_with_multiplier_output2x4_dot_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa4e3618fcdb373dc314c499851999f32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4e3618fcdb373dc314c499851999f32">&#9670;&nbsp;</a></span>a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8q_packed_to_nhwc_5x5_s1_with_multiplier_output4x2_dot_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeb8c09602cf5270df303e431682db94a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb8c09602cf5270df303e431682db94a">&#9670;&nbsp;</a></span>a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaaf8c1b2cabe217fd225390801605eb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaf8c1b2cabe217fd225390801605eb4">&#9670;&nbsp;</a></span>a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8s8u8q_nhwc_generic_output9_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8d48c2f78d4d7cb0d649048e5c06508e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d48c2f78d4d7cb0d649048e5c06508e">&#9670;&nbsp;</a></span>a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::a64_u8s8u8q_packed_to_nhwc_generic_with_multiplier_output2x8_mla_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a607746df44efd86b8559fe1b542968c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a607746df44efd86b8559fe1b542968c6">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">UniqueDepthwiseCommon&lt;TInput, TWeight, TOutput&gt; arm_conv::depthwise::depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00135">135</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keyword">const</span> DepthwiseImplementation&lt;TInput, TWeight, TOutput, OutputStage&gt; *impl = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">bool</span> success = find_implementation&lt;TInput, TWeight, TOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os, impl);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">return</span> UniqueDepthwiseCommon&lt;TInput, TWeight, TOutput&gt;(success ? impl-&gt;get_instance(args, os) : <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28eddf4c346bba772ef39d719a8e48b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28eddf4c346bba772ef39d719a8e48b2">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniqueDepthwiseCommon&lt; uint8_t, int8_t, uint8_t &gt; depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a301c401a1e9a5ac74367c4719a185aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a301c401a1e9a5ac74367c4719a185aa4">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniqueDepthwiseCommon&lt;float&gt; arm_conv::depthwise::depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00286">depthwise_implementation_list()</a>, and <a class="el" href="8b__mla_8cpp_source.xhtml#l00039">generic_pack()</a>.</p>

</div>
</div>
<a id="ac2ad9593e306c173eafbeccaf46a7cfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2ad9593e306c173eafbeccaf46a7cfb">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;TInput, TWeight, TOutput, OutputStage&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="depthwise__fp32_8cpp_source.xhtml">depthwise_fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;()</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">return</span> depthwise_fp32_methods;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4bd29428afa98755e71b9bc7f2f57799"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd29428afa98755e71b9bc7f2f57799">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml">depthwise_u8s8u8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keywordflow">return</span> depthwise_u8q_methods;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae86061c4991854ca34cb28b4cd0f145a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae86061c4991854ca34cb28b4cd0f145a">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__u8q_8cpp_source.xhtml#l00225">225</a> of file <a class="el" href="depthwise__u8q_8cpp_source.xhtml">depthwise_u8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordflow">return</span> depthwise_u8q_methods;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaca65b5325f10a6477f59f0c807487b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaca65b5325f10a6477f59f0c807487b4">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__s8q_8cpp_source.xhtml#l00264">264</a> of file <a class="el" href="depthwise__s8q_8cpp_source.xhtml">depthwise_s8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordflow">return</span> depthwise_s8q_methods;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afec3710e76721e485a73a6d577870a71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afec3710e76721e485a73a6d577870a71">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;float&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="depthwise__fp32_8cpp_source.xhtml">depthwise_fp32.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">return</span> depthwise_fp32_methods;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8efd8fe9a35ba4c82dac4a82cbbf66eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8efd8fe9a35ba4c82dac4a82cbbf66eb">&#9670;&nbsp;</a></span>find_implementation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_conv::depthwise::find_implementation </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&amp;&#160;</td>
          <td class="paramname"><em>selected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00066">66</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00043">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::cycle_estimate</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  selected = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  uint64_t best_cycle_estimate = UINT64_MAX;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> *impl = depthwise_implementation_list&lt;TInput, TWeight, TOutput, OutputStage&gt;();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">for</span> (; impl-&gt;method != DepthwiseMethod::DEFAULT; impl++)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> has_cfg = (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cfg = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span> (</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      !impl-&gt;get_is_supported(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os) ||  <span class="comment">// Problem is unsupported</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      (has_cfg &amp;&amp; cfg-&gt;method != DepthwiseMethod::DEFAULT &amp;&amp; cfg-&gt;method != impl-&gt;method) ||</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      (has_cfg &amp;&amp; cfg-&gt;filter != <span class="stringliteral">&quot;&quot;</span> &amp;&amp; !std::strstr(impl-&gt;name, cfg-&gt;filter.c_str()))</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    )</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> cycle_estimate = impl-&gt;get_cycle_estimate(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> (cycle_estimate == 0)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      selected = impl;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">if</span> (selected == <span class="keyword">nullptr</span> || cycle_estimate &lt; best_cycle_estimate)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      selected = impl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      best_cycle_estimate = cycle_estimate;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> (selected != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab415473e09fe28fe1e02a97ead491ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab415473e09fe28fe1e02a97ead491ad1">&#9670;&nbsp;</a></span>get_compatible_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;KernelDescription&gt; arm_conv::depthwise::get_compatible_kernels </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00109">109</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00051">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_cycle_estimate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  std::vector&lt;KernelDescription&gt; kerns;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="comment">// Find the default implementation so we can flag it accordingly</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keyword">const</span> DepthwiseImplementation&lt;TInput, TWeight, TOutput, OutputStage&gt; *default_impl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  find_implementation&lt;TInput, TWeight, TOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os, default_impl);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> impl = depthwise_implementation_list&lt;TInput, TWeight, TOutput, OutputStage&gt;();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;       impl-&gt;method != DepthwiseMethod::DEFAULT; impl++)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (!impl-&gt;get_is_supported(args, os))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    kerns.emplace_back(</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      impl-&gt;method, impl-&gt;name, impl == default_impl,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      impl-&gt;get_cycle_estimate(args, os)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    );</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> kerns;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acbbd27745fbd8941455920821ffebf38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbbd27745fbd8941455920821ffebf38">&#9670;&nbsp;</a></span>get_compatible_kernels< float >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00286">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a2ef99a485751667e10e4f3e828b0f5a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ef99a485751667e10e4f3e828b0f5a2">&#9670;&nbsp;</a></span>get_compatible_kernels< int8_t, int8_t, int8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__s8q_8cpp_source.xhtml#l00264">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a0bc560cf8fec3596ac8d796a60ebf15b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bc560cf8fec3596ac8d796a60ebf15b">&#9670;&nbsp;</a></span>get_compatible_kernels< uint8_t, int8_t, uint8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml#l00151">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a851041be157f2916b873db6d7e1d0b8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a851041be157f2916b873db6d7e1d0b8f">&#9670;&nbsp;</a></span>get_compatible_kernels< uint8_t, uint8_t, uint8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__u8q_8cpp_source.xhtml#l00225">depthwise_implementation_list()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml">depthwise</a></li>
    <li class="footer">Generated on Mon Nov 15 2021 14:44:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
