<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::depthwise::common Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__conv_1_1depthwise_1_1common.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::depthwise::common Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a6aac2248d48a302de61634ed35907e22"><td class="memTemplParams" colspan="2">template&lt;typename strategy , typename F &gt; </td></tr>
<tr class="memitem:a6aac2248d48a302de61634ed35907e22"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1common.xhtml#a6aac2248d48a302de61634ed35907e22">depthwise_multiplier_execute</a> (const F execute_tile, typename strategy::input_type pad_value, const DepthwiseArgs &amp;args, const unsigned int <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>, const unsigned int <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>, const unsigned int <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>, const unsigned int input_channels, const PaddingValues &amp;padding, const void *const _input, const size_t ld_input_col, const size_t ld_input_row, const size_t ld_input_batch, const void *const parameters, const size_t param_stride, const unsigned int output_height, const unsigned int output_width, void *const _output, const size_t ld_output_col, const size_t ld_output_row, const size_t ld_output_batch, void *const _working_space, const unsigned int thread_id, const unsigned int n_threads)</td></tr>
<tr class="separator:a6aac2248d48a302de61634ed35907e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a6aac2248d48a302de61634ed35907e22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6aac2248d48a302de61634ed35907e22">&#9670;&nbsp;</a></span>depthwise_multiplier_execute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::common::depthwise_multiplier_execute </td>
          <td>(</td>
          <td class="paramtype">const F&#160;</td>
          <td class="paramname"><em>execute_tile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">typename strategy::input_type&#160;</td>
          <td class="paramname"><em>pad_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>batches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>input_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const PaddingValues &amp;&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>_input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_input_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *const&#160;</td>
          <td class="paramname"><em>parameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>param_stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>output_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>ld_output_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>_working_space</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>thread_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_threads</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml">depthwise_depthfirst_multiplier.hpp</a>.</p>

<p class="reference">References <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">arm_compute::test::validation::batch</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">batches</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00046">arm_compute::test::parameters</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">using</span> TInput = <span class="keyword">typename</span> strategy::input_type;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">using</span> TOutput = <span class="keyword">typename</span> strategy::return_type;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Determine what portion of the work to do.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_rows_per_thread = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a>(output_height, n_threads);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_out_height = std::min(thread_id * n_rows_per_thread, output_height);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_height = std::min(start_out_height + n_rows_per_thread, output_height);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Cast input and output pointers into the right types</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> TInput *<span class="keyword">const</span> inptr = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>TInput *<span class="keyword">&gt;</span>(_input);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    TOutput *<span class="keyword">const</span> outptr = <span class="keyword">static_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(_output);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// To simplify the kernel, we process padded or non-NCHW-ordered input into</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// a form which can be consumed by the kernel. This data is stored here and</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// passed into the kernel as an array of N pointers (one per row of the</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// input).</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    TInput rearranged_input[strategy::input_rows][strategy::input_col_quads*(16 / <span class="keyword">sizeof</span>(TInput))];</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> TInput *inptrs[strategy::input_rows];</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Create an array for the output pointers</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    TOutput * _outptr_array[strategy::output_rows * strategy::output_cols];</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    TOutput **<span class="keyword">const</span> outptr_array = _outptr_array;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Allocate portions of the working space</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    uint8_t *<span class="keyword">const</span> working_space = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(_working_space);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    TOutput *<span class="keyword">const</span> output_buffer = <span class="keyword">reinterpret_cast&lt;</span>TOutput *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// For each output tile, construct the requisite set of pointers and call</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// into the kernel.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>++)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <span class="comment">// Get batch pointers</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> inptr_batch = inptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> * ld_input_batch;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> outptr_batch = outptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a> * ld_output_batch;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_i = start_out_height;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;           start_out_i &lt; end_out_height;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;           start_out_i += <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(strategy::output_rows))</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_i = start_out_i + strategy::output_rows;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_i = start_out_i * strategy::stride_rows - padding.top;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_i = start_in_i + strategy::input_rows;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// Compute top/bottom padding</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_top = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(start_in_i, 0));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> pad_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>) - end_in_i, 0));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_rows = std::min(</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;          end_out_i - start_out_i,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;          static_cast&lt;int&gt;(output_height) - start_out_i</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        );</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> start_out_j = 0; start_out_j &lt; static_cast&lt;int&gt;(output_width);)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> start_in_j = start_out_j * strategy::stride_cols - <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.padding.left;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left = -std::min(0, start_in_j);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_out_j = start_out_j + strategy::output_cols;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">int</span> end_in_j = start_in_j + strategy::input_cols;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;          <span class="keyword">const</span> <span class="keyword">auto</span> pad_right = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(-std::min(static_cast&lt;int&gt;(<a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>) - end_in_j, 0));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_output_cols = std::min(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            end_out_j - start_out_j,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            static_cast&lt;int&gt;(output_width) - start_out_j</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;          );</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;          <span class="comment">// Construct the output pointer array.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;          TOutput **outptr_pos = outptr_array;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; valid_output_rows; i++)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;          {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            TOutput *colptr = outptr_batch + (start_out_i + i) * ld_output_row + start_out_j * ld_output_col;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">for</span> (; j &lt; valid_output_cols; j++)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;              *(outptr_pos++) = colptr;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;               colptr += ld_output_col;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">for</span> (; j &lt; strategy::output_cols; j++)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;          }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;          <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = valid_output_rows; i &lt; strategy::output_rows; i++)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;          {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> j = 0u; j &lt; strategy::output_cols; j++)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;              *(outptr_pos++) = output_buffer;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;          }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;          start_out_j += strategy::output_cols;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;          <span class="keyword">const</span> uint8_t *params = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">parameters</a>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;          <span class="comment">// Loop over the input channels</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_c = 0; in_c &lt; input_channels; in_c++)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;          {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="comment">// Construct the input array - first fill with padding values and</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="comment">// then fill in correct values.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; strategy::input_rows; i++)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;              <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                   j &lt; (16 / <span class="keyword">sizeof</span>(TInput)) * strategy::input_col_quads; j++)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;              {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                rearranged_input[i][j] = pad_value;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;              }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;              inptrs[i] = rearranged_input[i];</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keyword">auto</span> inptr_row = inptr_batch + in_c +</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                             (start_in_i + pad_top) * ld_input_row +</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                             (start_in_j + pad_left) * ld_input_col;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> (ld_input_col == 1 &amp;&amp; !pad_left &amp;&amp;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                start_in_j + (16 / <span class="keyword">sizeof</span>(TInput)) * strategy::input_col_quads &lt; <a class="code" href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;              <span class="comment">// The input tensor is already in NCHW format, and we&#39;re reading</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;              <span class="comment">// an unpadded section of it - allow the kernel to read it</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;              <span class="comment">// directly.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;              <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = pad_top; i &lt; strategy::input_rows - pad_bottom; i++)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;              {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                inptrs[i] = inptr_row;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                inptr_row += ld_input_row;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;              }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;              <span class="comment">// Either the input tensor isn&#39;t in NCHW format, or we&#39;re reading</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;              <span class="comment">// a padded section. Copy the relevant portion of the input here</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;              <span class="comment">// and allow the kernel to read this.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;              <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = pad_top; i &lt; strategy::input_rows - pad_bottom; i++)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;              {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">auto</span> inptr_col = inptr_row;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = pad_left; j &lt; strategy::input_cols - pad_right; j++)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                  rearranged_input[i][j] = *inptr_col;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                  inptr_col += ld_input_col;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                inptr_row += ld_input_row;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;              }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            execute_tile(inptrs, outptr_array, params);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="comment">// Progress the output pointers</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            TOutput **outptr_pos = outptr_array;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; strategy::output_rows * strategy::output_cols; i++)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;              outptr_pos[i] += <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Progress the pointer into the parameters</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            params += param_stride;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;          }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00073">CpuDepthwiseConv2dNativeKernel.cpp:73</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_abb222b6342b2b9056ec65056984d5e21"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#abb222b6342b2b9056ec65056984d5e21">arm_compute::test::parameters</a></div><div class="ttdeci">std::unique_ptr&lt; ParametersLibrary &gt; parameters</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00046">Framework.cpp:46</a></div></div>
<div class="ttc" id="_cpu_depthwise_conv2d_native_kernel_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="_cpu_depthwise_conv2d_native_kernel_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00072">CpuDepthwiseConv2dNativeKernel.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">CpuGemmAssemblyDispatch.cpp:57</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise_1_1common.xhtml">common</a></li>
    <li class="footer">Generated on Mon Nov 15 2021 14:44:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
