<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/kernels/CLElementwiseOperationKernel.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_elementwise_operation_kernel_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLElementwiseOperationKernel.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_elementwise_operation_kernel_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CLELEMENTWISEOPERATIONKERNEL_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_CLELEMENTWISEOPERATIONKERNEL_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_l_kernel_8h.xhtml">src/core/CL/ICLKernel.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_kernel_types_8h.xhtml">src/core/KernelTypes.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span>ICLTensor;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/** Interface for an element-wise operation kernel</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * Element-wise operation is computed by:</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @f[ output(x,y) = OP(input1(x,y), input2(x,y))@f]</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#aea9d74134fe47de37e4162a905d5bba9">CLElementwiseOperationKernel</a>();<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#aea9d74134fe47de37e4162a905d5bba9">CLElementwiseOperationKernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#af055f3fd57c30370ea9553962a287923">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#aea9d74134fe47de37e4162a905d5bba9">CLElementwiseOperationKernel</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#af055f3fd57c30370ea9553962a287923">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    /** Default destructor */</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#a27ccbab68c78b7dd53f78fc60134f459">~CLElementwiseOperationKernel</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, cl::CommandQueue &amp;queue) <span class="keyword">override</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /** The name of the operation */</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">virtual</span> std::string name() = 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /** Initialise the kernel&#39;s output.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * @param[in] input1 First tensor input info. Data types supported: U8/S8/QASYMM8/QASYMM8_SIGNED/U16/S16/F16/U32/S32/F32.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * @return a pair of Status and Window</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">virtual</span> std::pair&lt;Status, Window&gt; validate_and_configure_window(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /** Generate the build options for the specific kernel</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * @reutrn a CLBuildOptions struct</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> generate_build_options(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) = 0;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /** Generate the identifier for tuning</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     * @reutrn a string</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">virtual</span> std::string generate_id_for_tuning(<span class="keyword">const</span> std::string &amp;<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /** Commmon configure function for element-wise operators with no additional options (e.g., Div, Min, Max, SquaredDiff)</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">void</span> configure_common(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /** Commmon configure function for element-wise operators with no additional options (e.g., Div, Min, Max, SquaredDiff)</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">void</span> configure_common(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> _act_info;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *_input1; <span class="comment">/**&lt; Source tensor info 1 */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *_input2; <span class="comment">/**&lt; Source tensor info 2 */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>       *_output; <span class="comment">/**&lt; Destination tensor info */</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">  103</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">    /** Default constructor */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ab7e5a6d406f23048318de8e10ed2ed34">CLLogicalBinaryKernel</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ab7e5a6d406f23048318de8e10ed2ed34">CLLogicalBinaryKernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ae108e3d16027d5aef06137f1c9fd6efa">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ab7e5a6d406f23048318de8e10ed2ed34">CLLogicalBinaryKernel</a>(<a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ae108e3d16027d5aef06137f1c9fd6efa">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">CLLogicalBinaryKernel</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /** Default destructor */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#af1bfe7b2beabb4e494c6647ef100e344">~CLLogicalBinaryKernel</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /** Function to configure kernel</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * @param[in] compile_context The compile context to be used.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * @param[in] op              Logical binary operation to be executed.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     * @param[in] input1          First tensor input info. Data types supported: U8.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     * @param[in] input2          Second tensor input info. Data types supported: U8.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * @param[in] output          Output tensor info. Data types supported: U8.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a105bb2facd706d371412e551f3e98db4">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707">kernels::LogicalOperation</a> op, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">    /** Static function to check if the given configuration is valid for this kernel</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     * @param[in] op     Logical binary operation to be executed.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * @param[in] input1 First tensor input info. Data types supported: U8.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * @param[in] input2 Second tensor input info. Data types supported: U8.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: U8.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a98ee9a8ddd0f5c059bb2dca96fa5dbf0">validate</a>(<a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707">kernels::LogicalOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::string name() <span class="keyword">override</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::pair&lt;Status, Window&gt; validate_and_configure_window(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> generate_build_options(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::string generate_id_for_tuning(<span class="keyword">const</span> std::string &amp;<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707">kernels::LogicalOperation</a> _op{ <a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707a88183b946cc5f0e8c96b2e66e1c74a7e">kernels::LogicalOperation::Unknown</a> };</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;};</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/** Addition operation */</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">  147</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">CLSaturatedArithmeticOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3423d0d350bccafebaed646e19ea8a57">  150</a></span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3423d0d350bccafebaed646e19ea8a57">CLSaturatedArithmeticOperationKernel</a>()</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        : <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a>(), _policy(), _op()</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLSaturatedArithmeticOperationKernel</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @param[in] op       Arithmetic operation to be executed.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     * @param[in] input1   First tensor input info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">     * @param[in] input2   Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     * @param[in] output   Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     * @param[in] policy   Policy to use to handle overflow.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @param[in] act_info (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a1ecbc9b8b29038ed8c121cbec3eeb02c">configure</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLSaturatedArithmeticOperationKernel</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * @param[in] compile_context The compile context to be used.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     * @param[in] op              Arithmetic operation to be executed.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @param[in] input1          First tensor input info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * @param[in] input2          Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in] output          Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[in] policy          Policy to use to handle overflow.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @param[in] act_info        (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a1ecbc9b8b29038ed8c121cbec3eeb02c">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLSaturatedArithmeticOperationKernel</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * @param[in] op       Arithmetic operation to be executed.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * @param[in] input1   First tensor input info info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * @param[in] input2   Second tensor input info info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * @param[in] output   Output tensor info info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @param[in] policy   Policy to use to handle overflow.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     * @param[in] act_info (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::string name() <span class="keyword">override</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::pair&lt;Status, Window&gt; validate_and_configure_window(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> generate_build_options(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::string generate_id_for_tuning(<span class="keyword">const</span> std::string &amp;<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>       _policy;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> _op;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;};</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">  204</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">CLArithmeticOperationKernel</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#af9d6d899047862af33fc919a1dcb35eb">  207</a></span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#af9d6d899047862af33fc919a1dcb35eb">CLArithmeticOperationKernel</a>()</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        : <a class="code" href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">CLElementwiseOperationKernel</a>(), _op()</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLArithmeticOperationKernel</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">     * @param[in] op       Arithmetic operation to be executed.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">     * @param[in] input1   First tensor input info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">     * @param[in] input2   Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     * @param[in] output   Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     * @param[in] act_info (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#a7e12a5658d593c8eba42902a66d72582">configure</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLArithmeticOperationKernel</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * @param[in] compile_context The compile context to be used.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * @param[in] op              Arithmetic operation to be executed.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * @param[in] input1          First tensor input info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * @param[in] input2          Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * @param[in] output          Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     * @param[in] act_info        (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#a7e12a5658d593c8eba42902a66d72582">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLArithmeticOperationKernel</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     * @param[in] op       Arithmetic operation to be executed.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * @param[in] input1   First tensor input info. Data types supported: U8/QASYMM8/QASYMM8_SIGNED/S16/QSYMM16/F16/S32/F32.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     * @param[in] input2   Second tensor input info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * @param[in] output   Output tensor info. Data types supported: Same as @p input1.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     * @param[in] act_info (Optional) Activation layer information in case of a fused activation.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     * @return a Status</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#a18d26c7df2d54040fb505a0082f9c34f">validate</a>(<a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info = <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>());</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    std::string name() <span class="keyword">override</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    std::pair&lt;Status, Window&gt; validate_and_configure_window(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> generate_build_options(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    std::string generate_id_for_tuning(<span class="keyword">const</span> std::string &amp;<a class="code" href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;output) <span class="keyword">override</span>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> _op;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;};</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CLELEMENTWISEOPERATIONKERNEL_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml_a3423d0d350bccafebaed646e19ea8a57"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a3423d0d350bccafebaed646e19ea8a57">arm_compute::CLSaturatedArithmeticOperationKernel::CLSaturatedArithmeticOperationKernel</a></div><div class="ttdeci">CLSaturatedArithmeticOperationKernel()</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00150">CLElementwiseOperationKernel.h:150</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8ae"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">arm_compute::ArithmeticOperation</a></div><div class="ttdeci">ArithmeticOperation</div><div class="ttdoc">Available element-wise operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00534">Types.h:534</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1kernels_xhtml_a8cb8460f7fedf906ecab5621af891707a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707a88183b946cc5f0e8c96b2e66e1c74a7e">arm_compute::kernels::LogicalOperation::Unknown</a></div><div class="ttdoc">Unknown.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_elementwise_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml">arm_compute::CLElementwiseOperationKernel</a></div><div class="ttdoc">Interface for an element-wise operation kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00041">CLElementwiseOperationKernel.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_a98ee9a8ddd0f5c059bb2dca96fa5dbf0"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a98ee9a8ddd0f5c059bb2dca96fa5dbf0">arm_compute::CLLogicalBinaryKernel::validate</a></div><div class="ttdeci">static Status validate(kernels::LogicalOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if the given configuration is valid for this kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00344">CLElementwiseOperationKernel.cpp:344</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml">arm_compute::ICLKernel</a></div><div class="ttdoc">Common interface for all the OpenCL kernels.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_kernel_8h_source.xhtml#l00045">ICLKernel.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01541">Types.h:1541</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_ae108e3d16027d5aef06137f1c9fd6efa"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ae108e3d16027d5aef06137f1c9fd6efa">arm_compute::CLLogicalBinaryKernel::operator=</a></div><div class="ttdeci">CLLogicalBinaryKernel &amp; operator=(const CLLogicalBinaryKernel &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_elementwise_operation_kernel_xhtml_a27ccbab68c78b7dd53f78fc60134f459"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#a27ccbab68c78b7dd53f78fc60134f459">arm_compute::CLElementwiseOperationKernel::~CLElementwiseOperationKernel</a></div><div class="ttdeci">~CLElementwiseOperationKernel()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_arithmetic_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml">arm_compute::CLArithmeticOperationKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00204">CLElementwiseOperationKernel.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml_a1ecbc9b8b29038ed8c121cbec3eeb02c"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#a1ecbc9b8b29038ed8c121cbec3eeb02c">arm_compute::CLSaturatedArithmeticOperationKernel::configure</a></div><div class="ttdeci">void configure(ArithmeticOperation op, ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output, const ConvertPolicy &amp;policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLSaturatedArithmeticOpe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00393">CLElementwiseOperationKernel.cpp:393</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_arithmetic_operation_kernel_xhtml_a18d26c7df2d54040fb505a0082f9c34f"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#a18d26c7df2d54040fb505a0082f9c34f">arm_compute::CLArithmeticOperationKernel::validate</a></div><div class="ttdeci">static Status validate(ArithmeticOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00471">CLElementwiseOperationKernel.cpp:471</a></div></div>
<div class="ttc" id="_c_l_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_c_l_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_im2_col_kernel_8cpp_source.xhtml#l00052">CLIm2ColKernel.cpp:52</a></div></div>
<div class="ttc" id="_i_c_l_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml">arm_compute::CLBuildOptions</a></div><div class="ttdoc">Build options.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8h_source.xhtml#l00038">CLCompileContext.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1kernels_xhtml_a8cb8460f7fedf906ecab5621af891707"><div class="ttname"><a href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707">arm_compute::kernels::LogicalOperation</a></div><div class="ttdeci">LogicalOperation</div><div class="ttdoc">List of supported logical operations.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_types_8h_source.xhtml#l00032">KernelTypes.h:32</a></div></div>
<div class="ttc" id="_kernel_types_8h_xhtml"><div class="ttname"><a href="_kernel_types_8h.xhtml">KernelTypes.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8h_source.xhtml#l00202">CLCompileContext.h:202</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml_aebf6a0c58aca10e93cda09f6dfad4583"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml#aebf6a0c58aca10e93cda09f6dfad4583">arm_compute::CLSaturatedArithmeticOperationKernel::validate</a></div><div class="ttdeci">static Status validate(ArithmeticOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ConvertPolicy &amp;policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLSaturatedArithmeticOpe...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00414">CLElementwiseOperationKernel.cpp:414</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_arithmetic_operation_kernel_xhtml_a7e12a5658d593c8eba42902a66d72582"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#a7e12a5658d593c8eba42902a66d72582">arm_compute::CLArithmeticOperationKernel::configure</a></div><div class="ttdeci">void configure(ArithmeticOperation op, ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLArithmeticOperationKer...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00453">CLElementwiseOperationKernel.cpp:453</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_saturated_arithmetic_operation_kernel.xhtml">arm_compute::CLSaturatedArithmeticOperationKernel</a></div><div class="ttdoc">Addition operation.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00147">CLElementwiseOperationKernel.h:147</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_elementwise_operation_kernel_xhtml_af055f3fd57c30370ea9553962a287923"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#af055f3fd57c30370ea9553962a287923">arm_compute::CLElementwiseOperationKernel::operator=</a></div><div class="ttdeci">CLElementwiseOperationKernel &amp; operator=(const CLElementwiseOperationKernel &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_af1bfe7b2beabb4e494c6647ef100e344"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#af1bfe7b2beabb4e494c6647ef100e344">arm_compute::CLLogicalBinaryKernel::~CLLogicalBinaryKernel</a></div><div class="ttdeci">~CLLogicalBinaryKernel()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_a105bb2facd706d371412e551f3e98db4"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a105bb2facd706d371412e551f3e98db4">arm_compute::CLLogicalBinaryKernel::configure</a></div><div class="ttdeci">void configure(const CLCompileContext &amp;compile_context, kernels::LogicalOperation op, ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)</div><div class="ttdoc">Function to configure kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00336">CLElementwiseOperationKernel.cpp:336</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_ab7e5a6d406f23048318de8e10ed2ed34"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#ab7e5a6d406f23048318de8e10ed2ed34">arm_compute::CLLogicalBinaryKernel::CLLogicalBinaryKernel</a></div><div class="ttdeci">CLLogicalBinaryKernel()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00036">ITensorPack.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml">arm_compute::CLLogicalBinaryKernel</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00103">CLElementwiseOperationKernel.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_elementwise_operation_kernel_xhtml_a2563bcc3dcf9406cbf572d206a99d801"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#a2563bcc3dcf9406cbf572d206a99d801">arm_compute::CLElementwiseOperationKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, cl::CommandQueue &amp;queue) override</div><div class="ttdoc">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00288">CLElementwiseOperationKernel.cpp:288</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00385">Types.h:385</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_elementwise_operation_kernel_xhtml_aea9d74134fe47de37e4162a905d5bba9"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_operation_kernel.xhtml#aea9d74134fe47de37e4162a905d5bba9">arm_compute::CLElementwiseOperationKernel::CLElementwiseOperationKernel</a></div><div class="ttdeci">CLElementwiseOperationKernel()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00245">CLElementwiseOperationKernel.cpp:245</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_arithmetic_operation_kernel_xhtml_af9d6d899047862af33fc919a1dcb35eb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_operation_kernel.xhtml#af9d6d899047862af33fc919a1dcb35eb">arm_compute::CLArithmeticOperationKernel::CLArithmeticOperationKernel</a></div><div class="ttdeci">CLArithmeticOperationKernel()</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8h_source.xhtml#l00207">CLElementwiseOperationKernel.h:207</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_8a6a287e420ec4de95804825506d2fde.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_c_l_elementwise_operation_kernel_8h.xhtml">CLElementwiseOperationKernel.h</a></li>
    <li class="footer">Generated on Fri Nov 27 2020 13:50:32 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
