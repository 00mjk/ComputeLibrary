<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/functions/CLLogicalAnd.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">20.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_logical_and_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLLogicalAnd.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_logical_and_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_logical_and_8h.xhtml">arm_compute/runtime/CL/functions/CLLogicalAnd.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_l_tensor_8h.xhtml">arm_compute/core/CL/ICLTensor.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_elementwise_operation_kernel_8h.xhtml">src/core/CL/kernels/CLElementwiseOperationKernel.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_support_8h.xhtml">support/MemorySupport.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afacaa5a61a45c0c0097a8379102337bc">   35</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afacaa5a61a45c0c0097a8379102337bc">CLLogicalAnd::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span> k = arm_compute::support::cpp14::make_unique&lt;CLLogicalBinaryKernel&gt;();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    k-&gt;configure(compile_context, <a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">kernels::LogicalOperation::And</a>, input1, input2, output);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    _kernel = std::move(k);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">   42</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">CLLogicalAnd::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a98ee9a8ddd0f5c059bb2dca96fa5dbf0">CLLogicalBinaryKernel::validate</a>(<a class="code" href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">kernels::LogicalOperation::And</a>, input1, input2, output);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#a684a54d1fb1634a348a585c6b5e76df0">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#a684a54d1fb1634a348a585c6b5e76df0">CLLogicalAnd::run</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1_i_c_l_operator.xhtml#a684a54d1fb1634a348a585c6b5e76df0">ICLOperator::run</a>(tensors);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">struct </span>CLLogicalAnd::Impl</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                            *src0{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> ICLTensor                            *src1{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    ICLTensor                                  *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::unique_ptr&lt;experimental::CLLogicalAnd&gt; op{ <span class="keyword">nullptr</span> };</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;};</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_and.xhtml#a3803768661284ec65fce35a1de75a8bd">   61</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#a3803768661284ec65fce35a1de75a8bd">CLLogicalAnd::CLLogicalAnd</a>()</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    : _impl(support::cpp14::<a class="code" href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">make_unique</a>&lt;Impl&gt;())</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#a3803768661284ec65fce35a1de75a8bd">CLLogicalAnd::CLLogicalAnd</a>(<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#ad36881e07df87d9f898ffc58bde63531">CLLogicalAnd::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#a193b16db6619258717bd1903f4ab7cda">CLLogicalAnd::~CLLogicalAnd</a>()                          = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_and.xhtml#aa08e0c678275eb37e8de42be52d76e35">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#aa08e0c678275eb37e8de42be52d76e35">CLLogicalAnd::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input1, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#aa08e0c678275eb37e8de42be52d76e35">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_and.xhtml#a42b071de68a73c6e7ec999d93856aa32">   74</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#aa08e0c678275eb37e8de42be52d76e35">CLLogicalAnd::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input1, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    _impl-&gt;src0 = input1;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    _impl-&gt;src1 = input2;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    _impl-&gt;dst  = output;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    _impl-&gt;op   = arm_compute::support::cpp14::make_unique&lt;experimental::CLLogicalAnd&gt;();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">   83</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">CLLogicalAnd::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input2, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">experimental::CLLogicalAnd::validate</a>(input1, input2, output);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_logical_and.xhtml#ad1717410afd0be936c6213a63c8005fb">   88</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_logical_and.xhtml#ad1717410afd0be936c6213a63c8005fb">CLLogicalAnd::run</a>()</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> pack;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src1);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    pack.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    _impl-&gt;op-&gt;run(pack);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_ad36881e07df87d9f898ffc58bde63531"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#ad36881e07df87d9f898ffc58bde63531">arm_compute::CLLogicalAnd::operator=</a></div><div class="ttdeci">CLLogicalAnd &amp; operator=(const CLLogicalAnd &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_binary_kernel_xhtml_a98ee9a8ddd0f5c059bb2dca96fa5dbf0"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_binary_kernel.xhtml#a98ee9a8ddd0f5c059bb2dca96fa5dbf0">arm_compute::CLLogicalBinaryKernel::validate</a></div><div class="ttdeci">static Status validate(kernels::LogicalOperation op, const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if the given configuration is valid for this kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_operation_kernel_8cpp_source.xhtml#l00344">CLElementwiseOperationKernel.cpp:344</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_c_l_logical_and_xhtml_a684a54d1fb1634a348a585c6b5e76df0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#a684a54d1fb1634a348a585c6b5e76df0">arm_compute::experimental::CLLogicalAnd::run</a></div><div class="ttdeci">void run(ITensorPack &amp;tensors) override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00047">CLLogicalAnd.cpp:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8cpp_source.xhtml#l00987">CLKernelLibrary.cpp:987</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_a3803768661284ec65fce35a1de75a8bd"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#a3803768661284ec65fce35a1de75a8bd">arm_compute::CLLogicalAnd::CLLogicalAnd</a></div><div class="ttdeci">CLLogicalAnd()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00061">CLLogicalAnd.cpp:61</a></div></div>
<div class="ttc" id="_memory_support_8h_xhtml"><div class="ttname"><a href="_memory_support_8h.xhtml">MemorySupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_c_l_logical_and_xhtml_afe71126bef1735fe1613a6da30d2c0c4"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">arm_compute::experimental::CLLogicalAnd::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLLogicalBinaryKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00042">CLLogicalAnd.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2020 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00024">00_introduction.dox:24</a></div></div>
<div class="ttc" id="_c_l_logical_and_8h_xhtml"><div class="ttname"><a href="_c_l_logical_and_8h.xhtml">CLLogicalAnd.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_aa08e0c678275eb37e8de42be52d76e35"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#aa08e0c678275eb37e8de42be52d76e35">arm_compute::CLLogicalAnd::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00069">CLLogicalAnd.cpp:69</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml">arm_compute::CLLogicalAnd</a></div><div class="ttdoc">Basic function to run CLLogicalBinaryKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8h_source.xhtml#l00073">CLLogicalAnd.h:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_afe71126bef1735fe1613a6da30d2c0c4"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#afe71126bef1735fe1613a6da30d2c0c4">arm_compute::CLLogicalAnd::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00083">CLLogicalAnd.cpp:83</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp14_xhtml_a1d95a84d1a4610af6a128ad96c907e8b"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp14.xhtml#a1d95a84d1a4610af6a128ad96c907e8b">arm_compute::support::cpp14::make_unique</a></div><div class="ttdeci">_Unique_if&lt; T &gt;::_Single_object make_unique(Args &amp;&amp;... args)</div><div class="ttdoc">Construct a single object and return a unique pointer to it.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_support_8h_source.xhtml#l00088">MemorySupport.h:88</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00042">Types.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_compile_context_8h_source.xhtml#l00202">CLCompileContext.h:202</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00043">Types.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_c_l_logical_and_xhtml_afacaa5a61a45c0c0097a8379102337bc"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml#afacaa5a61a45c0c0097a8379102337bc">arm_compute::experimental::CLLogicalAnd::configure</a></div><div class="ttdeci">void configure(const CLCompileContext &amp;compile_context, ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00035">CLLogicalAnd.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLLogicalAnd::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_logical_and_8cpp_source.xhtml#l00088">CLLogicalAnd.cpp:88</a></div></div>
<div class="ttc" id="_c_l_elementwise_operation_kernel_8h_xhtml"><div class="ttname"><a href="_c_l_elementwise_operation_kernel_8h.xhtml">CLElementwiseOperationKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00042">ICLTensor.h:42</a></div></div>
<div class="ttc" id="_i_c_l_tensor_8h_xhtml"><div class="ttname"><a href="_i_c_l_tensor_8h.xhtml">ICLTensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1kernels_xhtml_a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b"><div class="ttname"><a href="namespacearm__compute_1_1kernels.xhtml#a8cb8460f7fedf906ecab5621af891707ac33315685a0cba3ce53be378b3c7874b">arm_compute::kernels::LogicalOperation::And</a></div><div class="ttdoc">Logical And &amp;&amp;.</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00036">ITensorPack.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1_i_c_l_operator_xhtml_a684a54d1fb1634a348a585c6b5e76df0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_i_c_l_operator.xhtml#a684a54d1fb1634a348a585c6b5e76df0">arm_compute::experimental::ICLOperator::run</a></div><div class="ttdeci">void run(ITensorPack &amp;tensors) override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_operator_8cpp_source.xhtml#l00038">CLOperator.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a6d8078b635739e84400cf8240a2993e7"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">arm_compute::ITensorPack::add_tensor</a></div><div class="ttdeci">void add_tensor(int id, ITensor *tensor)</div><div class="ttdoc">Add tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00030">ITensorPack.cpp:30</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_logical_and_xhtml_a193b16db6619258717bd1903f4ab7cda"><div class="ttname"><a href="classarm__compute_1_1_c_l_logical_and.xhtml#a193b16db6619258717bd1903f4ab7cda">arm_compute::CLLogicalAnd::~CLLogicalAnd</a></div><div class="ttdeci">~CLLogicalAnd()</div><div class="ttdoc">Default Destructor.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_0304d3529340c629ae0050036d07056a.xhtml">functions</a></li><li class="navelem"><a class="el" href="_c_l_logical_and_8cpp.xhtml">CLLogicalAnd.cpp</a></li>
    <li class="footer">Generated on Fri Nov 27 2020 13:50:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
